[topCellInitializer{}(LblinitGeneratedTopCell{}())]

module BASIC-K
  sort SortK{} []
  sort SortKItem{} []
endmodule []

module KSEQ
  import BASIC-K []

  // TODO: Provide constructor and functional axioms for `kseq` and `dotk`.
  symbol kseq{}(SortKItem{}, SortK{}) : SortK{} [constructor{}(),functional{}()]
  symbol dotk{}() : SortK{} [constructor{}(),functional{}()]

  symbol append{}(SortK{}, SortK{}) : SortK{} [function{}()]

  axiom{R}
    \equals{SortK{},R}(
      append{}(dotk{}(),K2:SortK{}),
      K2:SortK{})
  []

  axiom{R}
    \equals{SortK{},R}(
      append{}(kseq{}(K1:SortKItem{},K2:SortK{}),K3:SortK{}),
      kseq{}(K1:SortKItem{},append{}(K2:SortK{},K3:SortK{})))
  []

endmodule []

module INJ
  symbol inj{From,To}(From) : To [sortInjection{}()]

  axiom{S1,S2,S3,R}
    \equals{S3,R}(
      inj{S2,S3}(inj{S1,S2}(T:S1)),
      inj{S1,S3}(T:S1))
  []

endmodule []

module K
  import KSEQ []
  import INJ []

  // Defnitions for reachability aliases
  // Until we will have `mu` we resort to dummy definitions
  alias weakExistsFinally{A}(A) : A
  where weakExistsFinally{A}(@X:A) := @X:A []

  alias weakAlwaysFinally{A}(A) : A
  where weakAlwaysFinally{A}(@X:A) := @X:A []

  // Definitions for CTL aliases
  // Until we will have `mu` we resort to dummy definitions
  alias allPathGlobally{A}(A) : A
  where allPathGlobally{A}(@X:A) := @X:A []

endmodule []

module KT

// imports
  import K []

// sorts
  sort SortLocalFun{} []
  sort SortStoreCellOpt{} []
  sort SortIds{} []
  sort SortTCellFragment{} []
  sort SortFunThreadCellFragment{} []
  sort SortIdCell{} []
  hooked-sort SortFunThreadCellMap{} [hook{}("MAP.Map"), element{}(LblFunThreadCellMapItem{}()), concat{}(Lbl'Unds'FunThreadCellMap'Unds'{}()), unit{}(Lbl'Stop'FunThreadCellMap{}())]
  sort SortLocalResInt{} []
  sort SortStoreCell{} []
  sort SortKCellOpt{} []
  sort SortPrintable{} []
  sort SortEnvCell{} []
  sort SortLocalEnvCell{} []
  sort SortTempCellOpt{} []
  sort SortIOInt{} []
  sort SortLocCellOpt{} []
  sort SortStatement{} []
  sort SortMultsCellOpt{} []
  sort SortLocalResId{} []
  sort SortGeneratedTopCellFragment{} []
  sort SortIOFile{} []
  hooked-sort SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), element{}(LblListItem{}()), concat{}(Lbl'Unds'List'Unds'{}()), unit{}(Lbl'Stop'List{}()), hook{}("LIST.List"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(227,3,227,31)")]
  sort SortLocalEnvCellOpt{} []
  sort SortSkip{} []
  sort SortKCell{} []
  sort SortFunReturnType{} []
  sort SortFunctionCellOpt{} []
  sort SortLocalResString{} []
  sort SortOutCell{} []
  sort SortEnvCellOpt{} []
  sort SortGeneratedTopCell{} []
  sort SortGeneratedCounterCell{} []
  hooked-sort SortFloat{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(483,3,483,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), hook{}("FLOAT.Float"), hasDomainValues{}()]
  sort SortVariableType{} []
  sort SortUniqueIdAssigner{} []
  sort SortScopeCellOpt{} []
  sort SortTCellOpt{} []
  sort SortAExp{} []
  hooked-sort SortMap{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), element{}(Lbl'UndsPipe'-'-GT-Unds'{}()), concat{}(Lbl'Unds'Map'Unds'{}()), unit{}(Lbl'Stop'Map{}()), hook{}("MAP.Map"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(97,3,97,28)")]
  hooked-sort SortString{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(564,3,564,37)"), hook{}("STRING.String"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), hasDomainValues{}()]
  sort SortMainKotlinProg{} []
  sort SortIOString{} []
  sort SortId{} [token{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(826,3,826,19)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), hasDomainValues{}()]
  sort SortBlock{} []
  sort SortGeneratedCounterCellOpt{} []
  sort SortFunctionMain{} []
  sort SortIdCellOpt{} []
  sort SortKConfigVar{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(12,3,12,27)"), token{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/kast.k)"), hasDomainValues{}()]
  sort SortDeclaredVar{} []
  sort SortKotlinFun{} []
  sort SortFunctionCell{} []
  sort SortScopeCell{} []
  sort SortBExp{} []
  hooked-sort SortInt{} [hook{}("INT.Int"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(357,3,357,28)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), hasDomainValues{}()]
  sort SortFunctionCellFragment{} []
  sort SortFunReturn{} []
  sort SortIOError{} []
  hooked-sort SortSet{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), element{}(LblSetItem{}()), concat{}(Lbl'Unds'Set'Unds'{}()), unit{}(Lbl'Stop'Set{}()), hook{}("SET.Set"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(189,3,189,28)")]
  sort SortOutCellOpt{} []
  sort SortAExpMod{} []
  sort SortAExps{} []
  sort SortParamsCell{} []
  sort SortLocCell{} []
  sort SortMultsCell{} []
  sort SortElseIfStatement{} []
  sort SortValues{} []
  sort SortFunThreadCell{} []
  sort SortKResult{} []
  sort SortKotIntVarAssign{} []
  sort SortTempCell{} []
  sort SortStream{} []
  sort SortCell{} []
  sort SortTCell{} []
  hooked-sort SortBool{} [hook{}("BOOL.Bool"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(301,3,301,31)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), hasDomainValues{}()]
  sort SortParams{} []
  sort SortKotlinFunCall{} []
  sort SortAssigner{} []
  sort SortParamsCellOpt{} []

// symbols
  symbol Lbl'Hash'E2BIG{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#E2BIG"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(908,22,908,54)"), injective{}()]
  symbol Lbl'Hash'EACCES{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EACCES"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(909,22,909,56)"), injective{}()]
  symbol Lbl'Hash'EADDRINUSE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EADDRINUSE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(958,22,958,64)"), injective{}()]
  symbol Lbl'Hash'EADDRNOTAVAIL{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EADDRNOTAVAIL"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(959,22,959,70)"), injective{}()]
  symbol Lbl'Hash'EAFNOSUPPORT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EAFNOSUPPORT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(957,22,957,68)"), injective{}()]
  symbol Lbl'Hash'EAGAIN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EAGAIN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(910,22,910,56)"), injective{}()]
  symbol Lbl'Hash'EALREADY{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EALREADY"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(947,22,947,60)"), injective{}()]
  symbol Lbl'Hash'EBADF{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EBADF"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(911,22,911,54)"), injective{}()]
  symbol Lbl'Hash'EBUSY{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EBUSY"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(912,22,912,54)"), injective{}()]
  symbol Lbl'Hash'ECHILD{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ECHILD"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(913,22,913,56)"), injective{}()]
  symbol Lbl'Hash'ECONNABORTED{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ECONNABORTED"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(963,22,963,68)"), injective{}()]
  symbol Lbl'Hash'ECONNREFUSED{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ECONNREFUSED"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(971,22,971,68)"), injective{}()]
  symbol Lbl'Hash'ECONNRESET{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ECONNRESET"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(964,22,964,64)"), injective{}()]
  symbol Lbl'Hash'EDEADLK{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EDEADLK"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(914,22,914,58)"), injective{}()]
  symbol Lbl'Hash'EDESTADDRREQ{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EDESTADDRREQ"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(949,22,949,68)"), injective{}()]
  symbol Lbl'Hash'EDOM{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EDOM"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(915,22,915,52)"), injective{}()]
  symbol Lbl'Hash'EEXIST{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EEXIST"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(916,22,916,56)"), injective{}()]
  symbol Lbl'Hash'EFAULT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EFAULT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(917,22,917,56)"), injective{}()]
  symbol Lbl'Hash'EFBIG{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EFBIG"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(918,22,918,54)"), injective{}()]
  symbol Lbl'Hash'EHOSTDOWN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EHOSTDOWN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(972,22,972,62)"), injective{}()]
  symbol Lbl'Hash'EHOSTUNREACH{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EHOSTUNREACH"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(973,22,973,68)"), injective{}()]
  symbol Lbl'Hash'EINPROGRESS{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EINPROGRESS"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(946,22,946,66)"), injective{}()]
  symbol Lbl'Hash'EINTR{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EINTR"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(919,22,919,54)"), injective{}()]
  symbol Lbl'Hash'EINVAL{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EINVAL"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(920,22,920,56)"), injective{}()]
  symbol Lbl'Hash'EIO{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EIO"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(921,22,921,50)"), injective{}()]
  symbol Lbl'Hash'EISCONN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EISCONN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(966,22,966,58)"), injective{}()]
  symbol Lbl'Hash'EISDIR{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EISDIR"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(922,22,922,56)"), injective{}()]
  symbol Lbl'Hash'ELOOP{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ELOOP"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(974,22,974,54)"), injective{}()]
  symbol Lbl'Hash'EMFILE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EMFILE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(923,22,923,56)"), injective{}()]
  symbol Lbl'Hash'EMLINK{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EMLINK"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(924,22,924,56)"), injective{}()]
  symbol Lbl'Hash'EMSGSIZE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EMSGSIZE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(950,22,950,60)"), injective{}()]
  symbol Lbl'Hash'ENAMETOOLONG{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENAMETOOLONG"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(925,22,925,68)"), injective{}()]
  symbol Lbl'Hash'ENETDOWN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENETDOWN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(960,22,960,60)"), injective{}()]
  symbol Lbl'Hash'ENETRESET{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENETRESET"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(962,22,962,62)"), injective{}()]
  symbol Lbl'Hash'ENETUNREACH{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENETUNREACH"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(961,22,961,66)"), injective{}()]
  symbol Lbl'Hash'ENFILE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENFILE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(926,22,926,56)"), injective{}()]
  symbol Lbl'Hash'ENOBUFS{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENOBUFS"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(965,22,965,58)"), injective{}()]
  symbol Lbl'Hash'ENODEV{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENODEV"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(927,22,927,56)"), injective{}()]
  symbol Lbl'Hash'ENOENT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENOENT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(928,22,928,56)"), injective{}()]
  symbol Lbl'Hash'ENOEXEC{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENOEXEC"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(929,22,929,58)"), injective{}()]
  symbol Lbl'Hash'ENOLCK{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENOLCK"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(930,22,930,56)"), injective{}()]
  symbol Lbl'Hash'ENOMEM{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENOMEM"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(931,22,931,56)"), injective{}()]
  symbol Lbl'Hash'ENOPROTOOPT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENOPROTOOPT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(952,22,952,66)"), injective{}()]
  symbol Lbl'Hash'ENOSPC{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENOSPC"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(932,22,932,56)"), injective{}()]
  symbol Lbl'Hash'ENOSYS{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENOSYS"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(933,22,933,56)"), injective{}()]
  symbol Lbl'Hash'ENOTCONN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENOTCONN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(967,22,967,60)"), injective{}()]
  symbol Lbl'Hash'ENOTDIR{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENOTDIR"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(934,22,934,58)"), injective{}()]
  symbol Lbl'Hash'ENOTEMPTY{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENOTEMPTY"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(935,22,935,62)"), injective{}()]
  symbol Lbl'Hash'ENOTSOCK{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENOTSOCK"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(948,22,948,60)"), injective{}()]
  symbol Lbl'Hash'ENOTTY{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENOTTY"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(936,22,936,56)"), injective{}()]
  symbol Lbl'Hash'ENXIO{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ENXIO"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(937,22,937,54)"), injective{}()]
  symbol Lbl'Hash'EOF{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EOF"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(907,22,907,50)"), injective{}()]
  symbol Lbl'Hash'EOPNOTSUPP{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EOPNOTSUPP"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(955,22,955,64)"), injective{}()]
  symbol Lbl'Hash'EOVERFLOW{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EOVERFLOW"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(975,22,975,62)"), injective{}()]
  symbol Lbl'Hash'EPERM{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EPERM"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(938,22,938,54)"), injective{}()]
  symbol Lbl'Hash'EPFNOSUPPORT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EPFNOSUPPORT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(956,22,956,68)"), injective{}()]
  symbol Lbl'Hash'EPIPE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EPIPE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(939,22,939,54)"), injective{}()]
  symbol Lbl'Hash'EPROTONOSUPPORT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EPROTONOSUPPORT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(953,22,953,74)"), injective{}()]
  symbol Lbl'Hash'EPROTOTYPE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EPROTOTYPE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(951,22,951,64)"), injective{}()]
  symbol Lbl'Hash'ERANGE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ERANGE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(940,22,940,56)"), injective{}()]
  symbol Lbl'Hash'EROFS{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EROFS"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(941,22,941,54)"), injective{}()]
  symbol Lbl'Hash'ESHUTDOWN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ESHUTDOWN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(968,22,968,62)"), injective{}()]
  symbol Lbl'Hash'ESOCKTNOSUPPORT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ESOCKTNOSUPPORT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(954,22,954,74)"), injective{}()]
  symbol Lbl'Hash'ESPIPE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ESPIPE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(942,22,942,56)"), injective{}()]
  symbol Lbl'Hash'ESRCH{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ESRCH"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(943,22,943,54)"), injective{}()]
  symbol Lbl'Hash'ETIMEDOUT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ETIMEDOUT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(970,22,970,62)"), injective{}()]
  symbol Lbl'Hash'ETOOMANYREFS{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#ETOOMANYREFS"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(969,22,969,68)"), injective{}()]
  symbol Lbl'Hash'EWOULDBLOCK{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EWOULDBLOCK"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(945,22,945,66)"), injective{}()]
  symbol Lbl'Hash'EXDEV{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#EXDEV"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(944,22,944,54)"), injective{}()]
  hooked-symbol Lbl'Hash'accept'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'Int{}(SortInt{}) : SortIOInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.accept"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(984,18,984,78)"), function{}()]
  hooked-symbol Lbl'Hash'argv'LParRParUnds'K-REFLECTION'Unds'List{}() : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("#argv"), hook{}("KREFLECTION.argv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(881,19,881,60)"), function{}()]
  symbol Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(SortK{}) : SortStream{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("#buffer"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1012,21,1012,30)"), injective{}()]
  hooked-symbol Lbl'Hash'close'LParUndsRParUnds'K-IO'Unds'K'Unds'Int{}(SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.close"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(987,16,987,74)"), function{}()]
  hooked-symbol Lbl'Hash'configuration'Unds'K-REFLECTION'Unds'K{}() : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("KREFLECTION.configuration"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(872,16,872,83)"), function{}()]
  symbol Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(SortK{}, SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(SortK{}, SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(SortK{}) : SortKItem{} [constructor{}(), functional{}(), injective{}()]
  hooked-symbol Lbl'Hash'fresh'LParUndsRParUnds'K-REFLECTION'Unds'KItem'Unds'String{}(SortString{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), klabel{}("#fresh"), hook{}("KREFLECTION.fresh"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(874,20,874,79)"), function{}()]
  hooked-symbol Lbl'Hash'getc'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'Int{}(SortInt{}) : SortIOInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.getc"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(983,18,983,86)"), function{}()]
  hooked-symbol Lbl'Hash'getenv'LParUndsRParUnds'K-REFLECTION'Unds'String'Unds'String{}(SortString{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), klabel{}("#getenv"), hook{}("KREFLECTION.getenv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(877,21,877,80)"), function{}()]
  hooked-symbol Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortSort}(SortBool{}, SortSort, SortSort) : SortSort [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), smt-hook{}("ite"), hook{}("KEQUAL.ite"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(860,26,860,125)"), function{}()]
  hooked-symbol Lbl'Hash'lock'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.lock"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(992,16,992,90)"), function{}()]
  hooked-symbol Lbl'Hash'logToFile{}(SortString{}, SortString{}) : SortK{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), returnsUnit{}(), symbol'Kywd'{}(), impure{}(), klabel{}("#logToFile"), hook{}("IO.log"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1022,16,1022,120)"), function{}()]
  hooked-symbol Lbl'Hash'lstat'LParUndsRParUnds'K-IO'Unds'KItem'Unds'String{}(SortString{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.lstat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(997,20,997,77)"), function{}()]
  hooked-symbol Lbl'Hash'mkstemp'LParUndsRParUnds'K-IO'Unds'IOFile'Unds'String{}(SortString{}) : SortIOFile{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), klabel{}("#mkstemp"), hook{}("IO.mkstemp"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1024,21,1024,83)"), function{}()]
  symbol Lbl'Hash'noParse{}(SortString{}) : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#noParse"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(886,22,886,73)"), injective{}()]
  symbol Lbl'Hash'open'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'String{}(SortString{}) : SortIOInt{} [function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(980,20,980,58)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'open'LParUndsCommUndsRParUnds'K-IO'Unds'IOInt'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortIOInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.open"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(981,18,981,96)"), function{}()]
  hooked-symbol Lbl'Hash'opendir'LParUndsRParUnds'K-IO'Unds'KItem'Unds'String{}(SortString{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.opendir"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(998,20,998,81)"), function{}()]
  hooked-symbol Lbl'Hash'parseKAST'LParUndsRParUnds'K-REFLECTION'Unds'Sort'Unds'String{SortSort}(SortString{}) : SortSort [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("#parseKAST"), hook{}("KREFLECTION.parseKAST"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(885,26,885,83)"), function{}()]
  hooked-symbol Lbl'Hash'parseKORE'LParUndsRParUnds'K-REFLECTION'Unds'Sort'Unds'String{SortSort}(SortString{}) : SortSort [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("#parseKORE"), hook{}("KREFLECTION.parseKORE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(884,26,884,83)"), function{}()]
  hooked-symbol Lbl'Hash'putc'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.putc"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(990,16,990,92)"), function{}()]
  hooked-symbol Lbl'Hash'read'LParUndsCommUndsRParUnds'K-IO'Unds'IOString'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortIOString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.read"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(985,23,985,98)"), function{}()]
  hooked-symbol Lbl'Hash'remove'LParUndsRParUnds'K-IO'Unds'K'Unds'String{}(SortString{}) : SortK{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), klabel{}("#remove"), hook{}("IO.remove"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1028,16,1028,84)"), function{}()]
  hooked-symbol Lbl'Hash'seek'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.seek"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(988,16,988,87)"), function{}()]
  hooked-symbol Lbl'Hash'seekEnd'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.seekEnd"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(989,16,989,95)"), function{}()]
  hooked-symbol Lbl'Hash'shutdownWrite'LParUndsRParUnds'K-IO'Unds'K'Unds'Int{}(SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.shutdownWrite"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(994,16,994,90)"), function{}()]
  hooked-symbol Lbl'Hash'sort'LParUndsRParUnds'K-REFLECTION'Unds'String'Unds'K{}(SortK{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("#sort"), hook{}("KREFLECTION.sort"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(873,21,873,63)"), function{}()]
  hooked-symbol Lbl'Hash'stat'LParUndsRParUnds'K-IO'Unds'KItem'Unds'String{}(SortString{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.stat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(996,20,996,75)"), function{}()]
  symbol Lbl'Hash'stderr'Unds'K-IO'Unds'Int{}() : SortInt{} [functional{}(), function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1006,19,1006,50)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'stdin'Unds'K-IO'Unds'Int{}() : SortInt{} [functional{}(), function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1004,18,1004,50)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)")]
  symbol Lbl'Hash'stdout'Unds'K-IO'Unds'Int{}() : SortInt{} [functional{}(), function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1005,19,1005,50)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Hash'system'LParUndsRParUnds'K-IO'Unds'KItem'Unds'String{}(SortString{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), klabel{}("#system"), hook{}("IO.system"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1019,20,1019,73)"), function{}()]
  symbol Lbl'Hash'systemResult{}(SortInt{}, SortString{}, SortString{}) : SortKItem{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#systemResult"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1020,20,1020,142)"), injective{}()]
  hooked-symbol Lbl'Hash'tell'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'Int{}(SortInt{}) : SortIOInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.tell"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(982,18,982,74)"), function{}()]
  symbol Lbl'Hash'tempFile{}(SortString{}, SortInt{}) : SortIOFile{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#tempFile"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1026,21,1026,92)"), injective{}()]
  hooked-symbol Lbl'Hash'time'LParRParUnds'K-IO'Unds'Int{}() : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.time"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1000,18,1000,66)"), function{}()]
  symbol Lbl'Hash'unknownIOError{}(SortInt{}) : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("#unknownIOError"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(907,54,907,89)"), injective{}()]
  hooked-symbol Lbl'Hash'unlock'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.unlock"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(993,16,993,94)"), function{}()]
  hooked-symbol Lbl'Hash'write'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'String{}(SortInt{}, SortString{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("IO.write"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(991,16,991,92)"), function{}()]
  hooked-symbol Lbl'Stop'FunThreadCellMap{}() : SortFunThreadCellMap{} [hook{}("MAP.unit"), function{}()]
  hooked-symbol Lbl'Stop'List{}() : SortList{} [latex{}("\\dotCt{List}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), smtlib{}("smt_seq_nil"), klabel{}(".List"), hook{}("LIST.unit"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(262,19,262,146)"), function{}()]
  symbol Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps'QuotRBraUnds'AExps{}() : SortAExps{} [functional{}(), constructor{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), klabel{}(".List{\"_,__KT-SYNTAX\"}"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(82,20,82,33)"), injective{}()]
  symbol Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}() : SortIds{} [functional{}(), constructor{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), klabel{}(".List{\"_,__KT-SYNTAX\"}"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(44,18,44,30)"), injective{}()]
  symbol Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Params'Unds'Id'Unds'Params'QuotRBraUnds'Params{}() : SortParams{} [functional{}(), constructor{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), klabel{}(".List{\"_,__KT-SYNTAX\"}"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(13,21,13,33)"), injective{}()]
  symbol Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Values'Unds'Int'Unds'Values'QuotRBraUnds'Values{}() : SortValues{} [functional{}(), constructor{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), klabel{}(".List{\"_,__KT-SYNTAX\"}"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(22,21,22,34)"), injective{}()]
  hooked-symbol Lbl'Stop'Map{}() : SortMap{} [latex{}("\\dotCt{Map}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}(".Map"), hook{}("MAP.unit"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(107,18,107,128)"), function{}()]
  hooked-symbol Lbl'Stop'Set{}() : SortSet{} [latex{}("\\dotCt{Set}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}(".Set"), hook{}("SET.unit"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(197,18,197,122)"), function{}()]
  symbol Lbl'-LT-'T'-GT-'{}(SortKCell{}, SortFunctionCell{}, SortEnvCell{}, SortStoreCell{}, SortMultsCell{}, SortOutCell{}, SortLocCell{}) : SortTCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cellName{}("T"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("350"), contentStartColumn{}("17"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(350,17,366,7)"), format{}("%1%i%n%2%n%3%n%4%n%5%n%6%n%7%n%8%d%n%9"), injective{}(), cell{}(), topcell{}()]
  symbol Lbl'-LT-'T'-GT-'-fragment{}(SortKCellOpt{}, SortFunctionCellOpt{}, SortEnvCellOpt{}, SortStoreCellOpt{}, SortMultsCellOpt{}, SortOutCellOpt{}, SortLocCellOpt{}) : SortTCellFragment{} [cellFragment{}("TCell"), constructor{}(), functional{}(), injective{}()]
  symbol Lbl'-LT-'env'-GT-'{}(SortMap{}) : SortEnvCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cellName{}("env"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("350"), contentStartColumn{}("17"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(350,17,366,7)"), format{}("%1%i%n%2%d%n%3"), injective{}(), cell{}()]
  symbol Lbl'-LT-'funThread'-GT-'{}(SortIdCell{}, SortScopeCell{}, SortParamsCell{}, SortTempCell{}, SortLocalEnvCell{}) : SortFunThreadCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), color{}("red"), cellName{}("funThread"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("350"), type{}("Map"), contentStartColumn{}("17"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(350,17,366,7)"), format{}("%1%i%n%2%n%3%n%4%n%5%n%6%d%n%7"), multiplicity{}("*"), injective{}(), cell{}()]
  symbol Lbl'-LT-'funThread'-GT-'-fragment{}(SortIdCellOpt{}, SortScopeCellOpt{}, SortParamsCellOpt{}, SortTempCellOpt{}, SortLocalEnvCellOpt{}) : SortFunThreadCellFragment{} [cellFragment{}("FunThreadCell"), constructor{}(), functional{}(), injective{}()]
  symbol Lbl'-LT-'function'-GT-'{}(SortFunThreadCellMap{}) : SortFunctionCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), color{}("green"), cellName{}("function"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("350"), contentStartColumn{}("17"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(350,17,366,7)"), format{}("%1%i%n%2%d%n%3"), injective{}(), cell{}()]
  symbol Lbl'-LT-'function'-GT-'-fragment{}(SortFunThreadCellMap{}) : SortFunctionCellFragment{} [cellFragment{}("FunctionCell"), constructor{}(), functional{}(), injective{}()]
  symbol Lbl'-LT-'generatedCounter'-GT-'{}(SortInt{}) : SortGeneratedCounterCell{} [functional{}(), constructor{}(), cellName{}("generatedCounter"), format{}("%1%i%n%2%d%n%3"), injective{}(), cell{}()]
  symbol Lbl'-LT-'generatedTop'-GT-'{}(SortTCell{}, SortGeneratedCounterCell{}) : SortGeneratedTopCell{} [functional{}(), constructor{}(), cellName{}("generatedTop"), format{}("%2"), injective{}(), cell{}(), topcell{}()]
  symbol Lbl'-LT-'generatedTop'-GT-'-fragment{}(SortTCellOpt{}, SortGeneratedCounterCellOpt{}) : SortGeneratedTopCellFragment{} [cellFragment{}("GeneratedTopCell"), constructor{}(), functional{}(), injective{}()]
  symbol Lbl'-LT-'id'-GT-'{}(SortK{}) : SortIdCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cellName{}("id"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("350"), contentStartColumn{}("17"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(350,17,366,7)"), format{}("%1%i%n%2%d%n%3"), injective{}(), cell{}()]
  symbol Lbl'-LT-'k'-GT-'{}(SortK{}) : SortKCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cellName{}("k"), maincell{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("350"), contentStartColumn{}("17"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(350,17,366,7)"), format{}("%1%i%n%2%d%n%3"), injective{}(), cell{}()]
  symbol Lbl'-LT-'loc'-GT-'{}(SortInt{}) : SortLocCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cellName{}("loc"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("350"), contentStartColumn{}("17"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(350,17,366,7)"), format{}("%1%i%n%2%d%n%3"), injective{}(), cell{}()]
  symbol Lbl'-LT-'localEnv'-GT-'{}(SortMap{}) : SortLocalEnvCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cellName{}("localEnv"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("350"), contentStartColumn{}("17"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(350,17,366,7)"), format{}("%1%i%n%2%d%n%3"), injective{}(), cell{}()]
  symbol Lbl'-LT-'mults'-GT-'{}(SortMap{}) : SortMultsCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cellName{}("mults"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("350"), contentStartColumn{}("17"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(350,17,366,7)"), format{}("%1%i%n%2%d%n%3"), injective{}(), cell{}()]
  symbol Lbl'-LT-'out'-GT-'{}(SortList{}) : SortOutCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), color{}("blue"), cellName{}("out"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("350"), contentStartColumn{}("17"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(350,17,366,7)"), format{}("%1%i%n%2%d%n%3"), injective{}(), cell{}()]
  symbol Lbl'-LT-'params'-GT-'{}(SortK{}) : SortParamsCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cellName{}("params"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("350"), contentStartColumn{}("17"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(350,17,366,7)"), format{}("%1%i%n%2%d%n%3"), injective{}(), cell{}()]
  symbol Lbl'-LT-'scope'-GT-'{}(SortK{}) : SortScopeCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cellName{}("scope"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("350"), contentStartColumn{}("17"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(350,17,366,7)"), format{}("%1%i%n%2%d%n%3"), injective{}(), cell{}()]
  symbol Lbl'-LT-'store'-GT-'{}(SortMap{}) : SortStoreCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cellName{}("store"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("350"), contentStartColumn{}("17"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(350,17,366,7)"), format{}("%1%i%n%2%d%n%3"), injective{}(), cell{}()]
  symbol Lbl'-LT-'temp'-GT-'{}(SortK{}) : SortTempCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cellName{}("temp"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("350"), contentStartColumn{}("17"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(350,17,366,7)"), format{}("%1%i%n%2%d%n%3"), injective{}(), cell{}()]
  hooked-symbol LblBase2String'LParUndsCommUndsRParUnds'STRING'Unds'String'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("Base2String"), hook{}("STRING.base2string"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(593,21,593,98)"), function{}()]
  hooked-symbol LblFloat2String'LParUndsRParUnds'STRING'Unds'String'Unds'Float{}(SortFloat{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("Float2String"), hook{}("STRING.float2string"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(588,21,588,105)"), function{}()]
  hooked-symbol LblFloat2String'LParUndsCommUndsRParUnds'STRING'Unds'String'Unds'Float'Unds'String{}(SortFloat{}, SortString{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("FloatFormat"), hook{}("STRING.floatFormat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(589,21,589,121)"), function{}()]
  hooked-symbol LblFunThreadCellMapItem{}(SortIdCell{}, SortFunThreadCell{}) : SortFunThreadCellMap{} [hook{}("MAP.element"), function{}(), format{}("%5")]
  hooked-symbol LblId2String'LParUndsRParUnds'ID-SYNTAX'Unds'String'Unds'Id{}(SortId{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("Id2String"), hook{}("STRING.token2string"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(828,21,828,89)"), function{}()]
  hooked-symbol LblInt2String'LParUndsRParUnds'STRING'Unds'String'Unds'Int{}(SortInt{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("Int2String"), hook{}("STRING.int2string"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(592,21,592,103)"), function{}()]
  symbol LblInt'Unds'KT-SYNTAX'Unds'FunReturnType{}() : SortFunReturnType{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(15,28,15,32)"), injective{}()]
  hooked-symbol LblList'Coln'get{}(SortList{}, SortInt{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("List:get"), hook{}("LIST.get"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(270,20,270,98)"), function{}()]
  hooked-symbol LblList'Coln'range{}(SortList{}, SortInt{}, SortInt{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("List:range"), hook{}("LIST.range"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(281,19,281,119)"), function{}()]
  hooked-symbol LblListItem{}(SortKItem{}) : SortList{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), smtlib{}("smt_seq_elem"), klabel{}("ListItem"), hook{}("LIST.element"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(265,19,265,136)"), function{}()]
  hooked-symbol LblMap'Coln'lookup{}(SortMap{}, SortKItem{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("Map:lookup"), hook{}("MAP.lookup"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(118,20,118,112)"), function{}()]
  hooked-symbol LblMap'Coln'update{}(SortMap{}, SortKItem{}, SortKItem{}) : SortMap{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), prefer{}(), klabel{}("Map:update"), hook{}("MAP.update"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(123,18,123,144)"), function{}()]
  hooked-symbol LblSet'Coln'difference{}(SortSet{}, SortSet{}) : SortSet{} [latex{}("{#1}-_{\\it Set}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("Set:difference"), hook{}("SET.difference"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(208,18,208,146)"), function{}()]
  hooked-symbol LblSet'Coln'in{}(SortKItem{}, SortSet{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("Set:in"), hook{}("SET.in"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(211,19,211,106)"), function{}()]
  hooked-symbol LblSetItem{}(SortKItem{}) : SortSet{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("SetItem"), hook{}("SET.element"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(202,18,202,112)"), function{}()]
  symbol LblSkip'Unds'KT-SYNTAX'Unds'Skip{}() : SortSkip{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(121,19,121,24)"), injective{}()]
  hooked-symbol LblString2Base'LParUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'Int{}(SortString{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("String2Base"), hook{}("STRING.string2base"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(594,21,594,98)"), function{}()]
  hooked-symbol LblString2Float'LParUndsRParUnds'STRING'Unds'Float'Unds'String{}(SortString{}) : SortFloat{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("String2Float"), hook{}("STRING.string2float"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(590,21,590,93)"), function{}()]
  hooked-symbol LblString2Id'LParUndsRParUnds'ID-SYNTAX'Unds'Id'Unds'String{}(SortString{}) : SortId{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("String2Id"), hook{}("STRING.string2token"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(829,17,829,84)"), function{}()]
  hooked-symbol LblString2Int'LParUndsRParUnds'STRING'Unds'Int'Unds'String{}(SortString{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("String2Int"), hook{}("STRING.string2int"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(591,21,591,91)"), function{}()]
  hooked-symbol Lbl'UndsPerc'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\%_{\\scriptstyle\\it Int}}{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("mod"), klabel{}("_%Int_"), hook{}("INT.tmod"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(378,18,378,170)"), function{}()]
  hooked-symbol Lbl'UndsAnd-'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\&_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smtlib{}("andInt"), klabel{}("_&Int_"), hook{}("INT.and"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(389,18,389,182)"), function{}()]
  symbol Lbl'UndsLParUndsRParSClnUnds'KT-SYNTAX'Unds'KotlinFunCall'Unds'Id'Unds'Values{}(SortId{}, SortValues{}) : SortKotlinFunCall{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(25,28,25,48)"), injective{}()]
  hooked-symbol Lbl'UndsStar'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\ast_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("*"), klabel{}("_*Int_"), hook{}("INT.mul"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(374,18,374,181)"), function{}()]
  symbol Lbl'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortAExp{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(112,25,112,49)"), injective{}(), seqstrict{}()]
  symbol Lbl'UndsPlusPlusUnds'KT-SYNTAX'Unds'AExpMod'Unds'Id{}(SortId{}) : SortAExpMod{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(108,22,108,28)"), injective{}()]
  hooked-symbol Lbl'UndsPlus'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{+_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("+"), klabel{}("_+Int_"), hook{}("INT.add"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(383,18,383,178)"), function{}()]
  hooked-symbol Lbl'UndsPlus'String'UndsUnds'STRING'Unds'String'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortString{} [latex{}("{#1}+_{\\scriptstyle\\it String}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), hook{}("STRING.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(574,21,574,139)"), function{}()]
  symbol Lbl'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortAExp{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(115,19,115,43)"), injective{}(), seqstrict{}()]
  symbol Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(SortAExp{}, SortAExps{}) : SortAExps{} [functional{}(), constructor{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), right{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(82,20,82,33)"), injective{}()]
  symbol Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(SortId{}, SortIds{}) : SortIds{} [functional{}(), constructor{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), right{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(44,18,44,30)"), injective{}()]
  symbol Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Params'Unds'Id'Unds'Params{}(SortId{}, SortParams{}) : SortParams{} [functional{}(), constructor{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), right{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(13,21,13,33)"), injective{}()]
  symbol Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Values'Unds'Int'Unds'Values{}(SortInt{}, SortValues{}) : SortValues{} [functional{}(), constructor{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), right{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(22,21,22,34)"), injective{}()]
  symbol Lbl'Unds'--'Unds'KT-SYNTAX'Unds'AExpMod'Unds'Id{}(SortId{}) : SortAExpMod{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(109,21,109,27)"), injective{}()]
  hooked-symbol Lbl'Unds'-Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{-_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("-"), klabel{}("_-Int_"), hook{}("INT.sub"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(384,18,384,178)"), function{}()]
  hooked-symbol Lbl'Unds'-Map'UndsUnds'MAP'Unds'Map'Unds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortMap{} [latex{}("{#1}-_{\\it Map}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), hook{}("MAP.difference"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(130,18,130,120)"), function{}()]
  symbol Lbl'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortAExp{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(114,19,114,43)"), injective{}(), seqstrict{}()]
  hooked-symbol Lbl'UndsSlsh'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\div_{\\scriptstyle\\it Int}}{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("div"), klabel{}("_/Int_"), hook{}("INT.tdiv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(377,18,377,172)"), function{}()]
  symbol Lbl'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortAExp{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(113,25,113,49)"), injective{}(), seqstrict{}()]
  hooked-symbol Lbl'Unds-LT--LT-'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\ll_{\\scriptstyle\\it Int}}{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smtlib{}("shlInt"), klabel{}("_<<Int_"), hook{}("INT.shl"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(387,18,387,172)"), function{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{\\leq_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("<="), klabel{}("_<=Int_"), hook{}("INT.le"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(403,19,403,176)"), function{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'Map'UndsUnds'MAP'Unds'Bool'Unds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), hook{}("MAP.inclusion"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(153,19,153,91)"), function{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'Set'UndsUnds'SET'Unds'Bool'Unds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), hook{}("SET.inclusion"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(214,19,214,85)"), function{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), hook{}("STRING.le"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(607,19,607,82)"), function{}()]
  symbol Lbl'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortBExp{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(103,19,103,41)"), injective{}()]
  hooked-symbol Lbl'Unds-LT-'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{<_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("<"), klabel{}("_<Int_"), hook{}("INT.lt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(404,19,404,171)"), function{}()]
  hooked-symbol Lbl'Unds-LT-'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), hook{}("STRING.lt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(606,19,606,82)"), function{}()]
  symbol Lbl'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortBExp{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(102,19,102,40)"), injective{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("distinct"), klabel{}("_=/=Bool_"), hook{}("BOOL.ne"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(318,19,318,132)"), function{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{{=}{/}{=}_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("distinct"), klabel{}("_=/=Int_"), hook{}("INT.ne"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(408,19,408,188)"), function{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'K'Unds'{}(SortK{}, SortK{}) : SortBool{} [latex{}("{#1}\\mathrel{\\neq_K}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), notEqualEqualK{}(), smt-hook{}("distinct"), klabel{}("_=/=K_"), hook{}("KEQUAL.ne"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(853,19,853,170)"), function{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), hook{}("STRING.ne"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(602,19,602,94)"), function{}()]
  hooked-symbol Lbl'UndsEqlsEqls'Bool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("="), klabel{}("_==Bool_"), hook{}("BOOL.eq"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(317,19,317,124)"), function{}()]
  hooked-symbol Lbl'UndsEqlsEqls'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{{=}{=}_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("="), klabel{}("_==Int_"), hook{}("INT.eq"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(407,19,407,177)"), function{}()]
  hooked-symbol Lbl'UndsEqlsEqls'K'Unds'{}(SortK{}, SortK{}) : SortBool{} [latex{}("{#1}\\mathrel{=_K}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), smt-hook{}("="), equalEqualK{}(), klabel{}("_==K_"), hook{}("KEQUAL.eq"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(852,19,852,156)"), function{}()]
  hooked-symbol Lbl'UndsEqlsEqls'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), hook{}("STRING.eq"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(576,19,576,88)"), function{}()]
  symbol Lbl'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortBExp{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(101,19,101,41)"), injective{}()]
  symbol Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(SortDeclaredVar{}, SortAExp{}) : SortAssigner{} [functional{}(), constructor{}(), strict{}("2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(52,23,52,54)"), injective{}()]
  symbol Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp{}(SortId{}, SortAExp{}) : SortUniqueIdAssigner{} [functional{}(), constructor{}(), strict{}("2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(49,31,49,54)"), injective{}()]
  hooked-symbol Lbl'Unds-GT-Eqls'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{\\geq_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}(">="), klabel{}("_>=Int_"), hook{}("INT.ge"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(405,19,405,176)"), function{}()]
  hooked-symbol Lbl'Unds-GT-Eqls'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), hook{}("STRING.ge"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(609,19,609,82)"), function{}()]
  symbol Lbl'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortBExp{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(105,19,105,41)"), injective{}()]
  hooked-symbol Lbl'Unds-GT--GT-'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\gg_{\\scriptstyle\\it Int}}{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smtlib{}("shrInt"), klabel{}("_>>Int_"), hook{}("INT.shr"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(386,18,386,172)"), function{}()]
  hooked-symbol Lbl'Unds-GT-'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{>_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}(">"), klabel{}("_>Int_"), hook{}("INT.gt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(406,19,406,171)"), function{}()]
  hooked-symbol Lbl'Unds-GT-'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), hook{}("STRING.gt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(608,19,608,82)"), function{}()]
  symbol Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortBExp{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(104,19,104,40)"), injective{}()]
  symbol Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(SortBExp{}, SortBlock{}, SortBlock{}) : SortStatement{} [functional{}(), constructor{}(), strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(58,23,58,58)"), injective{}()]
  hooked-symbol Lbl'Unds'FunThreadCellMap'Unds'{}(SortFunThreadCellMap{}, SortFunThreadCellMap{}) : SortFunThreadCellMap{} [unit{}(".FunThreadCellMap"), element{}("FunThreadCellMapItem"), comm{}(), cellCollection{}(), assoc{}(), hook{}("MAP.concat"), avoid{}(), function{}(), wrapElement{}("<funThread>")]
  hooked-symbol Lbl'Unds'List'Unds'{}(SortList{}, SortList{}) : SortList{} [unit{}(".List"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), element{}("ListItem"), symbol'Kywd'{}(), assoc{}(), smtlib{}("smt_seq_concat"), klabel{}("_List_"), hook{}("LIST.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(260,19,260,192)"), format{}("%1%n%2"), function{}()]
  hooked-symbol Lbl'Unds'Map'Unds'{}(SortMap{}, SortMap{}) : SortMap{} [unit{}(".Map"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), element{}("_|->_"), symbol'Kywd'{}(), comm{}(), assoc{}(), index{}("0"), klabel{}("_Map_"), hook{}("MAP.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(105,18,105,172)"), format{}("%1%n%2"), function{}()]
  hooked-symbol Lbl'Unds'Set'Unds'{}(SortSet{}, SortSet{}) : SortSet{} [unit{}(".Set"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), element{}("SetItem"), symbol'Kywd'{}(), idem{}(), comm{}(), assoc{}(), klabel{}("_Set_"), hook{}("SET.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(195,18,195,176)"), format{}("%1%n%2"), function{}()]
  hooked-symbol Lbl'UndsLSqBUnds-LT-'-'UndsRSqBUnds'LIST'Unds'List'Unds'List'Unds'Int'Unds'KItem{}(SortList{}, SortInt{}, SortKItem{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("List:set"), hook{}("LIST.update"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(272,19,272,107)"), function{}()]
  hooked-symbol Lbl'UndsLSqBUnds-LT-'-undef'RSqB'{}(SortMap{}, SortKItem{}) : SortMap{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("_[_<-undef]"), hook{}("MAP.remove"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(126,18,126,121)"), function{}()]
  hooked-symbol Lbl'UndsLSqBUndsRSqB'orDefault'UndsUnds'MAP'Unds'KItem'Unds'Map'Unds'KItem'Unds'KItem{}(SortMap{}, SortKItem{}, SortKItem{}) : SortKItem{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("Map:lookupOrDefault"), hook{}("MAP.lookupOrDefault"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(120,20,120,138)"), function{}()]
  hooked-symbol Lbl'UndsXor-Perc'Int'UndsUnds'{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("(mod (^ #1 #2) #3)"), klabel{}("_^%Int__"), hook{}("INT.powmod"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(372,18,372,138)"), function{}()]
  hooked-symbol Lbl'UndsXor-'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{{\\char`\\^}_{\\!\\scriptstyle\\it Int}}{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("^"), klabel{}("_^Int_"), hook{}("INT.pow"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(371,18,371,177)"), function{}()]
  symbol Lbl'UndsUndsColn'Int'Unds'KT-SYNTAX'Unds'KotIntVarAssign'Unds'VariableType'Unds'Id{}(SortVariableType{}, SortId{}) : SortKotIntVarAssign{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(41,30,41,54)"), injective{}()]
  symbol Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(SortVariableType{}, SortIds{}) : SortDeclaredVar{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(46,26,46,41)"), injective{}()]
  symbol Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(SortStatement{}, SortStatement{}) : SortStatement{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), left{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(75,23,75,48)"), injective{}()]
  hooked-symbol Lbl'Unds'andBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [latex{}("{#1}\\wedge_{\\scriptstyle\\it Bool}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("and"), boolOperation{}(), klabel{}("_andBool_"), hook{}("BOOL.and"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(310,19,310,189)"), function{}()]
  hooked-symbol Lbl'Unds'andThenBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("and"), boolOperation{}(), klabel{}("_andThenBool_"), hook{}("BOOL.andThen"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(311,19,311,151)"), function{}()]
  hooked-symbol Lbl'Unds'divInt'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("div"), klabel{}("_divInt_"), hook{}("INT.ediv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(380,18,380,121)"), function{}()]
  symbol Lbl'Unds'dividesInt'UndsUnds'INT-COMMON'Unds'Bool'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(409,19,409,52)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)")]
  hooked-symbol Lbl'Unds'impliesBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("=>"), boolOperation{}(), klabel{}("_impliesBool_"), hook{}("BOOL.implies"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(315,19,315,150)"), function{}()]
  hooked-symbol Lbl'Unds'in'UndsUnds'LIST'Unds'Bool'Unds'KItem'Unds'List{}(SortKItem{}, SortList{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("_inList_"), hook{}("LIST.in"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(284,19,284,101)"), function{}()]
  hooked-symbol Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'Unds'Bool'Unds'KItem'Unds'Map{}(SortKItem{}, SortMap{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), hook{}("MAP.in_keys"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(144,19,144,93)"), function{}()]
  hooked-symbol Lbl'Unds'modInt'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("mod"), klabel{}("_modInt_"), hook{}("INT.emod"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(381,18,381,121)"), function{}()]
  hooked-symbol Lbl'Unds'orBool'UndsUnds'BOOL'Unds'Bool'Unds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [latex{}("{#1}\\vee_{\\scriptstyle\\it Bool}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), smt-hook{}("or"), boolOperation{}(), klabel{}("_orBool_"), hook{}("BOOL.or"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(313,19,313,176)"), function{}()]
  hooked-symbol Lbl'Unds'orElseBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("or"), boolOperation{}(), klabel{}("_orElseBool_"), hook{}("BOOL.orElse"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(314,19,314,148)"), function{}()]
  hooked-symbol Lbl'Unds'xorBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smt-hook{}("xor"), boolOperation{}(), klabel{}("_xorBool_"), hook{}("BOOL.xor"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(312,19,312,143)"), function{}()]
  hooked-symbol Lbl'Unds'xorInt'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\oplus_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smtlib{}("xorInt"), klabel{}("_xorInt_"), hook{}("INT.xor"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(391,18,391,188)"), function{}()]
  hooked-symbol Lbl'UndsPipe'-'-GT-Unds'{}(SortKItem{}, SortKItem{}) : SortMap{} [latex{}("{#1}\\mapsto{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), klabel{}("_|->_"), hook{}("MAP.element"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(112,18,112,144)"), function{}()]
  hooked-symbol Lbl'UndsPipe'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{|_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), left{}(), symbol'Kywd'{}(), smtlib{}("orInt"), klabel{}("_|Int_"), hook{}("INT.or"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(393,18,393,179)"), function{}()]
  hooked-symbol LblabsInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(SortInt{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), smtlib{}("int_abs"), klabel{}("absInt"), hook{}("INT.abs"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(397,18,397,102)"), function{}()]
  hooked-symbol LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("bitRangeInt"), hook{}("INT.bitRange"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(400,18,400,102)"), function{}()]
  hooked-symbol LblcategoryChar'LParUndsRParUnds'STRING'Unds'String'Unds'String{}(SortString{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("categoryChar"), hook{}("STRING.category"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(611,21,611,80)"), function{}()]
  hooked-symbol Lblchoice'LParUndsRParUnds'MAP'Unds'KItem'Unds'Map{}(SortMap{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("Map:choice"), hook{}("MAP.choice"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(156,20,156,100)"), function{}()]
  hooked-symbol Lblchoice'LParUndsRParUnds'SET'Unds'KItem'Unds'Set{}(SortSet{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("Set:choice"), hook{}("SET.choice"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(220,20,220,94)"), function{}()]
  hooked-symbol LblchrChar'LParUndsRParUnds'STRING'Unds'String'Unds'Int{}(SortInt{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("chrChar"), hook{}("STRING.chr"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(579,21,579,69)"), function{}()]
  hooked-symbol LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), hook{}("STRING.countAllOccurrences"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(600,18,600,150)"), function{}()]
  hooked-symbol LbldirectionalityChar'LParUndsRParUnds'STRING'Unds'String'Unds'String{}(SortString{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("directionalityChar"), hook{}("STRING.directionality"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(612,21,612,86)"), function{}()]
  symbol Lblelse'UndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'Block{}(SortBlock{}) : SortElseIfStatement{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(97,29,97,40)"), injective{}()]
  symbol Lblelseif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block{}(SortBExp{}, SortBlock{}) : SortElseIfStatement{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(95,30,95,57)"), injective{}()]
  symbol Lblelseif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(SortBExp{}, SortBlock{}, SortElseIfStatement{}) : SortElseIfStatement{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(96,29,96,72)"), injective{}()]
  hooked-symbol LblfillList'LParUndsCommUndsCommUndsCommUndsRParUnds'LIST'Unds'List'Unds'List'Unds'Int'Unds'Int'Unds'KItem{}(SortList{}, SortInt{}, SortInt{}, SortKItem{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("fillList"), hook{}("LIST.fill"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(278,19,278,99)"), function{}()]
  hooked-symbol LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("findChar"), hook{}("STRING.findChar"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(585,18,585,115)"), function{}()]
  hooked-symbol LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("findString"), hook{}("STRING.find"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(583,18,583,110)"), function{}()]
  symbol Lblfor'LParUndsSClnUndsSClnUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Assigner'Unds'BExp'Unds'AExpMod'Unds'Block{}(SortAssigner{}, SortBExp{}, SortAExpMod{}, SortBlock{}) : SortStatement{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(62,23,62,71)"), injective{}()]
  symbol LblfreshId'LParUndsRParUnds'ID-SYNTAX'Unds'Id'Unds'Int{}(SortInt{}) : SortId{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), freshGenerator{}(), klabel{}("freshId"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(830,17,830,70)"), function{}()]
  symbol LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(SortInt{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), freshGenerator{}(), klabel{}("freshInt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(475,18,475,72)"), function{}()]
  symbol Lblfun'UndsLParUndsRParColnUndsUndsUnds'KT-SYNTAX'Unds'KotlinFun'Unds'Id'Unds'Params'Unds'FunReturnType'Unds'Block{}(SortId{}, SortParams{}, SortFunReturnType{}, SortBlock{}) : SortKotlinFun{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(20,24,20,70)"), injective{}()]
  symbol Lblfunmain'LParRParLBraUndsRBraUnds'KT-SYNTAX'Unds'FunctionMain'Unds'Block{}(SortBlock{}) : SortFunctionMain{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(7,27,7,52)"), injective{}()]
  symbol LblgetGeneratedCounterCell{}(SortGeneratedTopCell{}) : SortGeneratedCounterCell{} [function{}()]
  hooked-symbol LblgetKLabel'LParUndsRParUnds'K-REFLECTION'Unds'KItem'Unds'K{}(SortK{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("getKLabel"), hook{}("KREFLECTION.getKLabel"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(875,20,875,72)"), function{}()]
  symbol Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(SortBExp{}, SortBlock{}) : SortStatement{} [functional{}(), constructor{}(), strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(57,24,57,58)"), injective{}()]
  symbol Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(SortBExp{}, SortBlock{}, SortElseIfStatement{}) : SortStatement{} [functional{}(), constructor{}(), strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(59,23,59,73)"), injective{}()]
  symbol LblinitEnvCell{}() : SortEnvCell{} [initializer{}(), function{}(), noThread{}()]
  symbol LblinitFunThreadCell{}() : SortFunThreadCellMap{} [initializer{}(), function{}(), noThread{}()]
  symbol LblinitFunctionCell{}() : SortFunctionCell{} [initializer{}(), function{}(), noThread{}()]
  symbol LblinitGeneratedCounterCell{}() : SortGeneratedCounterCell{} [initializer{}(), function{}(), noThread{}()]
  symbol LblinitGeneratedTopCell{}(SortMap{}) : SortGeneratedTopCell{} [initializer{}(), function{}(), noThread{}()]
  symbol LblinitIdCell{}() : SortIdCell{} [initializer{}(), function{}(), noThread{}()]
  symbol LblinitKCell{}(SortMap{}) : SortKCell{} [initializer{}(), function{}(), noThread{}()]
  symbol LblinitLocCell{}() : SortLocCell{} [initializer{}(), function{}(), noThread{}()]
  symbol LblinitLocalEnvCell{}() : SortLocalEnvCell{} [initializer{}(), function{}(), noThread{}()]
  symbol LblinitMultsCell{}() : SortMultsCell{} [initializer{}(), function{}(), noThread{}()]
  symbol LblinitOutCell{}() : SortOutCell{} [initializer{}(), function{}(), noThread{}()]
  symbol LblinitParamsCell{}() : SortParamsCell{} [initializer{}(), function{}(), noThread{}()]
  symbol LblinitScopeCell{}() : SortScopeCell{} [initializer{}(), function{}(), noThread{}()]
  symbol LblinitStoreCell{}() : SortStoreCell{} [initializer{}(), function{}(), noThread{}()]
  symbol LblinitTCell{}(SortMap{}) : SortTCell{} [initializer{}(), function{}(), noThread{}()]
  symbol LblinitTempCell{}() : SortTempCell{} [initializer{}(), function{}(), noThread{}()]
  hooked-symbol LblintersectSet'LParUndsCommUndsRParUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortSet{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("intersectSet"), hook{}("SET.intersection"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(205,18,205,88)"), function{}()]
  symbol LblisAExp{}(SortK{}) : SortBool{} [function{}(), predicate{}("AExp")]
  symbol LblisAExpMod{}(SortK{}) : SortBool{} [function{}(), predicate{}("AExpMod")]
  symbol LblisAExps{}(SortK{}) : SortBool{} [function{}(), predicate{}("AExps")]
  symbol LblisAssigner{}(SortK{}) : SortBool{} [function{}(), predicate{}("Assigner")]
  symbol LblisBExp{}(SortK{}) : SortBool{} [function{}(), predicate{}("BExp")]
  symbol LblisBlock{}(SortK{}) : SortBool{} [function{}(), predicate{}("Block")]
  symbol LblisBool{}(SortK{}) : SortBool{} [function{}(), predicate{}("Bool")]
  symbol LblisCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("Cell")]
  symbol LblisDeclaredVar{}(SortK{}) : SortBool{} [function{}(), predicate{}("DeclaredVar")]
  symbol LblisElseIfStatement{}(SortK{}) : SortBool{} [function{}(), predicate{}("ElseIfStatement")]
  symbol LblisEnvCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("EnvCell")]
  symbol LblisEnvCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("EnvCellOpt")]
  symbol LblisFloat{}(SortK{}) : SortBool{} [function{}(), predicate{}("Float")]
  symbol LblisFunReturn{}(SortK{}) : SortBool{} [function{}(), predicate{}("FunReturn")]
  symbol LblisFunReturnType{}(SortK{}) : SortBool{} [function{}(), predicate{}("FunReturnType")]
  symbol LblisFunThreadCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("FunThreadCell")]
  symbol LblisFunThreadCellFragment{}(SortK{}) : SortBool{} [function{}(), predicate{}("FunThreadCellFragment")]
  symbol LblisFunThreadCellMap{}(SortK{}) : SortBool{} [function{}(), predicate{}("FunThreadCellMap")]
  symbol LblisFunctionCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("FunctionCell")]
  symbol LblisFunctionCellFragment{}(SortK{}) : SortBool{} [function{}(), predicate{}("FunctionCellFragment")]
  symbol LblisFunctionCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("FunctionCellOpt")]
  symbol LblisFunctionMain{}(SortK{}) : SortBool{} [function{}(), predicate{}("FunctionMain")]
  symbol LblisGeneratedCounterCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("GeneratedCounterCell")]
  symbol LblisGeneratedCounterCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("GeneratedCounterCellOpt")]
  symbol LblisGeneratedTopCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("GeneratedTopCell")]
  symbol LblisGeneratedTopCellFragment{}(SortK{}) : SortBool{} [function{}(), predicate{}("GeneratedTopCellFragment")]
  symbol LblisIOError{}(SortK{}) : SortBool{} [function{}(), predicate{}("IOError")]
  symbol LblisIOFile{}(SortK{}) : SortBool{} [function{}(), predicate{}("IOFile")]
  symbol LblisIOInt{}(SortK{}) : SortBool{} [function{}(), predicate{}("IOInt")]
  symbol LblisIOString{}(SortK{}) : SortBool{} [function{}(), predicate{}("IOString")]
  symbol LblisId{}(SortK{}) : SortBool{} [function{}(), predicate{}("Id")]
  symbol LblisIdCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("IdCell")]
  symbol LblisIdCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("IdCellOpt")]
  symbol LblisIds{}(SortK{}) : SortBool{} [function{}(), predicate{}("Ids")]
  symbol LblisInt{}(SortK{}) : SortBool{} [function{}(), predicate{}("Int")]
  symbol LblisK{}(SortK{}) : SortBool{} [function{}(), predicate{}("K")]
  symbol LblisKCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("KCell")]
  symbol LblisKCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("KCellOpt")]
  symbol LblisKConfigVar{}(SortK{}) : SortBool{} [function{}(), predicate{}("KConfigVar")]
  symbol LblisKItem{}(SortK{}) : SortBool{} [function{}(), predicate{}("KItem")]
  symbol LblisKResult{}(SortK{}) : SortBool{} [function{}(), predicate{}("KResult")]
  symbol LblisKotIntVarAssign{}(SortK{}) : SortBool{} [function{}(), predicate{}("KotIntVarAssign")]
  symbol LblisKotlinFun{}(SortK{}) : SortBool{} [function{}(), predicate{}("KotlinFun")]
  symbol LblisKotlinFunCall{}(SortK{}) : SortBool{} [function{}(), predicate{}("KotlinFunCall")]
  symbol LblisList{}(SortK{}) : SortBool{} [function{}(), predicate{}("List")]
  symbol LblisLocCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("LocCell")]
  symbol LblisLocCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("LocCellOpt")]
  symbol LblisLocalEnvCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("LocalEnvCell")]
  symbol LblisLocalEnvCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("LocalEnvCellOpt")]
  symbol LblisLocalFun{}(SortK{}) : SortBool{} [function{}(), predicate{}("LocalFun")]
  symbol LblisLocalResId{}(SortK{}) : SortBool{} [function{}(), predicate{}("LocalResId")]
  symbol LblisLocalResInt{}(SortK{}) : SortBool{} [function{}(), predicate{}("LocalResInt")]
  symbol LblisLocalResString{}(SortK{}) : SortBool{} [function{}(), predicate{}("LocalResString")]
  symbol LblisMainKotlinProg{}(SortK{}) : SortBool{} [function{}(), predicate{}("MainKotlinProg")]
  symbol LblisMap{}(SortK{}) : SortBool{} [function{}(), predicate{}("Map")]
  symbol LblisMultsCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("MultsCell")]
  symbol LblisMultsCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("MultsCellOpt")]
  symbol LblisOutCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("OutCell")]
  symbol LblisOutCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("OutCellOpt")]
  symbol LblisParams{}(SortK{}) : SortBool{} [function{}(), predicate{}("Params")]
  symbol LblisParamsCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("ParamsCell")]
  symbol LblisParamsCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("ParamsCellOpt")]
  symbol LblisPrintable{}(SortK{}) : SortBool{} [function{}(), predicate{}("Printable")]
  symbol LblisScopeCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("ScopeCell")]
  symbol LblisScopeCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("ScopeCellOpt")]
  symbol LblisSet{}(SortK{}) : SortBool{} [function{}(), predicate{}("Set")]
  symbol LblisSkip{}(SortK{}) : SortBool{} [function{}(), predicate{}("Skip")]
  symbol LblisStatement{}(SortK{}) : SortBool{} [function{}(), predicate{}("Statement")]
  symbol LblisStoreCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("StoreCell")]
  symbol LblisStoreCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("StoreCellOpt")]
  symbol LblisStream{}(SortK{}) : SortBool{} [function{}(), predicate{}("Stream")]
  symbol LblisString{}(SortK{}) : SortBool{} [function{}(), predicate{}("String")]
  symbol LblisTCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("TCell")]
  symbol LblisTCellFragment{}(SortK{}) : SortBool{} [function{}(), predicate{}("TCellFragment")]
  symbol LblisTCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("TCellOpt")]
  symbol LblisTempCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("TempCell")]
  symbol LblisTempCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("TempCellOpt")]
  symbol LblisUniqueIdAssigner{}(SortK{}) : SortBool{} [function{}(), predicate{}("UniqueIdAssigner")]
  symbol LblisValues{}(SortK{}) : SortBool{} [function{}(), predicate{}("Values")]
  symbol LblisVariableType{}(SortK{}) : SortBool{} [function{}(), predicate{}("VariableType")]
  hooked-symbol Lblkeys'LParUndsRParUnds'MAP'Unds'Set'Unds'Map{}(SortMap{}) : SortSet{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("keys"), hook{}("MAP.keys"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(141,18,141,86)"), function{}()]
  hooked-symbol Lblkeys'Unds'list'LParUndsRParUnds'MAP'Unds'List'Unds'Map{}(SortMap{}) : SortList{} [hook{}("MAP.keys_list"), function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(142,19,142,79)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)")]
  hooked-symbol LbllengthString'LParUndsRParUnds'STRING'Unds'Int'Unds'String{}(SortString{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("lengthString"), hook{}("STRING.length"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(578,18,578,84)"), function{}()]
  symbol Lbllocal'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalFun'Unds'Id'Unds'Statement{}(SortId{}, SortStatement{}) : SortLocalFun{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(31,23,31,54)"), injective{}()]
  symbol LbllocalResId'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResId'Unds'Id'Unds'Id{}(SortId{}, SortId{}) : SortLocalResId{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(171,25,171,54)"), injective{}()]
  symbol LbllocalResInt'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResInt'Unds'Id'Unds'Int{}(SortId{}, SortInt{}) : SortLocalResInt{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(170,26,170,57)"), injective{}()]
  symbol LbllocalResString'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResString'Unds'Id'Unds'String{}(SortId{}, SortString{}) : SortLocalResString{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(209,29,209,66)"), injective{}()]
  hooked-symbol Lbllog2Int'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("log2Int"), hook{}("INT.log2"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(398,18,398,74)"), function{}()]
  hooked-symbol LblmakeList'LParUndsCommUndsRParUnds'LIST'Unds'List'Unds'Int'Unds'KItem{}(SortInt{}, SortKItem{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("makeList"), hook{}("LIST.make"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(274,19,274,81)"), function{}()]
  hooked-symbol LblmaxInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), smtlib{}("int_max"), hook{}("INT.max"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(396,18,396,102)"), function{}()]
  hooked-symbol LblminInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), smtlib{}("int_min"), hook{}("INT.min"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(395,18,395,102)"), function{}()]
  hooked-symbol LblnewUUID'Unds'STRING'Unds'String{}() : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), impure{}(), hook{}("STRING.uuid"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(614,21,614,67)"), function{}()]
  symbol LblnoEnvCell{}() : SortEnvCellOpt{} [cellOptAbsent{}("EnvCell"), constructor{}(), functional{}(), injective{}()]
  symbol LblnoFunctionCell{}() : SortFunctionCellOpt{} [cellOptAbsent{}("FunctionCell"), constructor{}(), functional{}(), injective{}()]
  symbol LblnoGeneratedCounterCell{}() : SortGeneratedCounterCellOpt{} [cellOptAbsent{}("GeneratedCounterCell"), constructor{}(), functional{}(), injective{}()]
  symbol LblnoIdCell{}() : SortIdCellOpt{} [cellOptAbsent{}("IdCell"), constructor{}(), functional{}(), injective{}()]
  symbol LblnoKCell{}() : SortKCellOpt{} [cellOptAbsent{}("KCell"), constructor{}(), functional{}(), injective{}()]
  symbol LblnoLocCell{}() : SortLocCellOpt{} [cellOptAbsent{}("LocCell"), constructor{}(), functional{}(), injective{}()]
  symbol LblnoLocalEnvCell{}() : SortLocalEnvCellOpt{} [cellOptAbsent{}("LocalEnvCell"), constructor{}(), functional{}(), injective{}()]
  symbol LblnoMultsCell{}() : SortMultsCellOpt{} [cellOptAbsent{}("MultsCell"), constructor{}(), functional{}(), injective{}()]
  symbol LblnoOutCell{}() : SortOutCellOpt{} [cellOptAbsent{}("OutCell"), constructor{}(), functional{}(), injective{}()]
  symbol LblnoParamsCell{}() : SortParamsCellOpt{} [cellOptAbsent{}("ParamsCell"), constructor{}(), functional{}(), injective{}()]
  symbol LblnoScopeCell{}() : SortScopeCellOpt{} [cellOptAbsent{}("ScopeCell"), constructor{}(), functional{}(), injective{}()]
  symbol LblnoStoreCell{}() : SortStoreCellOpt{} [cellOptAbsent{}("StoreCell"), constructor{}(), functional{}(), injective{}()]
  symbol LblnoTCell{}() : SortTCellOpt{} [cellOptAbsent{}("TCell"), constructor{}(), functional{}(), injective{}()]
  symbol LblnoTempCell{}() : SortTempCellOpt{} [cellOptAbsent{}("TempCell"), constructor{}(), functional{}(), injective{}()]
  hooked-symbol LblnotBool'Unds'{}(SortBool{}) : SortBool{} [latex{}("\\neg_{\\scriptstyle\\it Bool}{#1}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), smt-hook{}("not"), boolOperation{}(), klabel{}("notBool_"), hook{}("BOOL.not"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(309,19,309,176)"), function{}()]
  hooked-symbol LblordChar'LParUndsRParUnds'STRING'Unds'Int'Unds'String{}(SortString{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("ordChar"), hook{}("STRING.ord"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(580,18,580,69)"), function{}()]
  symbol Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(SortAExps{}) : SortStatement{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(74,23,74,43)"), injective{}()]
  symbol Lblproject'ColnHash'tempFile'Coln'fd{}(SortIOFile{}) : SortInt{} [function{}()]
  symbol Lblproject'ColnHash'tempFile'Coln'path{}(SortIOFile{}) : SortString{} [function{}()]
  symbol Lblproject'ColnHash'unknownIOError'Coln'errno{}(SortIOError{}) : SortInt{} [function{}()]
  symbol Lblproject'Coln'AExp{}(SortK{}) : SortAExp{} [function{}(), projection{}()]
  symbol Lblproject'Coln'AExpMod{}(SortK{}) : SortAExpMod{} [function{}(), projection{}()]
  symbol Lblproject'Coln'AExps{}(SortK{}) : SortAExps{} [function{}(), projection{}()]
  symbol Lblproject'Coln'Assigner{}(SortK{}) : SortAssigner{} [function{}(), projection{}()]
  symbol Lblproject'Coln'BExp{}(SortK{}) : SortBExp{} [function{}(), projection{}()]
  symbol Lblproject'Coln'Block{}(SortK{}) : SortBlock{} [function{}(), projection{}()]
  symbol Lblproject'Coln'Bool{}(SortK{}) : SortBool{} [function{}(), projection{}()]
  symbol Lblproject'Coln'Cell{}(SortK{}) : SortCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'DeclaredVar{}(SortK{}) : SortDeclaredVar{} [function{}(), projection{}()]
  symbol Lblproject'Coln'ElseIfStatement{}(SortK{}) : SortElseIfStatement{} [function{}(), projection{}()]
  symbol Lblproject'Coln'EnvCell{}(SortK{}) : SortEnvCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'EnvCellOpt{}(SortK{}) : SortEnvCellOpt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'Float{}(SortK{}) : SortFloat{} [function{}(), projection{}()]
  symbol Lblproject'Coln'FunReturn{}(SortK{}) : SortFunReturn{} [function{}(), projection{}()]
  symbol Lblproject'Coln'FunReturnType{}(SortK{}) : SortFunReturnType{} [function{}(), projection{}()]
  symbol Lblproject'Coln'FunThreadCell{}(SortK{}) : SortFunThreadCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'FunThreadCellFragment{}(SortK{}) : SortFunThreadCellFragment{} [function{}(), projection{}()]
  symbol Lblproject'Coln'FunThreadCellMap{}(SortK{}) : SortFunThreadCellMap{} [function{}(), projection{}()]
  symbol Lblproject'Coln'FunctionCell{}(SortK{}) : SortFunctionCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'FunctionCellFragment{}(SortK{}) : SortFunctionCellFragment{} [function{}(), projection{}()]
  symbol Lblproject'Coln'FunctionCellOpt{}(SortK{}) : SortFunctionCellOpt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'FunctionMain{}(SortK{}) : SortFunctionMain{} [function{}(), projection{}()]
  symbol Lblproject'Coln'GeneratedCounterCell{}(SortK{}) : SortGeneratedCounterCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'GeneratedCounterCellOpt{}(SortK{}) : SortGeneratedCounterCellOpt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'GeneratedTopCell{}(SortK{}) : SortGeneratedTopCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'GeneratedTopCellFragment{}(SortK{}) : SortGeneratedTopCellFragment{} [function{}(), projection{}()]
  symbol Lblproject'Coln'IOError{}(SortK{}) : SortIOError{} [function{}(), projection{}()]
  symbol Lblproject'Coln'IOFile{}(SortK{}) : SortIOFile{} [function{}(), projection{}()]
  symbol Lblproject'Coln'IOInt{}(SortK{}) : SortIOInt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'IOString{}(SortK{}) : SortIOString{} [function{}(), projection{}()]
  symbol Lblproject'Coln'Id{}(SortK{}) : SortId{} [function{}(), projection{}()]
  symbol Lblproject'Coln'IdCell{}(SortK{}) : SortIdCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'IdCellOpt{}(SortK{}) : SortIdCellOpt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'Ids{}(SortK{}) : SortIds{} [function{}(), projection{}()]
  symbol Lblproject'Coln'Int{}(SortK{}) : SortInt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'KCell{}(SortK{}) : SortKCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'KCellOpt{}(SortK{}) : SortKCellOpt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'KItem{}(SortK{}) : SortKItem{} [function{}(), projection{}()]
  symbol Lblproject'Coln'KResult{}(SortK{}) : SortKResult{} [function{}(), projection{}()]
  symbol Lblproject'Coln'KotIntVarAssign{}(SortK{}) : SortKotIntVarAssign{} [function{}(), projection{}()]
  symbol Lblproject'Coln'KotlinFun{}(SortK{}) : SortKotlinFun{} [function{}(), projection{}()]
  symbol Lblproject'Coln'KotlinFunCall{}(SortK{}) : SortKotlinFunCall{} [function{}(), projection{}()]
  symbol Lblproject'Coln'List{}(SortK{}) : SortList{} [function{}(), projection{}()]
  symbol Lblproject'Coln'LocCell{}(SortK{}) : SortLocCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'LocCellOpt{}(SortK{}) : SortLocCellOpt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'LocalEnvCell{}(SortK{}) : SortLocalEnvCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'LocalEnvCellOpt{}(SortK{}) : SortLocalEnvCellOpt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'LocalFun{}(SortK{}) : SortLocalFun{} [function{}(), projection{}()]
  symbol Lblproject'Coln'LocalResId{}(SortK{}) : SortLocalResId{} [function{}(), projection{}()]
  symbol Lblproject'Coln'LocalResInt{}(SortK{}) : SortLocalResInt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'LocalResString{}(SortK{}) : SortLocalResString{} [function{}(), projection{}()]
  symbol Lblproject'Coln'MainKotlinProg{}(SortK{}) : SortMainKotlinProg{} [function{}(), projection{}()]
  symbol Lblproject'Coln'Map{}(SortK{}) : SortMap{} [function{}(), projection{}()]
  symbol Lblproject'Coln'MultsCell{}(SortK{}) : SortMultsCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'MultsCellOpt{}(SortK{}) : SortMultsCellOpt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'OutCell{}(SortK{}) : SortOutCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'OutCellOpt{}(SortK{}) : SortOutCellOpt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'Params{}(SortK{}) : SortParams{} [function{}(), projection{}()]
  symbol Lblproject'Coln'ParamsCell{}(SortK{}) : SortParamsCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'ParamsCellOpt{}(SortK{}) : SortParamsCellOpt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'Printable{}(SortK{}) : SortPrintable{} [function{}(), projection{}()]
  symbol Lblproject'Coln'ScopeCell{}(SortK{}) : SortScopeCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'ScopeCellOpt{}(SortK{}) : SortScopeCellOpt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'Set{}(SortK{}) : SortSet{} [function{}(), projection{}()]
  symbol Lblproject'Coln'Skip{}(SortK{}) : SortSkip{} [function{}(), projection{}()]
  symbol Lblproject'Coln'Statement{}(SortK{}) : SortStatement{} [function{}(), projection{}()]
  symbol Lblproject'Coln'StoreCell{}(SortK{}) : SortStoreCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'StoreCellOpt{}(SortK{}) : SortStoreCellOpt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'Stream{}(SortK{}) : SortStream{} [function{}(), projection{}()]
  symbol Lblproject'Coln'String{}(SortK{}) : SortString{} [function{}(), projection{}()]
  symbol Lblproject'Coln'TCell{}(SortK{}) : SortTCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'TCellFragment{}(SortK{}) : SortTCellFragment{} [function{}(), projection{}()]
  symbol Lblproject'Coln'TCellOpt{}(SortK{}) : SortTCellOpt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'TempCell{}(SortK{}) : SortTempCell{} [function{}(), projection{}()]
  symbol Lblproject'Coln'TempCellOpt{}(SortK{}) : SortTempCellOpt{} [function{}(), projection{}()]
  symbol Lblproject'Coln'UniqueIdAssigner{}(SortK{}) : SortUniqueIdAssigner{} [function{}(), projection{}()]
  symbol Lblproject'Coln'Values{}(SortK{}) : SortValues{} [function{}(), projection{}()]
  symbol Lblproject'Coln'VariableType{}(SortK{}) : SortVariableType{} [function{}(), projection{}()]
  hooked-symbol LblrandInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("randInt"), hook{}("INT.rand"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(478,18,478,56)"), function{}()]
  hooked-symbol LblremoveAll'LParUndsCommUndsRParUnds'MAP'Unds'Map'Unds'Map'Unds'Set{}(SortMap{}, SortSet{}) : SortMap{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("removeAll"), hook{}("MAP.removeAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(138,18,138,91)"), function{}()]
  hooked-symbol Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortString{}, SortInt{}) : SortString{} [hook{}("STRING.replace"), function{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(598,21,598,145)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)")]
  hooked-symbol LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'String'Unds'String{}(SortString{}, SortString{}, SortString{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), hook{}("STRING.replaceAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(597,21,597,153)"), function{}()]
  hooked-symbol LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'String'Unds'String{}(SortString{}, SortString{}, SortString{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), hook{}("STRING.replaceFirst"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(599,21,599,155)"), function{}()]
  symbol Lblreturn'UndsUnds'KT-SYNTAX'Unds'Statement'Unds'FunReturn{}(SortFunReturn{}) : SortStatement{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(70,23,70,40)"), injective{}()]
  hooked-symbol LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("rfindChar"), hook{}("STRING.rfindChar"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(586,18,586,116)"), function{}()]
  hooked-symbol LblrfindString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("rfindString"), hook{}("STRING.rfind"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(584,18,584,111)"), function{}()]
  hooked-symbol LblsignExtendBitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("signExtendBitRangeInt"), hook{}("INT.signExtendBitRange"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(401,18,401,112)"), function{}()]
  hooked-symbol Lblsize'LParUndsRParUnds'LIST'Unds'Int'Unds'List{}(SortList{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), smtlib{}("smt_seq_len"), klabel{}("sizeList"), hook{}("LIST.size"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(287,18,287,121)"), function{}()]
  hooked-symbol Lblsize'LParUndsRParUnds'MAP'Unds'Int'Unds'Map{}(SortMap{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("sizeMap"), hook{}("MAP.size"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(150,18,150,103)"), function{}()]
  hooked-symbol Lblsize'LParUndsRParUnds'SET'Unds'Int'Unds'Set{}(SortSet{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("size"), hook{}("SET.size"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(217,18,217,80)"), function{}()]
  hooked-symbol LblsrandInt'LParUndsRParUnds'INT'Unds'K'Unds'Int{}(SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("srandInt"), hook{}("INT.srand"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(479,16,479,56)"), function{}()]
  hooked-symbol LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'Int'Unds'Int{}(SortString{}, SortInt{}, SortInt{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("substrString"), hook{}("STRING.substr"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(582,21,582,121)"), function{}()]
  hooked-symbol LblupdateList'LParUndsCommUndsCommUndsRParUnds'LIST'Unds'List'Unds'List'Unds'Int'Unds'List{}(SortList{}, SortInt{}, SortList{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("updateList"), hook{}("LIST.updateAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(276,19,276,96)"), function{}()]
  hooked-symbol LblupdateMap'LParUndsCommUndsRParUnds'MAP'Unds'Map'Unds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortMap{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("updateMap"), hook{}("MAP.updateAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(135,18,135,91)"), function{}()]
  symbol Lblval'Unds'KT-SYNTAX'Unds'VariableType{}() : SortVariableType{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,35,38,39)"), injective{}()]
  hooked-symbol Lblvalues'LParUndsRParUnds'MAP'Unds'List'Unds'Map{}(SortMap{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), klabel{}("values"), hook{}("MAP.values"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(147,19,147,76)"), function{}()]
  symbol Lblvar'Unds'KT-SYNTAX'Unds'VariableType{}() : SortVariableType{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,27,38,31)"), injective{}()]
  symbol Lblwhile'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(SortBExp{}, SortBlock{}) : SortStatement{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(60,23,60,48)"), injective{}()]
  symbol Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(SortStatement{}) : SortBlock{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(9,20,9,36)"), injective{}()]
  hooked-symbol Lbl'Tild'Int'Unds'{}(SortInt{}) : SortInt{} [latex{}("\\mathop{\\sim_{\\scriptstyle\\it Int}}{#1}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), symbol'Kywd'{}(), smtlib{}("notInt"), klabel{}("~Int_"), hook{}("INT.not"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(369,18,369,172)"), function{}()]

// generated axioms
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortStoreCellOpt{}, SortKItem{}} (From:SortStoreCellOpt{}))) [subsort{SortStoreCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortCell{}, SortKItem{}} (From:SortCell{}))) [subsort{SortCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIOString{}, SortKItem{}} (From:SortIOString{}))) [subsort{SortIOString{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortString{}, SortKItem{}} (From:SortString{}))) [subsort{SortString{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKResult{}, \equals{SortKResult{}, R} (Val:SortKResult{}, inj{SortInt{}, SortKResult{}} (From:SortInt{}))) [subsort{SortInt{}, SortKResult{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortMultsCell{}, SortCell{}} (From:SortMultsCell{}))) [subsort{SortMultsCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortTempCell{}, SortCell{}} (From:SortTempCell{}))) [subsort{SortTempCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortLocCell{}, SortCell{}} (From:SortLocCell{}))) [subsort{SortLocCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortAExp{}, SortKItem{}} (From:SortAExp{}))) [subsort{SortAExp{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortVariableType{}, SortKItem{}} (From:SortVariableType{}))) [subsort{SortVariableType{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTCell{}, SortKItem{}} (From:SortTCell{}))) [subsort{SortTCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortScopeCellOpt{}, \equals{SortScopeCellOpt{}, R} (Val:SortScopeCellOpt{}, inj{SortScopeCell{}, SortScopeCellOpt{}} (From:SortScopeCell{}))) [subsort{SortScopeCell{}, SortScopeCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, inj{SortLocalResInt{}, SortStatement{}} (From:SortLocalResInt{}))) [subsort{SortLocalResInt{}, SortStatement{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortPrintable{}, SortKItem{}} (From:SortPrintable{}))) [subsort{SortPrintable{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortFunThreadCellFragment{}, SortKItem{}} (From:SortFunThreadCellFragment{}))) [subsort{SortFunThreadCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortFunReturn{}, \equals{SortFunReturn{}, R} (Val:SortFunReturn{}, inj{SortAExp{}, SortFunReturn{}} (From:SortAExp{}))) [subsort{SortAExp{}, SortFunReturn{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKCellOpt{}, SortKItem{}} (From:SortKCellOpt{}))) [subsort{SortKCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortParams{}, SortKItem{}} (From:SortParams{}))) [subsort{SortParams{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortFunctionCell{}, SortKItem{}} (From:SortFunctionCell{}))) [subsort{SortFunctionCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortDeclaredVar{}, SortKItem{}} (From:SortDeclaredVar{}))) [subsort{SortDeclaredVar{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIds{}, SortKItem{}} (From:SortIds{}))) [subsort{SortIds{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedCounterCellOpt{}, SortKItem{}} (From:SortGeneratedCounterCellOpt{}))) [subsort{SortGeneratedCounterCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKResult{}, SortKItem{}} (From:SortKResult{}))) [subsort{SortKResult{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortGeneratedCounterCellOpt{}, \equals{SortGeneratedCounterCellOpt{}, R} (Val:SortGeneratedCounterCellOpt{}, inj{SortGeneratedCounterCell{}, SortGeneratedCounterCellOpt{}} (From:SortGeneratedCounterCell{}))) [subsort{SortGeneratedCounterCell{}, SortGeneratedCounterCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortFunReturn{}, SortKItem{}} (From:SortFunReturn{}))) [subsort{SortFunReturn{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBExp{}, \equals{SortBExp{}, R} (Val:SortBExp{}, inj{SortBool{}, SortBExp{}} (From:SortBool{}))) [subsort{SortBool{}, SortBExp{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortEnvCellOpt{}, SortKItem{}} (From:SortEnvCellOpt{}))) [subsort{SortEnvCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKCell{}, SortKItem{}} (From:SortKCell{}))) [subsort{SortKCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTCellOpt{}, SortKItem{}} (From:SortTCellOpt{}))) [subsort{SortTCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortMultsCell{}, SortKItem{}} (From:SortMultsCell{}))) [subsort{SortMultsCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, inj{SortPrintable{}, SortAExp{}} (From:SortPrintable{}))) [subsort{SortPrintable{}, SortAExp{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTempCellOpt{}, SortKItem{}} (From:SortTempCellOpt{}))) [subsort{SortTempCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortFunctionCell{}, SortCell{}} (From:SortFunctionCell{}))) [subsort{SortFunctionCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortIdCell{}, SortCell{}} (From:SortIdCell{}))) [subsort{SortIdCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortLocCellOpt{}, \equals{SortLocCellOpt{}, R} (Val:SortLocCellOpt{}, inj{SortLocCell{}, SortLocCellOpt{}} (From:SortLocCell{}))) [subsort{SortLocCell{}, SortLocCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortLocalResString{}, SortKItem{}} (From:SortLocalResString{}))) [subsort{SortLocalResString{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortLocCell{}, SortKItem{}} (From:SortLocCell{}))) [subsort{SortLocCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortFunReturnType{}, SortKItem{}} (From:SortFunReturnType{}))) [subsort{SortFunReturnType{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, inj{SortKotlinFunCall{}, SortStatement{}} (From:SortKotlinFunCall{}))) [subsort{SortKotlinFunCall{}, SortStatement{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortOutCell{}, SortKItem{}} (From:SortOutCell{}))) [subsort{SortOutCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortParamsCell{}, SortKItem{}} (From:SortParamsCell{}))) [subsort{SortParamsCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortValues{}, SortKItem{}} (From:SortValues{}))) [subsort{SortValues{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortAExpMod{}, SortKItem{}} (From:SortAExpMod{}))) [subsort{SortAExpMod{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOInt{}, \equals{SortIOInt{}, R} (Val:SortIOInt{}, inj{SortIOError{}, SortIOInt{}} (From:SortIOError{}))) [subsort{SortIOError{}, SortIOInt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortParamsCellOpt{}, \equals{SortParamsCellOpt{}, R} (Val:SortParamsCellOpt{}, inj{SortParamsCell{}, SortParamsCellOpt{}} (From:SortParamsCell{}))) [subsort{SortParamsCell{}, SortParamsCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKCellOpt{}, \equals{SortKCellOpt{}, R} (Val:SortKCellOpt{}, inj{SortKCell{}, SortKCellOpt{}} (From:SortKCell{}))) [subsort{SortKCell{}, SortKCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortSet{}, SortKItem{}} (From:SortSet{}))) [subsort{SortSet{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortStoreCell{}, SortKItem{}} (From:SortStoreCell{}))) [subsort{SortStoreCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIOError{}, SortKItem{}} (From:SortIOError{}))) [subsort{SortIOError{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortBlock{}, SortKItem{}} (From:SortBlock{}))) [subsort{SortBlock{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortMainKotlinProg{}, SortKItem{}} (From:SortMainKotlinProg{}))) [subsort{SortMainKotlinProg{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortEnvCell{}, SortCell{}} (From:SortEnvCell{}))) [subsort{SortEnvCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortLocalResInt{}, SortKItem{}} (From:SortLocalResInt{}))) [subsort{SortLocalResInt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortScopeCell{}, SortCell{}} (From:SortScopeCell{}))) [subsort{SortScopeCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedCounterCell{}, SortKItem{}} (From:SortGeneratedCounterCell{}))) [subsort{SortGeneratedCounterCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOInt{}, \equals{SortIOInt{}, R} (Val:SortIOInt{}, inj{SortInt{}, SortIOInt{}} (From:SortInt{}))) [subsort{SortInt{}, SortIOInt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortTCellOpt{}, \equals{SortTCellOpt{}, R} (Val:SortTCellOpt{}, inj{SortTCell{}, SortTCellOpt{}} (From:SortTCell{}))) [subsort{SortTCell{}, SortTCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortAssigner{}, SortKItem{}} (From:SortAssigner{}))) [subsort{SortAssigner{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTCellFragment{}, SortKItem{}} (From:SortTCellFragment{}))) [subsort{SortTCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, inj{SortLocalResString{}, SortStatement{}} (From:SortLocalResString{}))) [subsort{SortLocalResString{}, SortStatement{}}()] // subsort
  axiom{R} \exists{R} (Val:SortOutCellOpt{}, \equals{SortOutCellOpt{}, R} (Val:SortOutCellOpt{}, inj{SortOutCell{}, SortOutCellOpt{}} (From:SortOutCell{}))) [subsort{SortOutCell{}, SortOutCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKotlinFunCall{}, SortKItem{}} (From:SortKotlinFunCall{}))) [subsort{SortKotlinFunCall{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIdCellOpt{}, \equals{SortIdCellOpt{}, R} (Val:SortIdCellOpt{}, inj{SortIdCell{}, SortIdCellOpt{}} (From:SortIdCell{}))) [subsort{SortIdCell{}, SortIdCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortFunThreadCell{}, SortKItem{}} (From:SortFunThreadCell{}))) [subsort{SortFunThreadCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, inj{SortAssigner{}, SortStatement{}} (From:SortAssigner{}))) [subsort{SortAssigner{}, SortStatement{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortTCell{}, SortCell{}} (From:SortTCell{}))) [subsort{SortTCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIdCellOpt{}, SortKItem{}} (From:SortIdCellOpt{}))) [subsort{SortIdCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortStream{}, SortKItem{}} (From:SortStream{}))) [subsort{SortStream{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIOFile{}, SortKItem{}} (From:SortIOFile{}))) [subsort{SortIOFile{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortOutCell{}, SortCell{}} (From:SortOutCell{}))) [subsort{SortOutCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedTopCell{}, SortKItem{}} (From:SortGeneratedTopCell{}))) [subsort{SortGeneratedTopCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, inj{SortInt{}, SortAExp{}} (From:SortInt{}))) [subsort{SortInt{}, SortAExp{}}()] // subsort
  axiom{R} \exists{R} (Val:SortEnvCellOpt{}, \equals{SortEnvCellOpt{}, R} (Val:SortEnvCellOpt{}, inj{SortEnvCell{}, SortEnvCellOpt{}} (From:SortEnvCell{}))) [subsort{SortEnvCell{}, SortEnvCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIOInt{}, SortKItem{}} (From:SortIOInt{}))) [subsort{SortIOInt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortMultsCellOpt{}, \equals{SortMultsCellOpt{}, R} (Val:SortMultsCellOpt{}, inj{SortMultsCell{}, SortMultsCellOpt{}} (From:SortMultsCell{}))) [subsort{SortMultsCell{}, SortMultsCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortStoreCellOpt{}, \equals{SortStoreCellOpt{}, R} (Val:SortStoreCellOpt{}, inj{SortStoreCell{}, SortStoreCellOpt{}} (From:SortStoreCell{}))) [subsort{SortStoreCell{}, SortStoreCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortFunctionMain{}, SortKItem{}} (From:SortFunctionMain{}))) [subsort{SortFunctionMain{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortParamsCellOpt{}, SortKItem{}} (From:SortParamsCellOpt{}))) [subsort{SortParamsCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortOutCellOpt{}, SortKItem{}} (From:SortOutCellOpt{}))) [subsort{SortOutCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortMultsCellOpt{}, SortKItem{}} (From:SortMultsCellOpt{}))) [subsort{SortMultsCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortSkip{}, SortKItem{}} (From:SortSkip{}))) [subsort{SortSkip{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortElseIfStatement{}, SortKItem{}} (From:SortElseIfStatement{}))) [subsort{SortElseIfStatement{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, inj{SortKotIntVarAssign{}, SortStatement{}} (From:SortKotIntVarAssign{}))) [subsort{SortKotIntVarAssign{}, SortStatement{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortList{}, SortKItem{}} (From:SortList{}))) [subsort{SortList{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortLocalFun{}, SortKItem{}} (From:SortLocalFun{}))) [subsort{SortLocalFun{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOString{}, \equals{SortIOString{}, R} (Val:SortIOString{}, inj{SortString{}, SortIOString{}} (From:SortString{}))) [subsort{SortString{}, SortIOString{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortScopeCellOpt{}, SortKItem{}} (From:SortScopeCellOpt{}))) [subsort{SortScopeCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortFunThreadCell{}, SortCell{}} (From:SortFunThreadCell{}))) [subsort{SortFunThreadCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortLocalResId{}, SortKItem{}} (From:SortLocalResId{}))) [subsort{SortLocalResId{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortId{}, SortKItem{}} (From:SortId{}))) [subsort{SortId{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortLocalEnvCell{}, SortCell{}} (From:SortLocalEnvCell{}))) [subsort{SortLocalEnvCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortScopeCell{}, SortKItem{}} (From:SortScopeCell{}))) [subsort{SortScopeCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortFloat{}, SortKItem{}} (From:SortFloat{}))) [subsort{SortFloat{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortBool{}, SortKItem{}} (From:SortBool{}))) [subsort{SortBool{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortUniqueIdAssigner{}, SortKItem{}} (From:SortUniqueIdAssigner{}))) [subsort{SortUniqueIdAssigner{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortLocalEnvCellOpt{}, SortKItem{}} (From:SortLocalEnvCellOpt{}))) [subsort{SortLocalEnvCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortPrintable{}, \equals{SortPrintable{}, R} (Val:SortPrintable{}, inj{SortInt{}, SortPrintable{}} (From:SortInt{}))) [subsort{SortInt{}, SortPrintable{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortAExps{}, SortKItem{}} (From:SortAExps{}))) [subsort{SortAExps{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, inj{SortId{}, SortAExp{}} (From:SortId{}))) [subsort{SortId{}, SortAExp{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortFunctionCellFragment{}, SortKItem{}} (From:SortFunctionCellFragment{}))) [subsort{SortFunctionCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBlock{}, \equals{SortBlock{}, R} (Val:SortBlock{}, inj{SortStatement{}, SortBlock{}} (From:SortStatement{}))) [subsort{SortStatement{}, SortBlock{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortStoreCell{}, SortCell{}} (From:SortStoreCell{}))) [subsort{SortStoreCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, inj{SortKotlinFun{}, SortStatement{}} (From:SortKotlinFun{}))) [subsort{SortKotlinFun{}, SortStatement{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortKCell{}, SortCell{}} (From:SortKCell{}))) [subsort{SortKCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortFunctionCellOpt{}, SortKItem{}} (From:SortFunctionCellOpt{}))) [subsort{SortFunctionCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortCell{}, \equals{SortCell{}, R} (Val:SortCell{}, inj{SortParamsCell{}, SortCell{}} (From:SortParamsCell{}))) [subsort{SortParamsCell{}, SortCell{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortInt{}, SortKItem{}} (From:SortInt{}))) [subsort{SortInt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedTopCellFragment{}, SortKItem{}} (From:SortGeneratedTopCellFragment{}))) [subsort{SortGeneratedTopCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortTempCellOpt{}, \equals{SortTempCellOpt{}, R} (Val:SortTempCellOpt{}, inj{SortTempCell{}, SortTempCellOpt{}} (From:SortTempCell{}))) [subsort{SortTempCell{}, SortTempCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortBExp{}, SortKItem{}} (From:SortBExp{}))) [subsort{SortBExp{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortEnvCell{}, SortKItem{}} (From:SortEnvCell{}))) [subsort{SortEnvCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortMainKotlinProg{}, \equals{SortMainKotlinProg{}, R} (Val:SortMainKotlinProg{}, inj{SortFunctionMain{}, SortMainKotlinProg{}} (From:SortFunctionMain{}))) [subsort{SortFunctionMain{}, SortMainKotlinProg{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIdCell{}, SortKItem{}} (From:SortIdCell{}))) [subsort{SortIdCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTempCell{}, SortKItem{}} (From:SortTempCell{}))) [subsort{SortTempCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, inj{SortAExp{}, SortStatement{}} (From:SortAExp{}))) [subsort{SortAExp{}, SortStatement{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortMap{}, SortKItem{}} (From:SortMap{}))) [subsort{SortMap{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, inj{SortString{}, SortAExp{}} (From:SortString{}))) [subsort{SortString{}, SortAExp{}}()] // subsort
  axiom{R} \exists{R} (Val:SortFunThreadCellMap{}, \equals{SortFunThreadCellMap{}, R} (Val:SortFunThreadCellMap{}, inj{SortFunThreadCell{}, SortFunThreadCellMap{}} (From:SortFunThreadCell{}))) [subsort{SortFunThreadCell{}, SortFunThreadCellMap{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortStatement{}, SortKItem{}} (From:SortStatement{}))) [subsort{SortStatement{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKResult{}, \equals{SortKResult{}, R} (Val:SortKResult{}, inj{SortBool{}, SortKResult{}} (From:SortBool{}))) [subsort{SortBool{}, SortKResult{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOString{}, \equals{SortIOString{}, R} (Val:SortIOString{}, inj{SortIOError{}, SortIOString{}} (From:SortIOError{}))) [subsort{SortIOError{}, SortIOString{}}()] // subsort
  axiom{R} \exists{R} (Val:SortFunctionCellOpt{}, \equals{SortFunctionCellOpt{}, R} (Val:SortFunctionCellOpt{}, inj{SortFunctionCell{}, SortFunctionCellOpt{}} (From:SortFunctionCell{}))) [subsort{SortFunctionCell{}, SortFunctionCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, inj{SortSkip{}, SortStatement{}} (From:SortSkip{}))) [subsort{SortSkip{}, SortStatement{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKotlinFun{}, SortKItem{}} (From:SortKotlinFun{}))) [subsort{SortKotlinFun{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOFile{}, \equals{SortIOFile{}, R} (Val:SortIOFile{}, inj{SortIOError{}, SortIOFile{}} (From:SortIOError{}))) [subsort{SortIOError{}, SortIOFile{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKotIntVarAssign{}, SortKItem{}} (From:SortKotIntVarAssign{}))) [subsort{SortKotIntVarAssign{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortFunThreadCellMap{}, SortKItem{}} (From:SortFunThreadCellMap{}))) [subsort{SortFunThreadCellMap{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKResult{}, \equals{SortKResult{}, R} (Val:SortKResult{}, inj{SortString{}, SortKResult{}} (From:SortString{}))) [subsort{SortString{}, SortKResult{}}()] // subsort
  axiom{R} \exists{R} (Val:SortPrintable{}, \equals{SortPrintable{}, R} (Val:SortPrintable{}, inj{SortString{}, SortPrintable{}} (From:SortString{}))) [subsort{SortString{}, SortPrintable{}}()] // subsort
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, inj{SortAExpMod{}, SortStatement{}} (From:SortAExpMod{}))) [subsort{SortAExpMod{}, SortStatement{}}()] // subsort
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, inj{SortLocalResId{}, SortStatement{}} (From:SortLocalResId{}))) [subsort{SortLocalResId{}, SortStatement{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortLocCellOpt{}, SortKItem{}} (From:SortLocCellOpt{}))) [subsort{SortLocCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortLocalEnvCell{}, SortKItem{}} (From:SortLocalEnvCell{}))) [subsort{SortLocalEnvCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortAssigner{}, \equals{SortAssigner{}, R} (Val:SortAssigner{}, inj{SortUniqueIdAssigner{}, SortAssigner{}} (From:SortUniqueIdAssigner{}))) [subsort{SortUniqueIdAssigner{}, SortAssigner{}}()] // subsort
  axiom{R} \exists{R} (Val:SortLocalEnvCellOpt{}, \equals{SortLocalEnvCellOpt{}, R} (Val:SortLocalEnvCellOpt{}, inj{SortLocalEnvCell{}, SortLocalEnvCellOpt{}} (From:SortLocalEnvCell{}))) [subsort{SortLocalEnvCell{}, SortLocalEnvCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'E2BIG{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EACCES{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EADDRINUSE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EADDRNOTAVAIL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EAFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EAGAIN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EACCES{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EADDRINUSE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EADDRNOTAVAIL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EAFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EAGAIN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EADDRINUSE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EADDRNOTAVAIL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EAFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EAGAIN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EADDRNOTAVAIL{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EAFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EAGAIN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EAFNOSUPPORT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EAGAIN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EAGAIN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EALREADY{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EBADF{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EBUSY{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECHILD{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNABORTED{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNREFUSED{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNRESET{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDEADLK{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDESTADDRREQ{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDOM{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EEXIST{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EFAULT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EFBIG{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EHOSTDOWN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EHOSTUNREACH{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINPROGRESS{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINTR{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINVAL{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EIO{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EISCONN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EISDIR{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ELOOP{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMFILE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMLINK{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMSGSIZE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENAMETOOLONG{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETDOWN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETRESET{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETUNREACH{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENFILE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOBUFS{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENODEV{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOENT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOEXEC{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOLCK{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOMEM{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOPROTOOPT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOSPC{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOSYS{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTCONN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTDIR{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTEMPTY{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTSOCK{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTTY{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENXIO{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOF{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOPNOTSUPP{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOVERFLOW{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPERM{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPFNOSUPPORT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPIPE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPROTONOSUPPORT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPROTOTYPE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ERANGE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EROFS{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESHUTDOWN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESOCKTNOSUPPORT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESPIPE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESRCH{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ETIMEDOUT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ETOOMANYREFS{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EWOULDBLOCK{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EXDEV{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStream{}, \equals{SortStream{}, R} (Val:SortStream{}, Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortStream{}} (\and{SortStream{}} (Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(X0:SortK{}), Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(Y0:SortK{})), Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{})), Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}), \and{SortK{}} (X1:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(Y0:SortK{}, Y1:SortK{})), Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}), \and{SortK{}} (X1:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R, SortSort} \exists{R} (Val:SortSort, \equals{SortSort, R} (Val:SortSort, Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortSort}(K0:SortBool{}, K1:SortSort, K2:SortSort))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortK{}, \equals{SortK{}, R} (Val:SortK{}, Lbl'Hash'logToFile{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'noParse{}(K0:SortString{}))) [functional{}()] // functional
  axiom{}\implies{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noParse{}(X0:SortString{}), Lbl'Hash'noParse{}(Y0:SortString{})), Lbl'Hash'noParse{}(\and{SortString{}} (X0:SortString{}, Y0:SortString{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noParse{}(X0:SortString{}), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortK{}, \equals{SortK{}, R} (Val:SortK{}, Lbl'Hash'remove'LParUndsRParUnds'K-IO'Unds'K'Unds'String{}(K0:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stderr'Unds'K-IO'Unds'Int{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stdin'Unds'K-IO'Unds'Int{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stdout'Unds'K-IO'Unds'Int{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'systemResult{}(K0:SortInt{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'systemResult{}(X0:SortInt{}, X1:SortString{}, X2:SortString{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{})), Lbl'Hash'systemResult{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}), \and{SortString{}} (X1:SortString{}, Y1:SortString{}), \and{SortString{}} (X2:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOFile{}, \equals{SortIOFile{}, R} (Val:SortIOFile{}, Lbl'Hash'tempFile{}(K0:SortString{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortIOFile{}} (\and{SortIOFile{}} (Lbl'Hash'tempFile{}(X0:SortString{}, X1:SortInt{}), Lbl'Hash'tempFile{}(Y0:SortString{}, Y1:SortInt{})), Lbl'Hash'tempFile{}(\and{SortString{}} (X0:SortString{}, Y0:SortString{}), \and{SortInt{}} (X1:SortInt{}, Y1:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'unknownIOError{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError{}(X0:SortInt{}), Lbl'Hash'unknownIOError{}(Y0:SortInt{})), Lbl'Hash'unknownIOError{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, Lbl'Stop'List{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortAExps{}, \equals{SortAExps{}, R} (Val:SortAExps{}, Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps'QuotRBraUnds'AExps{}())) [functional{}()] // functional
  axiom{}\not{SortAExps{}} (\and{SortAExps{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps'QuotRBraUnds'AExps{}(), Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(Y0:SortAExp{}, Y1:SortAExps{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIds{}, \equals{SortIds{}, R} (Val:SortIds{}, Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}())) [functional{}()] // functional
  axiom{}\not{SortIds{}} (\and{SortIds{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}(), Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(Y0:SortId{}, Y1:SortIds{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortParams{}, \equals{SortParams{}, R} (Val:SortParams{}, Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Params'Unds'Id'Unds'Params'QuotRBraUnds'Params{}())) [functional{}()] // functional
  axiom{}\not{SortParams{}} (\and{SortParams{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Params'Unds'Id'Unds'Params'QuotRBraUnds'Params{}(), Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Params'Unds'Id'Unds'Params{}(Y0:SortId{}, Y1:SortParams{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortValues{}, \equals{SortValues{}, R} (Val:SortValues{}, Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Values'Unds'Int'Unds'Values'QuotRBraUnds'Values{}())) [functional{}()] // functional
  axiom{}\not{SortValues{}} (\and{SortValues{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Values'Unds'Int'Unds'Values'QuotRBraUnds'Values{}(), Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Values'Unds'Int'Unds'Values{}(Y0:SortInt{}, Y1:SortValues{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'Stop'Map{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lbl'Stop'Set{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTCell{}, \equals{SortTCell{}, R} (Val:SortTCell{}, Lbl'-LT-'T'-GT-'{}(K0:SortKCell{}, K1:SortFunctionCell{}, K2:SortEnvCell{}, K3:SortStoreCell{}, K4:SortMultsCell{}, K5:SortOutCell{}, K6:SortLocCell{}))) [functional{}()] // functional
  axiom{}\implies{SortTCell{}} (\and{SortTCell{}} (Lbl'-LT-'T'-GT-'{}(X0:SortKCell{}, X1:SortFunctionCell{}, X2:SortEnvCell{}, X3:SortStoreCell{}, X4:SortMultsCell{}, X5:SortOutCell{}, X6:SortLocCell{}), Lbl'-LT-'T'-GT-'{}(Y0:SortKCell{}, Y1:SortFunctionCell{}, Y2:SortEnvCell{}, Y3:SortStoreCell{}, Y4:SortMultsCell{}, Y5:SortOutCell{}, Y6:SortLocCell{})), Lbl'-LT-'T'-GT-'{}(\and{SortKCell{}} (X0:SortKCell{}, Y0:SortKCell{}), \and{SortFunctionCell{}} (X1:SortFunctionCell{}, Y1:SortFunctionCell{}), \and{SortEnvCell{}} (X2:SortEnvCell{}, Y2:SortEnvCell{}), \and{SortStoreCell{}} (X3:SortStoreCell{}, Y3:SortStoreCell{}), \and{SortMultsCell{}} (X4:SortMultsCell{}, Y4:SortMultsCell{}), \and{SortOutCell{}} (X5:SortOutCell{}, Y5:SortOutCell{}), \and{SortLocCell{}} (X6:SortLocCell{}, Y6:SortLocCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortTCellFragment{}, \equals{SortTCellFragment{}, R} (Val:SortTCellFragment{}, Lbl'-LT-'T'-GT-'-fragment{}(K0:SortKCellOpt{}, K1:SortFunctionCellOpt{}, K2:SortEnvCellOpt{}, K3:SortStoreCellOpt{}, K4:SortMultsCellOpt{}, K5:SortOutCellOpt{}, K6:SortLocCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortTCellFragment{}} (\and{SortTCellFragment{}} (Lbl'-LT-'T'-GT-'-fragment{}(X0:SortKCellOpt{}, X1:SortFunctionCellOpt{}, X2:SortEnvCellOpt{}, X3:SortStoreCellOpt{}, X4:SortMultsCellOpt{}, X5:SortOutCellOpt{}, X6:SortLocCellOpt{}), Lbl'-LT-'T'-GT-'-fragment{}(Y0:SortKCellOpt{}, Y1:SortFunctionCellOpt{}, Y2:SortEnvCellOpt{}, Y3:SortStoreCellOpt{}, Y4:SortMultsCellOpt{}, Y5:SortOutCellOpt{}, Y6:SortLocCellOpt{})), Lbl'-LT-'T'-GT-'-fragment{}(\and{SortKCellOpt{}} (X0:SortKCellOpt{}, Y0:SortKCellOpt{}), \and{SortFunctionCellOpt{}} (X1:SortFunctionCellOpt{}, Y1:SortFunctionCellOpt{}), \and{SortEnvCellOpt{}} (X2:SortEnvCellOpt{}, Y2:SortEnvCellOpt{}), \and{SortStoreCellOpt{}} (X3:SortStoreCellOpt{}, Y3:SortStoreCellOpt{}), \and{SortMultsCellOpt{}} (X4:SortMultsCellOpt{}, Y4:SortMultsCellOpt{}), \and{SortOutCellOpt{}} (X5:SortOutCellOpt{}, Y5:SortOutCellOpt{}), \and{SortLocCellOpt{}} (X6:SortLocCellOpt{}, Y6:SortLocCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortEnvCell{}, \equals{SortEnvCell{}, R} (Val:SortEnvCell{}, Lbl'-LT-'env'-GT-'{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{}\implies{SortEnvCell{}} (\and{SortEnvCell{}} (Lbl'-LT-'env'-GT-'{}(X0:SortMap{}), Lbl'-LT-'env'-GT-'{}(Y0:SortMap{})), Lbl'-LT-'env'-GT-'{}(\and{SortMap{}} (X0:SortMap{}, Y0:SortMap{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortFunThreadCell{}, \equals{SortFunThreadCell{}, R} (Val:SortFunThreadCell{}, Lbl'-LT-'funThread'-GT-'{}(K0:SortIdCell{}, K1:SortScopeCell{}, K2:SortParamsCell{}, K3:SortTempCell{}, K4:SortLocalEnvCell{}))) [functional{}()] // functional
  axiom{}\implies{SortFunThreadCell{}} (\and{SortFunThreadCell{}} (Lbl'-LT-'funThread'-GT-'{}(X0:SortIdCell{}, X1:SortScopeCell{}, X2:SortParamsCell{}, X3:SortTempCell{}, X4:SortLocalEnvCell{}), Lbl'-LT-'funThread'-GT-'{}(Y0:SortIdCell{}, Y1:SortScopeCell{}, Y2:SortParamsCell{}, Y3:SortTempCell{}, Y4:SortLocalEnvCell{})), Lbl'-LT-'funThread'-GT-'{}(\and{SortIdCell{}} (X0:SortIdCell{}, Y0:SortIdCell{}), \and{SortScopeCell{}} (X1:SortScopeCell{}, Y1:SortScopeCell{}), \and{SortParamsCell{}} (X2:SortParamsCell{}, Y2:SortParamsCell{}), \and{SortTempCell{}} (X3:SortTempCell{}, Y3:SortTempCell{}), \and{SortLocalEnvCell{}} (X4:SortLocalEnvCell{}, Y4:SortLocalEnvCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortFunThreadCellFragment{}, \equals{SortFunThreadCellFragment{}, R} (Val:SortFunThreadCellFragment{}, Lbl'-LT-'funThread'-GT-'-fragment{}(K0:SortIdCellOpt{}, K1:SortScopeCellOpt{}, K2:SortParamsCellOpt{}, K3:SortTempCellOpt{}, K4:SortLocalEnvCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortFunThreadCellFragment{}} (\and{SortFunThreadCellFragment{}} (Lbl'-LT-'funThread'-GT-'-fragment{}(X0:SortIdCellOpt{}, X1:SortScopeCellOpt{}, X2:SortParamsCellOpt{}, X3:SortTempCellOpt{}, X4:SortLocalEnvCellOpt{}), Lbl'-LT-'funThread'-GT-'-fragment{}(Y0:SortIdCellOpt{}, Y1:SortScopeCellOpt{}, Y2:SortParamsCellOpt{}, Y3:SortTempCellOpt{}, Y4:SortLocalEnvCellOpt{})), Lbl'-LT-'funThread'-GT-'-fragment{}(\and{SortIdCellOpt{}} (X0:SortIdCellOpt{}, Y0:SortIdCellOpt{}), \and{SortScopeCellOpt{}} (X1:SortScopeCellOpt{}, Y1:SortScopeCellOpt{}), \and{SortParamsCellOpt{}} (X2:SortParamsCellOpt{}, Y2:SortParamsCellOpt{}), \and{SortTempCellOpt{}} (X3:SortTempCellOpt{}, Y3:SortTempCellOpt{}), \and{SortLocalEnvCellOpt{}} (X4:SortLocalEnvCellOpt{}, Y4:SortLocalEnvCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortFunctionCell{}, \equals{SortFunctionCell{}, R} (Val:SortFunctionCell{}, Lbl'-LT-'function'-GT-'{}(K0:SortFunThreadCellMap{}))) [functional{}()] // functional
  axiom{}\implies{SortFunctionCell{}} (\and{SortFunctionCell{}} (Lbl'-LT-'function'-GT-'{}(X0:SortFunThreadCellMap{}), Lbl'-LT-'function'-GT-'{}(Y0:SortFunThreadCellMap{})), Lbl'-LT-'function'-GT-'{}(\and{SortFunThreadCellMap{}} (X0:SortFunThreadCellMap{}, Y0:SortFunThreadCellMap{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortFunctionCellFragment{}, \equals{SortFunctionCellFragment{}, R} (Val:SortFunctionCellFragment{}, Lbl'-LT-'function'-GT-'-fragment{}(K0:SortFunThreadCellMap{}))) [functional{}()] // functional
  axiom{}\implies{SortFunctionCellFragment{}} (\and{SortFunctionCellFragment{}} (Lbl'-LT-'function'-GT-'-fragment{}(X0:SortFunThreadCellMap{}), Lbl'-LT-'function'-GT-'-fragment{}(Y0:SortFunThreadCellMap{})), Lbl'-LT-'function'-GT-'-fragment{}(\and{SortFunThreadCellMap{}} (X0:SortFunThreadCellMap{}, Y0:SortFunThreadCellMap{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortGeneratedCounterCell{}, \equals{SortGeneratedCounterCell{}, R} (Val:SortGeneratedCounterCell{}, Lbl'-LT-'generatedCounter'-GT-'{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortGeneratedCounterCell{}} (\and{SortGeneratedCounterCell{}} (Lbl'-LT-'generatedCounter'-GT-'{}(X0:SortInt{}), Lbl'-LT-'generatedCounter'-GT-'{}(Y0:SortInt{})), Lbl'-LT-'generatedCounter'-GT-'{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortGeneratedTopCell{}, \equals{SortGeneratedTopCell{}, R} (Val:SortGeneratedTopCell{}, Lbl'-LT-'generatedTop'-GT-'{}(K0:SortTCell{}, K1:SortGeneratedCounterCell{}))) [functional{}()] // functional
  axiom{}\implies{SortGeneratedTopCell{}} (\and{SortGeneratedTopCell{}} (Lbl'-LT-'generatedTop'-GT-'{}(X0:SortTCell{}, X1:SortGeneratedCounterCell{}), Lbl'-LT-'generatedTop'-GT-'{}(Y0:SortTCell{}, Y1:SortGeneratedCounterCell{})), Lbl'-LT-'generatedTop'-GT-'{}(\and{SortTCell{}} (X0:SortTCell{}, Y0:SortTCell{}), \and{SortGeneratedCounterCell{}} (X1:SortGeneratedCounterCell{}, Y1:SortGeneratedCounterCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortGeneratedTopCellFragment{}, \equals{SortGeneratedTopCellFragment{}, R} (Val:SortGeneratedTopCellFragment{}, Lbl'-LT-'generatedTop'-GT-'-fragment{}(K0:SortTCellOpt{}, K1:SortGeneratedCounterCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortGeneratedTopCellFragment{}} (\and{SortGeneratedTopCellFragment{}} (Lbl'-LT-'generatedTop'-GT-'-fragment{}(X0:SortTCellOpt{}, X1:SortGeneratedCounterCellOpt{}), Lbl'-LT-'generatedTop'-GT-'-fragment{}(Y0:SortTCellOpt{}, Y1:SortGeneratedCounterCellOpt{})), Lbl'-LT-'generatedTop'-GT-'-fragment{}(\and{SortTCellOpt{}} (X0:SortTCellOpt{}, Y0:SortTCellOpt{}), \and{SortGeneratedCounterCellOpt{}} (X1:SortGeneratedCounterCellOpt{}, Y1:SortGeneratedCounterCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIdCell{}, \equals{SortIdCell{}, R} (Val:SortIdCell{}, Lbl'-LT-'id'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortIdCell{}} (\and{SortIdCell{}} (Lbl'-LT-'id'-GT-'{}(X0:SortK{}), Lbl'-LT-'id'-GT-'{}(Y0:SortK{})), Lbl'-LT-'id'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortKCell{}, \equals{SortKCell{}, R} (Val:SortKCell{}, Lbl'-LT-'k'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKCell{}} (\and{SortKCell{}} (Lbl'-LT-'k'-GT-'{}(X0:SortK{}), Lbl'-LT-'k'-GT-'{}(Y0:SortK{})), Lbl'-LT-'k'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortLocCell{}, \equals{SortLocCell{}, R} (Val:SortLocCell{}, Lbl'-LT-'loc'-GT-'{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortLocCell{}} (\and{SortLocCell{}} (Lbl'-LT-'loc'-GT-'{}(X0:SortInt{}), Lbl'-LT-'loc'-GT-'{}(Y0:SortInt{})), Lbl'-LT-'loc'-GT-'{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortLocalEnvCell{}, \equals{SortLocalEnvCell{}, R} (Val:SortLocalEnvCell{}, Lbl'-LT-'localEnv'-GT-'{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{}\implies{SortLocalEnvCell{}} (\and{SortLocalEnvCell{}} (Lbl'-LT-'localEnv'-GT-'{}(X0:SortMap{}), Lbl'-LT-'localEnv'-GT-'{}(Y0:SortMap{})), Lbl'-LT-'localEnv'-GT-'{}(\and{SortMap{}} (X0:SortMap{}, Y0:SortMap{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortMultsCell{}, \equals{SortMultsCell{}, R} (Val:SortMultsCell{}, Lbl'-LT-'mults'-GT-'{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{}\implies{SortMultsCell{}} (\and{SortMultsCell{}} (Lbl'-LT-'mults'-GT-'{}(X0:SortMap{}), Lbl'-LT-'mults'-GT-'{}(Y0:SortMap{})), Lbl'-LT-'mults'-GT-'{}(\and{SortMap{}} (X0:SortMap{}, Y0:SortMap{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortOutCell{}, \equals{SortOutCell{}, R} (Val:SortOutCell{}, Lbl'-LT-'out'-GT-'{}(K0:SortList{}))) [functional{}()] // functional
  axiom{}\implies{SortOutCell{}} (\and{SortOutCell{}} (Lbl'-LT-'out'-GT-'{}(X0:SortList{}), Lbl'-LT-'out'-GT-'{}(Y0:SortList{})), Lbl'-LT-'out'-GT-'{}(\and{SortList{}} (X0:SortList{}, Y0:SortList{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortParamsCell{}, \equals{SortParamsCell{}, R} (Val:SortParamsCell{}, Lbl'-LT-'params'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortParamsCell{}} (\and{SortParamsCell{}} (Lbl'-LT-'params'-GT-'{}(X0:SortK{}), Lbl'-LT-'params'-GT-'{}(Y0:SortK{})), Lbl'-LT-'params'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortScopeCell{}, \equals{SortScopeCell{}, R} (Val:SortScopeCell{}, Lbl'-LT-'scope'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortScopeCell{}} (\and{SortScopeCell{}} (Lbl'-LT-'scope'-GT-'{}(X0:SortK{}), Lbl'-LT-'scope'-GT-'{}(Y0:SortK{})), Lbl'-LT-'scope'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortStoreCell{}, \equals{SortStoreCell{}, R} (Val:SortStoreCell{}, Lbl'-LT-'store'-GT-'{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{}\implies{SortStoreCell{}} (\and{SortStoreCell{}} (Lbl'-LT-'store'-GT-'{}(X0:SortMap{}), Lbl'-LT-'store'-GT-'{}(Y0:SortMap{})), Lbl'-LT-'store'-GT-'{}(\and{SortMap{}} (X0:SortMap{}, Y0:SortMap{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortTempCell{}, \equals{SortTempCell{}, R} (Val:SortTempCell{}, Lbl'-LT-'temp'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortTempCell{}} (\and{SortTempCell{}} (Lbl'-LT-'temp'-GT-'{}(X0:SortK{}), Lbl'-LT-'temp'-GT-'{}(Y0:SortK{})), Lbl'-LT-'temp'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblFloat2String'LParUndsRParUnds'STRING'Unds'String'Unds'Float{}(K0:SortFloat{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblId2String'LParUndsRParUnds'ID-SYNTAX'Unds'String'Unds'Id{}(K0:SortId{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblInt2String'LParUndsRParUnds'STRING'Unds'String'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortFunReturnType{}, \equals{SortFunReturnType{}, R} (Val:SortFunReturnType{}, LblInt'Unds'KT-SYNTAX'Unds'FunReturnType{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, LblListItem{}(K0:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblMap'Coln'update{}(K0:SortMap{}, K1:SortKItem{}, K2:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblSet'Coln'difference{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblSet'Coln'in{}(K0:SortKItem{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblSetItem{}(K0:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSkip{}, \equals{SortSkip{}, R} (Val:SortSkip{}, LblSkip'Unds'KT-SYNTAX'Unds'Skip{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortId{}, \equals{SortId{}, R} (Val:SortId{}, LblString2Id'LParUndsRParUnds'ID-SYNTAX'Unds'Id'Unds'String{}(K0:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsAnd-'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKotlinFunCall{}, \equals{SortKotlinFunCall{}, R} (Val:SortKotlinFunCall{}, Lbl'UndsLParUndsRParSClnUnds'KT-SYNTAX'Unds'KotlinFunCall'Unds'Id'Unds'Values{}(K0:SortId{}, K1:SortValues{}))) [functional{}()] // functional
  axiom{}\implies{SortKotlinFunCall{}} (\and{SortKotlinFunCall{}} (Lbl'UndsLParUndsRParSClnUnds'KT-SYNTAX'Unds'KotlinFunCall'Unds'Id'Unds'Values{}(X0:SortId{}, X1:SortValues{}), Lbl'UndsLParUndsRParSClnUnds'KT-SYNTAX'Unds'KotlinFunCall'Unds'Id'Unds'Values{}(Y0:SortId{}, Y1:SortValues{})), Lbl'UndsLParUndsRParSClnUnds'KT-SYNTAX'Unds'KotlinFunCall'Unds'Id'Unds'Values{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortValues{}} (X1:SortValues{}, Y1:SortValues{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsStar'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lbl'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortAExpMod{}, \equals{SortAExpMod{}, R} (Val:SortAExpMod{}, Lbl'UndsPlusPlusUnds'KT-SYNTAX'Unds'AExpMod'Unds'Id{}(K0:SortId{}))) [functional{}()] // functional
  axiom{}\implies{SortAExpMod{}} (\and{SortAExpMod{}} (Lbl'UndsPlusPlusUnds'KT-SYNTAX'Unds'AExpMod'Unds'Id{}(X0:SortId{}), Lbl'UndsPlusPlusUnds'KT-SYNTAX'Unds'AExpMod'Unds'Id{}(Y0:SortId{})), Lbl'UndsPlusPlusUnds'KT-SYNTAX'Unds'AExpMod'Unds'Id{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortAExpMod{}} (\and{SortAExpMod{}} (Lbl'UndsPlusPlusUnds'KT-SYNTAX'Unds'AExpMod'Unds'Id{}(X0:SortId{}), Lbl'Unds'--'Unds'KT-SYNTAX'Unds'AExpMod'Unds'Id{}(Y0:SortId{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsPlus'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, Lbl'UndsPlus'String'UndsUnds'STRING'Unds'String'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lbl'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortAExps{}, \equals{SortAExps{}, R} (Val:SortAExps{}, Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(K0:SortAExp{}, K1:SortAExps{}))) [functional{}()] // functional
  axiom{}\implies{SortAExps{}} (\and{SortAExps{}} (Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(X0:SortAExp{}, X1:SortAExps{}), Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(Y0:SortAExp{}, Y1:SortAExps{})), Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExps{}} (X1:SortAExps{}, Y1:SortAExps{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIds{}, \equals{SortIds{}, R} (Val:SortIds{}, Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(K0:SortId{}, K1:SortIds{}))) [functional{}()] // functional
  axiom{}\implies{SortIds{}} (\and{SortIds{}} (Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(X0:SortId{}, X1:SortIds{}), Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(Y0:SortId{}, Y1:SortIds{})), Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortIds{}} (X1:SortIds{}, Y1:SortIds{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortParams{}, \equals{SortParams{}, R} (Val:SortParams{}, Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Params'Unds'Id'Unds'Params{}(K0:SortId{}, K1:SortParams{}))) [functional{}()] // functional
  axiom{}\implies{SortParams{}} (\and{SortParams{}} (Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Params'Unds'Id'Unds'Params{}(X0:SortId{}, X1:SortParams{}), Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Params'Unds'Id'Unds'Params{}(Y0:SortId{}, Y1:SortParams{})), Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Params'Unds'Id'Unds'Params{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortParams{}} (X1:SortParams{}, Y1:SortParams{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortValues{}, \equals{SortValues{}, R} (Val:SortValues{}, Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Values'Unds'Int'Unds'Values{}(K0:SortInt{}, K1:SortValues{}))) [functional{}()] // functional
  axiom{}\implies{SortValues{}} (\and{SortValues{}} (Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Values'Unds'Int'Unds'Values{}(X0:SortInt{}, X1:SortValues{}), Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Values'Unds'Int'Unds'Values{}(Y0:SortInt{}, Y1:SortValues{})), Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Values'Unds'Int'Unds'Values{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}), \and{SortValues{}} (X1:SortValues{}, Y1:SortValues{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortAExpMod{}, \equals{SortAExpMod{}, R} (Val:SortAExpMod{}, Lbl'Unds'--'Unds'KT-SYNTAX'Unds'AExpMod'Unds'Id{}(K0:SortId{}))) [functional{}()] // functional
  axiom{}\implies{SortAExpMod{}} (\and{SortAExpMod{}} (Lbl'Unds'--'Unds'KT-SYNTAX'Unds'AExpMod'Unds'Id{}(X0:SortId{}), Lbl'Unds'--'Unds'KT-SYNTAX'Unds'AExpMod'Unds'Id{}(Y0:SortId{})), Lbl'Unds'--'Unds'KT-SYNTAX'Unds'AExpMod'Unds'Id{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Unds'-Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'Unds'-Map'UndsUnds'MAP'Unds'Map'Unds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lbl'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortAExp{}} (\and{SortAExp{}} (Lbl'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lbl'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Map'UndsUnds'MAP'Unds'Bool'Unds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Set'UndsUnds'SET'Unds'Bool'Unds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBExp{}, \equals{SortBExp{}, R} (Val:SortBExp{}, Lbl'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBExp{}, \equals{SortBExp{}, R} (Val:SortBExp{}, Lbl'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'K'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'Bool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'K'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBExp{}, \equals{SortBExp{}, R} (Val:SortBExp{}, Lbl'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortBExp{}} (\and{SortBExp{}} (Lbl'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortAssigner{}, \equals{SortAssigner{}, R} (Val:SortAssigner{}, Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(K0:SortDeclaredVar{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortAssigner{}} (\and{SortAssigner{}} (Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(X0:SortDeclaredVar{}, X1:SortAExp{}), Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(Y0:SortDeclaredVar{}, Y1:SortAExp{})), Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(\and{SortDeclaredVar{}} (X0:SortDeclaredVar{}, Y0:SortDeclaredVar{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortUniqueIdAssigner{}, \equals{SortUniqueIdAssigner{}, R} (Val:SortUniqueIdAssigner{}, Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp{}(K0:SortId{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortUniqueIdAssigner{}} (\and{SortUniqueIdAssigner{}} (Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp{}(X0:SortId{}, X1:SortAExp{}), Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp{}(Y0:SortId{}, Y1:SortAExp{})), Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-Eqls'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-Eqls'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBExp{}, \equals{SortBExp{}, R} (Val:SortBExp{}, Lbl'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBExp{}, \equals{SortBExp{}, R} (Val:SortBExp{}, Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(K0:SortBExp{}, K1:SortBlock{}, K2:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortStatement{}} (\and{SortStatement{}} (Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{}), Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortBlock{})), Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}), \and{SortBlock{}} (X1:SortBlock{}, Y1:SortBlock{}), \and{SortBlock{}} (X2:SortBlock{}, Y2:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{}), Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(Y0:SortStatement{}, Y1:SortStatement{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{}), Lblfor'LParUndsSClnUndsSClnUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Assigner'Unds'BExp'Unds'AExpMod'Unds'Block{}(Y0:SortAssigner{}, Y1:SortBExp{}, Y2:SortAExpMod{}, Y3:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{}), Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{}), Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortElseIfStatement{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{}), Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(Y0:SortAExps{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{}), Lblreturn'UndsUnds'KT-SYNTAX'Unds'Statement'Unds'FunReturn{}(Y0:SortFunReturn{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{}), Lblwhile'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \equals{SortFunThreadCellMap{}, R} (Lbl'Unds'FunThreadCellMap'Unds'{}(Lbl'Unds'FunThreadCellMap'Unds'{}(K1:SortFunThreadCellMap{},K2:SortFunThreadCellMap{}),K3:SortFunThreadCellMap{}),Lbl'Unds'FunThreadCellMap'Unds'{}(K1:SortFunThreadCellMap{},Lbl'Unds'FunThreadCellMap'Unds'{}(K2:SortFunThreadCellMap{},K3:SortFunThreadCellMap{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortFunThreadCellMap{}, R} (Lbl'Unds'FunThreadCellMap'Unds'{}(K1:SortFunThreadCellMap{},K2:SortFunThreadCellMap{}),Lbl'Unds'FunThreadCellMap'Unds'{}(K2:SortFunThreadCellMap{},K1:SortFunThreadCellMap{})) [comm{}()] // commutativity
  axiom{R}\equals{SortFunThreadCellMap{}, R} (Lbl'Unds'FunThreadCellMap'Unds'{}(K:SortFunThreadCellMap{},Lbl'Stop'FunThreadCellMap{}()),K:SortFunThreadCellMap{}) [unit{}()] // right unit
  axiom{R}\equals{SortFunThreadCellMap{}, R} (Lbl'Unds'FunThreadCellMap'Unds'{}(Lbl'Stop'FunThreadCellMap{}(),K:SortFunThreadCellMap{}),K:SortFunThreadCellMap{}) [unit{}()] // left unit
  axiom{R} \equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(K1:SortList{},K2:SortList{}),K3:SortList{}),Lbl'Unds'List'Unds'{}(K1:SortList{},Lbl'Unds'List'Unds'{}(K2:SortList{},K3:SortList{}))) [assoc{}()] // associativity
  axiom{R}\equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(K:SortList{},Lbl'Stop'List{}()),K:SortList{}) [unit{}()] // right unit
  axiom{R}\equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(Lbl'Stop'List{}(),K:SortList{}),K:SortList{}) [unit{}()] // left unit
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, Lbl'Unds'List'Unds'{}(K0:SortList{}, K1:SortList{}))) [functional{}()] // functional
  axiom{R} \equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(Lbl'Unds'Map'Unds'{}(K1:SortMap{},K2:SortMap{}),K3:SortMap{}),Lbl'Unds'Map'Unds'{}(K1:SortMap{},Lbl'Unds'Map'Unds'{}(K2:SortMap{},K3:SortMap{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(K1:SortMap{},K2:SortMap{}),Lbl'Unds'Map'Unds'{}(K2:SortMap{},K1:SortMap{})) [comm{}()] // commutativity
  axiom{R}\equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(K:SortMap{},Lbl'Stop'Map{}()),K:SortMap{}) [unit{}()] // right unit
  axiom{R}\equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(Lbl'Stop'Map{}(),K:SortMap{}),K:SortMap{}) [unit{}()] // left unit
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(Lbl'Unds'Set'Unds'{}(K1:SortSet{},K2:SortSet{}),K3:SortSet{}),Lbl'Unds'Set'Unds'{}(K1:SortSet{},Lbl'Unds'Set'Unds'{}(K2:SortSet{},K3:SortSet{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K1:SortSet{},K2:SortSet{}),Lbl'Unds'Set'Unds'{}(K2:SortSet{},K1:SortSet{})) [comm{}()] // commutativity
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K:SortSet{},K:SortSet{}),K:SortSet{}) [idem{}()] // idempotency
  axiom{R}\equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K:SortSet{},Lbl'Stop'Set{}()),K:SortSet{}) [unit{}()] // right unit
  axiom{R}\equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(Lbl'Stop'Set{}(),K:SortSet{}),K:SortSet{}) [unit{}()] // left unit
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lbl'Unds'Set'Unds'{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsLSqBUnds-LT-'-undef'RSqB'{}(K0:SortMap{}, K1:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'UndsLSqBUndsRSqB'orDefault'UndsUnds'MAP'Unds'KItem'Unds'Map'Unds'KItem'Unds'KItem{}(K0:SortMap{}, K1:SortKItem{}, K2:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKotIntVarAssign{}, \equals{SortKotIntVarAssign{}, R} (Val:SortKotIntVarAssign{}, Lbl'UndsUndsColn'Int'Unds'KT-SYNTAX'Unds'KotIntVarAssign'Unds'VariableType'Unds'Id{}(K0:SortVariableType{}, K1:SortId{}))) [functional{}()] // functional
  axiom{}\implies{SortKotIntVarAssign{}} (\and{SortKotIntVarAssign{}} (Lbl'UndsUndsColn'Int'Unds'KT-SYNTAX'Unds'KotIntVarAssign'Unds'VariableType'Unds'Id{}(X0:SortVariableType{}, X1:SortId{}), Lbl'UndsUndsColn'Int'Unds'KT-SYNTAX'Unds'KotIntVarAssign'Unds'VariableType'Unds'Id{}(Y0:SortVariableType{}, Y1:SortId{})), Lbl'UndsUndsColn'Int'Unds'KT-SYNTAX'Unds'KotIntVarAssign'Unds'VariableType'Unds'Id{}(\and{SortVariableType{}} (X0:SortVariableType{}, Y0:SortVariableType{}), \and{SortId{}} (X1:SortId{}, Y1:SortId{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortDeclaredVar{}, \equals{SortDeclaredVar{}, R} (Val:SortDeclaredVar{}, Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(K0:SortVariableType{}, K1:SortIds{}))) [functional{}()] // functional
  axiom{}\implies{SortDeclaredVar{}} (\and{SortDeclaredVar{}} (Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(X0:SortVariableType{}, X1:SortIds{}), Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(Y0:SortVariableType{}, Y1:SortIds{})), Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(\and{SortVariableType{}} (X0:SortVariableType{}, Y0:SortVariableType{}), \and{SortIds{}} (X1:SortIds{}, Y1:SortIds{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(K0:SortStatement{}, K1:SortStatement{}))) [functional{}()] // functional
  axiom{}\implies{SortStatement{}} (\and{SortStatement{}} (Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(X0:SortStatement{}, X1:SortStatement{}), Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(Y0:SortStatement{}, Y1:SortStatement{})), Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(\and{SortStatement{}} (X0:SortStatement{}, Y0:SortStatement{}), \and{SortStatement{}} (X1:SortStatement{}, Y1:SortStatement{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(X0:SortStatement{}, X1:SortStatement{}), Lblfor'LParUndsSClnUndsSClnUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Assigner'Unds'BExp'Unds'AExpMod'Unds'Block{}(Y0:SortAssigner{}, Y1:SortBExp{}, Y2:SortAExpMod{}, Y3:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(X0:SortStatement{}, X1:SortStatement{}), Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(X0:SortStatement{}, X1:SortStatement{}), Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortElseIfStatement{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(X0:SortStatement{}, X1:SortStatement{}), Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(Y0:SortAExps{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(X0:SortStatement{}, X1:SortStatement{}), Lblreturn'UndsUnds'KT-SYNTAX'Unds'Statement'Unds'FunReturn{}(Y0:SortFunReturn{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(X0:SortStatement{}, X1:SortStatement{}), Lblwhile'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'andBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'andThenBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'impliesBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'in'UndsUnds'LIST'Unds'Bool'Unds'KItem'Unds'List{}(K0:SortKItem{}, K1:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'Unds'Bool'Unds'KItem'Unds'Map{}(K0:SortKItem{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'orBool'UndsUnds'BOOL'Unds'Bool'Unds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'orElseBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'xorBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Unds'xorInt'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsPipe'-'-GT-Unds'{}(K0:SortKItem{}, K1:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsPipe'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblabsInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortElseIfStatement{}, \equals{SortElseIfStatement{}, R} (Val:SortElseIfStatement{}, Lblelse'UndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'Block{}(K0:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortElseIfStatement{}} (\and{SortElseIfStatement{}} (Lblelse'UndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'Block{}(X0:SortBlock{}), Lblelse'UndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'Block{}(Y0:SortBlock{})), Lblelse'UndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'Block{}(\and{SortBlock{}} (X0:SortBlock{}, Y0:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortElseIfStatement{}} (\and{SortElseIfStatement{}} (Lblelse'UndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'Block{}(X0:SortBlock{}), Lblelseif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortElseIfStatement{}} (\and{SortElseIfStatement{}} (Lblelse'UndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'Block{}(X0:SortBlock{}), Lblelseif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortElseIfStatement{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortElseIfStatement{}, \equals{SortElseIfStatement{}, R} (Val:SortElseIfStatement{}, Lblelseif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block{}(K0:SortBExp{}, K1:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortElseIfStatement{}} (\and{SortElseIfStatement{}} (Lblelseif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}), Lblelseif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{})), Lblelseif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}), \and{SortBlock{}} (X1:SortBlock{}, Y1:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortElseIfStatement{}} (\and{SortElseIfStatement{}} (Lblelseif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}), Lblelseif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortElseIfStatement{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortElseIfStatement{}, \equals{SortElseIfStatement{}, R} (Val:SortElseIfStatement{}, Lblelseif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(K0:SortBExp{}, K1:SortBlock{}, K2:SortElseIfStatement{}))) [functional{}()] // functional
  axiom{}\implies{SortElseIfStatement{}} (\and{SortElseIfStatement{}} (Lblelseif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortElseIfStatement{}), Lblelseif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortElseIfStatement{})), Lblelseif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}), \and{SortBlock{}} (X1:SortBlock{}, Y1:SortBlock{}), \and{SortElseIfStatement{}} (X2:SortElseIfStatement{}, Y2:SortElseIfStatement{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, Lblfor'LParUndsSClnUndsSClnUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Assigner'Unds'BExp'Unds'AExpMod'Unds'Block{}(K0:SortAssigner{}, K1:SortBExp{}, K2:SortAExpMod{}, K3:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortStatement{}} (\and{SortStatement{}} (Lblfor'LParUndsSClnUndsSClnUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Assigner'Unds'BExp'Unds'AExpMod'Unds'Block{}(X0:SortAssigner{}, X1:SortBExp{}, X2:SortAExpMod{}, X3:SortBlock{}), Lblfor'LParUndsSClnUndsSClnUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Assigner'Unds'BExp'Unds'AExpMod'Unds'Block{}(Y0:SortAssigner{}, Y1:SortBExp{}, Y2:SortAExpMod{}, Y3:SortBlock{})), Lblfor'LParUndsSClnUndsSClnUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Assigner'Unds'BExp'Unds'AExpMod'Unds'Block{}(\and{SortAssigner{}} (X0:SortAssigner{}, Y0:SortAssigner{}), \and{SortBExp{}} (X1:SortBExp{}, Y1:SortBExp{}), \and{SortAExpMod{}} (X2:SortAExpMod{}, Y2:SortAExpMod{}), \and{SortBlock{}} (X3:SortBlock{}, Y3:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lblfor'LParUndsSClnUndsSClnUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Assigner'Unds'BExp'Unds'AExpMod'Unds'Block{}(X0:SortAssigner{}, X1:SortBExp{}, X2:SortAExpMod{}, X3:SortBlock{}), Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lblfor'LParUndsSClnUndsSClnUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Assigner'Unds'BExp'Unds'AExpMod'Unds'Block{}(X0:SortAssigner{}, X1:SortBExp{}, X2:SortAExpMod{}, X3:SortBlock{}), Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortElseIfStatement{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lblfor'LParUndsSClnUndsSClnUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Assigner'Unds'BExp'Unds'AExpMod'Unds'Block{}(X0:SortAssigner{}, X1:SortBExp{}, X2:SortAExpMod{}, X3:SortBlock{}), Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(Y0:SortAExps{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lblfor'LParUndsSClnUndsSClnUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Assigner'Unds'BExp'Unds'AExpMod'Unds'Block{}(X0:SortAssigner{}, X1:SortBExp{}, X2:SortAExpMod{}, X3:SortBlock{}), Lblreturn'UndsUnds'KT-SYNTAX'Unds'Statement'Unds'FunReturn{}(Y0:SortFunReturn{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lblfor'LParUndsSClnUndsSClnUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Assigner'Unds'BExp'Unds'AExpMod'Unds'Block{}(X0:SortAssigner{}, X1:SortBExp{}, X2:SortAExpMod{}, X3:SortBlock{}), Lblwhile'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortId{}, \equals{SortId{}, R} (Val:SortId{}, LblfreshId'LParUndsRParUnds'ID-SYNTAX'Unds'Id'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKotlinFun{}, \equals{SortKotlinFun{}, R} (Val:SortKotlinFun{}, Lblfun'UndsLParUndsRParColnUndsUndsUnds'KT-SYNTAX'Unds'KotlinFun'Unds'Id'Unds'Params'Unds'FunReturnType'Unds'Block{}(K0:SortId{}, K1:SortParams{}, K2:SortFunReturnType{}, K3:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortKotlinFun{}} (\and{SortKotlinFun{}} (Lblfun'UndsLParUndsRParColnUndsUndsUnds'KT-SYNTAX'Unds'KotlinFun'Unds'Id'Unds'Params'Unds'FunReturnType'Unds'Block{}(X0:SortId{}, X1:SortParams{}, X2:SortFunReturnType{}, X3:SortBlock{}), Lblfun'UndsLParUndsRParColnUndsUndsUnds'KT-SYNTAX'Unds'KotlinFun'Unds'Id'Unds'Params'Unds'FunReturnType'Unds'Block{}(Y0:SortId{}, Y1:SortParams{}, Y2:SortFunReturnType{}, Y3:SortBlock{})), Lblfun'UndsLParUndsRParColnUndsUndsUnds'KT-SYNTAX'Unds'KotlinFun'Unds'Id'Unds'Params'Unds'FunReturnType'Unds'Block{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortParams{}} (X1:SortParams{}, Y1:SortParams{}), \and{SortFunReturnType{}} (X2:SortFunReturnType{}, Y2:SortFunReturnType{}), \and{SortBlock{}} (X3:SortBlock{}, Y3:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortFunctionMain{}, \equals{SortFunctionMain{}, R} (Val:SortFunctionMain{}, Lblfunmain'LParRParLBraUndsRBraUnds'KT-SYNTAX'Unds'FunctionMain'Unds'Block{}(K0:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortFunctionMain{}} (\and{SortFunctionMain{}} (Lblfunmain'LParRParLBraUndsRBraUnds'KT-SYNTAX'Unds'FunctionMain'Unds'Block{}(X0:SortBlock{}), Lblfunmain'LParRParLBraUndsRBraUnds'KT-SYNTAX'Unds'FunctionMain'Unds'Block{}(Y0:SortBlock{})), Lblfunmain'LParRParLBraUndsRBraUnds'KT-SYNTAX'Unds'FunctionMain'Unds'Block{}(\and{SortBlock{}} (X0:SortBlock{}, Y0:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(K0:SortBExp{}, K1:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortStatement{}} (\and{SortStatement{}} (Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}), Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{})), Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}), \and{SortBlock{}} (X1:SortBlock{}, Y1:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}), Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortElseIfStatement{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}), Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(Y0:SortAExps{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}), Lblreturn'UndsUnds'KT-SYNTAX'Unds'Statement'Unds'FunReturn{}(Y0:SortFunReturn{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}), Lblwhile'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(K0:SortBExp{}, K1:SortBlock{}, K2:SortElseIfStatement{}))) [functional{}()] // functional
  axiom{}\implies{SortStatement{}} (\and{SortStatement{}} (Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortElseIfStatement{}), Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortElseIfStatement{})), Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}), \and{SortBlock{}} (X1:SortBlock{}, Y1:SortBlock{}), \and{SortElseIfStatement{}} (X2:SortElseIfStatement{}, Y2:SortElseIfStatement{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortElseIfStatement{}), Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(Y0:SortAExps{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortElseIfStatement{}), Lblreturn'UndsUnds'KT-SYNTAX'Unds'Statement'Unds'FunReturn{}(Y0:SortFunReturn{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortElseIfStatement{}), Lblwhile'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblintersectSet'LParUndsCommUndsRParUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lblkeys'LParUndsRParUnds'MAP'Unds'Set'Unds'Map{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LbllengthString'LParUndsRParUnds'STRING'Unds'Int'Unds'String{}(K0:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortLocalFun{}, \equals{SortLocalFun{}, R} (Val:SortLocalFun{}, Lbllocal'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalFun'Unds'Id'Unds'Statement{}(K0:SortId{}, K1:SortStatement{}))) [functional{}()] // functional
  axiom{}\implies{SortLocalFun{}} (\and{SortLocalFun{}} (Lbllocal'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalFun'Unds'Id'Unds'Statement{}(X0:SortId{}, X1:SortStatement{}), Lbllocal'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalFun'Unds'Id'Unds'Statement{}(Y0:SortId{}, Y1:SortStatement{})), Lbllocal'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalFun'Unds'Id'Unds'Statement{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortStatement{}} (X1:SortStatement{}, Y1:SortStatement{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortLocalResId{}, \equals{SortLocalResId{}, R} (Val:SortLocalResId{}, LbllocalResId'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResId'Unds'Id'Unds'Id{}(K0:SortId{}, K1:SortId{}))) [functional{}()] // functional
  axiom{}\implies{SortLocalResId{}} (\and{SortLocalResId{}} (LbllocalResId'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResId'Unds'Id'Unds'Id{}(X0:SortId{}, X1:SortId{}), LbllocalResId'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResId'Unds'Id'Unds'Id{}(Y0:SortId{}, Y1:SortId{})), LbllocalResId'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResId'Unds'Id'Unds'Id{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortId{}} (X1:SortId{}, Y1:SortId{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortLocalResInt{}, \equals{SortLocalResInt{}, R} (Val:SortLocalResInt{}, LbllocalResInt'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResInt'Unds'Id'Unds'Int{}(K0:SortId{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortLocalResInt{}} (\and{SortLocalResInt{}} (LbllocalResInt'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResInt'Unds'Id'Unds'Int{}(X0:SortId{}, X1:SortInt{}), LbllocalResInt'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResInt'Unds'Id'Unds'Int{}(Y0:SortId{}, Y1:SortInt{})), LbllocalResInt'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResInt'Unds'Id'Unds'Int{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortInt{}} (X1:SortInt{}, Y1:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortLocalResString{}, \equals{SortLocalResString{}, R} (Val:SortLocalResString{}, LbllocalResString'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResString'Unds'Id'Unds'String{}(K0:SortId{}, K1:SortString{}))) [functional{}()] // functional
  axiom{}\implies{SortLocalResString{}} (\and{SortLocalResString{}} (LbllocalResString'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResString'Unds'Id'Unds'String{}(X0:SortId{}, X1:SortString{}), LbllocalResString'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResString'Unds'Id'Unds'String{}(Y0:SortId{}, Y1:SortString{})), LbllocalResString'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResString'Unds'Id'Unds'String{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortString{}} (X1:SortString{}, Y1:SortString{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblmaxInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblminInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortEnvCellOpt{}, \equals{SortEnvCellOpt{}, R} (Val:SortEnvCellOpt{}, LblnoEnvCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortFunctionCellOpt{}, \equals{SortFunctionCellOpt{}, R} (Val:SortFunctionCellOpt{}, LblnoFunctionCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortGeneratedCounterCellOpt{}, \equals{SortGeneratedCounterCellOpt{}, R} (Val:SortGeneratedCounterCellOpt{}, LblnoGeneratedCounterCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIdCellOpt{}, \equals{SortIdCellOpt{}, R} (Val:SortIdCellOpt{}, LblnoIdCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKCellOpt{}, \equals{SortKCellOpt{}, R} (Val:SortKCellOpt{}, LblnoKCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortLocCellOpt{}, \equals{SortLocCellOpt{}, R} (Val:SortLocCellOpt{}, LblnoLocCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortLocalEnvCellOpt{}, \equals{SortLocalEnvCellOpt{}, R} (Val:SortLocalEnvCellOpt{}, LblnoLocalEnvCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMultsCellOpt{}, \equals{SortMultsCellOpt{}, R} (Val:SortMultsCellOpt{}, LblnoMultsCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortOutCellOpt{}, \equals{SortOutCellOpt{}, R} (Val:SortOutCellOpt{}, LblnoOutCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortParamsCellOpt{}, \equals{SortParamsCellOpt{}, R} (Val:SortParamsCellOpt{}, LblnoParamsCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortScopeCellOpt{}, \equals{SortScopeCellOpt{}, R} (Val:SortScopeCellOpt{}, LblnoScopeCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStoreCellOpt{}, \equals{SortStoreCellOpt{}, R} (Val:SortStoreCellOpt{}, LblnoStoreCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTCellOpt{}, \equals{SortTCellOpt{}, R} (Val:SortTCellOpt{}, LblnoTCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTempCellOpt{}, \equals{SortTempCellOpt{}, R} (Val:SortTempCellOpt{}, LblnoTempCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblnotBool'Unds'{}(K0:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(K0:SortAExps{}))) [functional{}()] // functional
  axiom{}\implies{SortStatement{}} (\and{SortStatement{}} (Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(X0:SortAExps{}), Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(Y0:SortAExps{})), Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(\and{SortAExps{}} (X0:SortAExps{}, Y0:SortAExps{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(X0:SortAExps{}), Lblreturn'UndsUnds'KT-SYNTAX'Unds'Statement'Unds'FunReturn{}(Y0:SortFunReturn{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(X0:SortAExps{}), Lblwhile'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblremoveAll'LParUndsCommUndsRParUnds'MAP'Unds'Map'Unds'Map'Unds'Set{}(K0:SortMap{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, Lblreturn'UndsUnds'KT-SYNTAX'Unds'Statement'Unds'FunReturn{}(K0:SortFunReturn{}))) [functional{}()] // functional
  axiom{}\implies{SortStatement{}} (\and{SortStatement{}} (Lblreturn'UndsUnds'KT-SYNTAX'Unds'Statement'Unds'FunReturn{}(X0:SortFunReturn{}), Lblreturn'UndsUnds'KT-SYNTAX'Unds'Statement'Unds'FunReturn{}(Y0:SortFunReturn{})), Lblreturn'UndsUnds'KT-SYNTAX'Unds'Statement'Unds'FunReturn{}(\and{SortFunReturn{}} (X0:SortFunReturn{}, Y0:SortFunReturn{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStatement{}} (\and{SortStatement{}} (Lblreturn'UndsUnds'KT-SYNTAX'Unds'Statement'Unds'FunReturn{}(X0:SortFunReturn{}), Lblwhile'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'LIST'Unds'Int'Unds'List{}(K0:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'MAP'Unds'Int'Unds'Map{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'SET'Unds'Int'Unds'Set{}(K0:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'Int'Unds'Int{}(K0:SortString{}, K1:SortInt{}, K2:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblupdateMap'LParUndsCommUndsRParUnds'MAP'Unds'Map'Unds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortVariableType{}, \equals{SortVariableType{}, R} (Val:SortVariableType{}, Lblval'Unds'KT-SYNTAX'Unds'VariableType{}())) [functional{}()] // functional
  axiom{}\not{SortVariableType{}} (\and{SortVariableType{}} (Lblval'Unds'KT-SYNTAX'Unds'VariableType{}(), Lblvar'Unds'KT-SYNTAX'Unds'VariableType{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortVariableType{}, \equals{SortVariableType{}, R} (Val:SortVariableType{}, Lblvar'Unds'KT-SYNTAX'Unds'VariableType{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStatement{}, \equals{SortStatement{}, R} (Val:SortStatement{}, Lblwhile'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(K0:SortBExp{}, K1:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortStatement{}} (\and{SortStatement{}} (Lblwhile'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}), Lblwhile'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{})), Lblwhile'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}), \and{SortBlock{}} (X1:SortBlock{}, Y1:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBlock{}, \equals{SortBlock{}, R} (Val:SortBlock{}, Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(K0:SortStatement{}))) [functional{}()] // functional
  axiom{}\implies{SortBlock{}} (\and{SortBlock{}} (Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(X0:SortStatement{}), Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(Y0:SortStatement{})), Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(\and{SortStatement{}} (X0:SortStatement{}, Y0:SortStatement{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Tild'Int'Unds'{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{} \or{SortFunThreadCellMap{}} (\exists{SortFunThreadCellMap{}} (Val:SortFunThreadCell{}, inj{SortFunThreadCell{}, SortFunThreadCellMap{}} (Val:SortFunThreadCell{})), \bottom{SortFunThreadCellMap{}}()) [constructor{}()] // no junk
  axiom{} \or{SortFunReturnType{}} (LblInt'Unds'KT-SYNTAX'Unds'FunReturnType{}(), \bottom{SortFunReturnType{}}()) [constructor{}()] // no junk
  axiom{} \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, \exists{SortKItem{}} (X1:SortK{}, Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(X0:SortK{}, X1:SortK{}))), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, \exists{SortKItem{}} (X1:SortK{}, Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(X0:SortK{}, X1:SortK{}))), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortInt{}, \exists{SortKItem{}} (X1:SortString{}, \exists{SortKItem{}} (X2:SortString{}, Lbl'Hash'systemResult{}(X0:SortInt{}, X1:SortString{}, X2:SortString{})))), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortFunThreadCellMap{}, inj{SortFunThreadCellMap{}, SortKItem{}} (Val:SortFunThreadCellMap{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortFunReturnType{}, inj{SortFunReturnType{}, SortKItem{}} (Val:SortFunReturnType{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortAExpMod{}, inj{SortAExpMod{}, SortKItem{}} (Val:SortAExpMod{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortList{}, inj{SortList{}, SortKItem{}} (Val:SortList{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIdCell{}, inj{SortIdCell{}, SortKItem{}} (Val:SortIdCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortOutCellOpt{}, inj{SortOutCellOpt{}, SortKItem{}} (Val:SortOutCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTCellOpt{}, inj{SortTCellOpt{}, SortKItem{}} (Val:SortTCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortOutCell{}, inj{SortOutCell{}, SortKItem{}} (Val:SortOutCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTCellFragment{}, inj{SortTCellFragment{}, SortKItem{}} (Val:SortTCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortLocalFun{}, inj{SortLocalFun{}, SortKItem{}} (Val:SortLocalFun{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortString{}, inj{SortString{}, SortKItem{}} (Val:SortString{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIOInt{}, inj{SortIOInt{}, SortKItem{}} (Val:SortIOInt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTCell{}, inj{SortTCell{}, SortKItem{}} (Val:SortTCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortValues{}, inj{SortValues{}, SortKItem{}} (Val:SortValues{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIds{}, inj{SortIds{}, SortKItem{}} (Val:SortIds{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortPrintable{}, inj{SortPrintable{}, SortKItem{}} (Val:SortPrintable{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBExp{}, inj{SortBExp{}, SortKItem{}} (Val:SortBExp{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStatement{}, inj{SortStatement{}, SortKItem{}} (Val:SortStatement{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKotlinFunCall{}, inj{SortKotlinFunCall{}, SortKItem{}} (Val:SortKotlinFunCall{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortParamsCellOpt{}, inj{SortParamsCellOpt{}, SortKItem{}} (Val:SortParamsCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortGeneratedCounterCellOpt{}, inj{SortGeneratedCounterCellOpt{}, SortKItem{}} (Val:SortGeneratedCounterCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTempCellOpt{}, inj{SortTempCellOpt{}, SortKItem{}} (Val:SortTempCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortFunThreadCell{}, inj{SortFunThreadCell{}, SortKItem{}} (Val:SortFunThreadCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortSkip{}, inj{SortSkip{}, SortKItem{}} (Val:SortSkip{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortParamsCell{}, inj{SortParamsCell{}, SortKItem{}} (Val:SortParamsCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortFunReturn{}, inj{SortFunReturn{}, SortKItem{}} (Val:SortFunReturn{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIdCellOpt{}, inj{SortIdCellOpt{}, SortKItem{}} (Val:SortIdCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortGeneratedCounterCell{}, inj{SortGeneratedCounterCell{}, SortKItem{}} (Val:SortGeneratedCounterCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortId{}, inj{SortId{}, SortKItem{}} (Val:SortId{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStream{}, inj{SortStream{}, SortKItem{}} (Val:SortStream{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortCell{}, inj{SortCell{}, SortKItem{}} (Val:SortCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBool{}, inj{SortBool{}, SortKItem{}} (Val:SortBool{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKCell{}, inj{SortKCell{}, SortKItem{}} (Val:SortKCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStoreCell{}, inj{SortStoreCell{}, SortKItem{}} (Val:SortStoreCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIOFile{}, inj{SortIOFile{}, SortKItem{}} (Val:SortIOFile{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStoreCellOpt{}, inj{SortStoreCellOpt{}, SortKItem{}} (Val:SortStoreCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortVariableType{}, inj{SortVariableType{}, SortKItem{}} (Val:SortVariableType{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKResult{}, inj{SortKResult{}, SortKItem{}} (Val:SortKResult{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortAssigner{}, inj{SortAssigner{}, SortKItem{}} (Val:SortAssigner{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortElseIfStatement{}, inj{SortElseIfStatement{}, SortKItem{}} (Val:SortElseIfStatement{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortMap{}, inj{SortMap{}, SortKItem{}} (Val:SortMap{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortLocalResId{}, inj{SortLocalResId{}, SortKItem{}} (Val:SortLocalResId{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortParams{}, inj{SortParams{}, SortKItem{}} (Val:SortParams{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortEnvCell{}, inj{SortEnvCell{}, SortKItem{}} (Val:SortEnvCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortFunctionCellOpt{}, inj{SortFunctionCellOpt{}, SortKItem{}} (Val:SortFunctionCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortLocalEnvCell{}, inj{SortLocalEnvCell{}, SortKItem{}} (Val:SortLocalEnvCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortMultsCellOpt{}, inj{SortMultsCellOpt{}, SortKItem{}} (Val:SortMultsCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortScopeCellOpt{}, inj{SortScopeCellOpt{}, SortKItem{}} (Val:SortScopeCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortLocCell{}, inj{SortLocCell{}, SortKItem{}} (Val:SortLocCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortLocalResInt{}, inj{SortLocalResInt{}, SortKItem{}} (Val:SortLocalResInt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKCellOpt{}, inj{SortKCellOpt{}, SortKItem{}} (Val:SortKCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortFunctionMain{}, inj{SortFunctionMain{}, SortKItem{}} (Val:SortFunctionMain{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortFunctionCellFragment{}, inj{SortFunctionCellFragment{}, SortKItem{}} (Val:SortFunctionCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortFunctionCell{}, inj{SortFunctionCell{}, SortKItem{}} (Val:SortFunctionCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortUniqueIdAssigner{}, inj{SortUniqueIdAssigner{}, SortKItem{}} (Val:SortUniqueIdAssigner{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKotIntVarAssign{}, inj{SortKotIntVarAssign{}, SortKItem{}} (Val:SortKotIntVarAssign{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortInt{}, inj{SortInt{}, SortKItem{}} (Val:SortInt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortFloat{}, inj{SortFloat{}, SortKItem{}} (Val:SortFloat{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTempCell{}, inj{SortTempCell{}, SortKItem{}} (Val:SortTempCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortGeneratedTopCell{}, inj{SortGeneratedTopCell{}, SortKItem{}} (Val:SortGeneratedTopCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortFunThreadCellFragment{}, inj{SortFunThreadCellFragment{}, SortKItem{}} (Val:SortFunThreadCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortEnvCellOpt{}, inj{SortEnvCellOpt{}, SortKItem{}} (Val:SortEnvCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKotlinFun{}, inj{SortKotlinFun{}, SortKItem{}} (Val:SortKotlinFun{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBlock{}, inj{SortBlock{}, SortKItem{}} (Val:SortBlock{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortAExps{}, inj{SortAExps{}, SortKItem{}} (Val:SortAExps{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortSet{}, inj{SortSet{}, SortKItem{}} (Val:SortSet{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortScopeCell{}, inj{SortScopeCell{}, SortKItem{}} (Val:SortScopeCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortLocalEnvCellOpt{}, inj{SortLocalEnvCellOpt{}, SortKItem{}} (Val:SortLocalEnvCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIOString{}, inj{SortIOString{}, SortKItem{}} (Val:SortIOString{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortDeclaredVar{}, inj{SortDeclaredVar{}, SortKItem{}} (Val:SortDeclaredVar{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortGeneratedTopCellFragment{}, inj{SortGeneratedTopCellFragment{}, SortKItem{}} (Val:SortGeneratedTopCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortMainKotlinProg{}, inj{SortMainKotlinProg{}, SortKItem{}} (Val:SortMainKotlinProg{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIOError{}, inj{SortIOError{}, SortKItem{}} (Val:SortIOError{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortLocCellOpt{}, inj{SortLocCellOpt{}, SortKItem{}} (Val:SortLocCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortLocalResString{}, inj{SortLocalResString{}, SortKItem{}} (Val:SortLocalResString{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortAExp{}, inj{SortAExp{}, SortKItem{}} (Val:SortAExp{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortMultsCell{}, inj{SortMultsCell{}, SortKItem{}} (Val:SortMultsCell{})), \bottom{SortKItem{}}())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortAExpMod{}} (\exists{SortAExpMod{}} (X0:SortId{}, Lbl'UndsPlusPlusUnds'KT-SYNTAX'Unds'AExpMod'Unds'Id{}(X0:SortId{})), \or{SortAExpMod{}} (\exists{SortAExpMod{}} (X0:SortId{}, Lbl'Unds'--'Unds'KT-SYNTAX'Unds'AExpMod'Unds'Id{}(X0:SortId{})), \bottom{SortAExpMod{}}())) [constructor{}()] // no junk
  axiom{} \bottom{SortList{}}() [constructor{}()] // no junk
  axiom{} \or{SortIdCell{}} (\exists{SortIdCell{}} (X0:SortK{}, Lbl'-LT-'id'-GT-'{}(X0:SortK{})), \bottom{SortIdCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortOutCellOpt{}} (LblnoOutCell{}(), \or{SortOutCellOpt{}} (\exists{SortOutCellOpt{}} (Val:SortOutCell{}, inj{SortOutCell{}, SortOutCellOpt{}} (Val:SortOutCell{})), \bottom{SortOutCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortTCellOpt{}} (LblnoTCell{}(), \or{SortTCellOpt{}} (\exists{SortTCellOpt{}} (Val:SortTCell{}, inj{SortTCell{}, SortTCellOpt{}} (Val:SortTCell{})), \bottom{SortTCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortOutCell{}} (\exists{SortOutCell{}} (X0:SortList{}, Lbl'-LT-'out'-GT-'{}(X0:SortList{})), \bottom{SortOutCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortTCellFragment{}} (\exists{SortTCellFragment{}} (X0:SortKCellOpt{}, \exists{SortTCellFragment{}} (X1:SortFunctionCellOpt{}, \exists{SortTCellFragment{}} (X2:SortEnvCellOpt{}, \exists{SortTCellFragment{}} (X3:SortStoreCellOpt{}, \exists{SortTCellFragment{}} (X4:SortMultsCellOpt{}, \exists{SortTCellFragment{}} (X5:SortOutCellOpt{}, \exists{SortTCellFragment{}} (X6:SortLocCellOpt{}, Lbl'-LT-'T'-GT-'-fragment{}(X0:SortKCellOpt{}, X1:SortFunctionCellOpt{}, X2:SortEnvCellOpt{}, X3:SortStoreCellOpt{}, X4:SortMultsCellOpt{}, X5:SortOutCellOpt{}, X6:SortLocCellOpt{})))))))), \bottom{SortTCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortLocalFun{}} (\exists{SortLocalFun{}} (X0:SortId{}, \exists{SortLocalFun{}} (X1:SortStatement{}, Lbllocal'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalFun'Unds'Id'Unds'Statement{}(X0:SortId{}, X1:SortStatement{}))), \bottom{SortLocalFun{}}()) [constructor{}()] // no junk
  axiom{} \or{SortString{}} (\top{SortString{}}(), \bottom{SortString{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortKConfigVar{}} (\top{SortKConfigVar{}}(), \bottom{SortKConfigVar{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortIOInt{}} (\exists{SortIOInt{}} (Val:SortInt{}, inj{SortInt{}, SortIOInt{}} (Val:SortInt{})), \or{SortIOInt{}} (\exists{SortIOInt{}} (Val:SortIOError{}, inj{SortIOError{}, SortIOInt{}} (Val:SortIOError{})), \bottom{SortIOInt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortTCell{}} (\exists{SortTCell{}} (X0:SortKCell{}, \exists{SortTCell{}} (X1:SortFunctionCell{}, \exists{SortTCell{}} (X2:SortEnvCell{}, \exists{SortTCell{}} (X3:SortStoreCell{}, \exists{SortTCell{}} (X4:SortMultsCell{}, \exists{SortTCell{}} (X5:SortOutCell{}, \exists{SortTCell{}} (X6:SortLocCell{}, Lbl'-LT-'T'-GT-'{}(X0:SortKCell{}, X1:SortFunctionCell{}, X2:SortEnvCell{}, X3:SortStoreCell{}, X4:SortMultsCell{}, X5:SortOutCell{}, X6:SortLocCell{})))))))), \bottom{SortTCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortValues{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Values'Unds'Int'Unds'Values'QuotRBraUnds'Values{}(), \or{SortValues{}} (\exists{SortValues{}} (X0:SortInt{}, \exists{SortValues{}} (X1:SortValues{}, Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Values'Unds'Int'Unds'Values{}(X0:SortInt{}, X1:SortValues{}))), \bottom{SortValues{}}())) [constructor{}()] // no junk
  axiom{} \or{SortIds{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}(), \or{SortIds{}} (\exists{SortIds{}} (X0:SortId{}, \exists{SortIds{}} (X1:SortIds{}, Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(X0:SortId{}, X1:SortIds{}))), \bottom{SortIds{}}())) [constructor{}()] // no junk
  axiom{} \or{SortPrintable{}} (\exists{SortPrintable{}} (Val:SortString{}, inj{SortString{}, SortPrintable{}} (Val:SortString{})), \or{SortPrintable{}} (\exists{SortPrintable{}} (Val:SortInt{}, inj{SortInt{}, SortPrintable{}} (Val:SortInt{})), \bottom{SortPrintable{}}())) [constructor{}()] // no junk
  axiom{} \or{SortBExp{}} (\exists{SortBExp{}} (X0:SortAExp{}, \exists{SortBExp{}} (X1:SortAExp{}, Lbl'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \or{SortBExp{}} (\exists{SortBExp{}} (X0:SortAExp{}, \exists{SortBExp{}} (X1:SortAExp{}, Lbl'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \or{SortBExp{}} (\exists{SortBExp{}} (X0:SortAExp{}, \exists{SortBExp{}} (X1:SortAExp{}, Lbl'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \or{SortBExp{}} (\exists{SortBExp{}} (X0:SortAExp{}, \exists{SortBExp{}} (X1:SortAExp{}, Lbl'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \or{SortBExp{}} (\exists{SortBExp{}} (X0:SortAExp{}, \exists{SortBExp{}} (X1:SortAExp{}, Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \or{SortBExp{}} (\exists{SortBExp{}} (Val:SortBool{}, inj{SortBool{}, SortBExp{}} (Val:SortBool{})), \bottom{SortBExp{}}())))))) [constructor{}()] // no junk
  axiom{} \or{SortStatement{}} (\exists{SortStatement{}} (X0:SortBExp{}, \exists{SortStatement{}} (X1:SortBlock{}, \exists{SortStatement{}} (X2:SortBlock{}, Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{})))), \or{SortStatement{}} (\exists{SortStatement{}} (X0:SortStatement{}, \exists{SortStatement{}} (X1:SortStatement{}, Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(X0:SortStatement{}, X1:SortStatement{}))), \or{SortStatement{}} (\exists{SortStatement{}} (X0:SortAssigner{}, \exists{SortStatement{}} (X1:SortBExp{}, \exists{SortStatement{}} (X2:SortAExpMod{}, \exists{SortStatement{}} (X3:SortBlock{}, Lblfor'LParUndsSClnUndsSClnUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Assigner'Unds'BExp'Unds'AExpMod'Unds'Block{}(X0:SortAssigner{}, X1:SortBExp{}, X2:SortAExpMod{}, X3:SortBlock{}))))), \or{SortStatement{}} (\exists{SortStatement{}} (X0:SortBExp{}, \exists{SortStatement{}} (X1:SortBlock{}, Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}))), \or{SortStatement{}} (\exists{SortStatement{}} (X0:SortBExp{}, \exists{SortStatement{}} (X1:SortBlock{}, \exists{SortStatement{}} (X2:SortElseIfStatement{}, Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortElseIfStatement{})))), \or{SortStatement{}} (\exists{SortStatement{}} (X0:SortAExps{}, Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(X0:SortAExps{})), \or{SortStatement{}} (\exists{SortStatement{}} (X0:SortFunReturn{}, Lblreturn'UndsUnds'KT-SYNTAX'Unds'Statement'Unds'FunReturn{}(X0:SortFunReturn{})), \or{SortStatement{}} (\exists{SortStatement{}} (X0:SortBExp{}, \exists{SortStatement{}} (X1:SortBlock{}, Lblwhile'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}))), \or{SortStatement{}} (\exists{SortStatement{}} (Val:SortAExpMod{}, inj{SortAExpMod{}, SortStatement{}} (Val:SortAExpMod{})), \or{SortStatement{}} (\exists{SortStatement{}} (Val:SortString{}, inj{SortString{}, SortStatement{}} (Val:SortString{})), \or{SortStatement{}} (\exists{SortStatement{}} (Val:SortPrintable{}, inj{SortPrintable{}, SortStatement{}} (Val:SortPrintable{})), \or{SortStatement{}} (\exists{SortStatement{}} (Val:SortKotlinFunCall{}, inj{SortKotlinFunCall{}, SortStatement{}} (Val:SortKotlinFunCall{})), \or{SortStatement{}} (\exists{SortStatement{}} (Val:SortSkip{}, inj{SortSkip{}, SortStatement{}} (Val:SortSkip{})), \or{SortStatement{}} (\exists{SortStatement{}} (Val:SortId{}, inj{SortId{}, SortStatement{}} (Val:SortId{})), \or{SortStatement{}} (\exists{SortStatement{}} (Val:SortAssigner{}, inj{SortAssigner{}, SortStatement{}} (Val:SortAssigner{})), \or{SortStatement{}} (\exists{SortStatement{}} (Val:SortLocalResId{}, inj{SortLocalResId{}, SortStatement{}} (Val:SortLocalResId{})), \or{SortStatement{}} (\exists{SortStatement{}} (Val:SortLocalResInt{}, inj{SortLocalResInt{}, SortStatement{}} (Val:SortLocalResInt{})), \or{SortStatement{}} (\exists{SortStatement{}} (Val:SortUniqueIdAssigner{}, inj{SortUniqueIdAssigner{}, SortStatement{}} (Val:SortUniqueIdAssigner{})), \or{SortStatement{}} (\exists{SortStatement{}} (Val:SortKotIntVarAssign{}, inj{SortKotIntVarAssign{}, SortStatement{}} (Val:SortKotIntVarAssign{})), \or{SortStatement{}} (\exists{SortStatement{}} (Val:SortInt{}, inj{SortInt{}, SortStatement{}} (Val:SortInt{})), \or{SortStatement{}} (\exists{SortStatement{}} (Val:SortKotlinFun{}, inj{SortKotlinFun{}, SortStatement{}} (Val:SortKotlinFun{})), \or{SortStatement{}} (\exists{SortStatement{}} (Val:SortLocalResString{}, inj{SortLocalResString{}, SortStatement{}} (Val:SortLocalResString{})), \or{SortStatement{}} (\exists{SortStatement{}} (Val:SortAExp{}, inj{SortAExp{}, SortStatement{}} (Val:SortAExp{})), \bottom{SortStatement{}}()))))))))))))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortKotlinFunCall{}} (\exists{SortKotlinFunCall{}} (X0:SortId{}, \exists{SortKotlinFunCall{}} (X1:SortValues{}, Lbl'UndsLParUndsRParSClnUnds'KT-SYNTAX'Unds'KotlinFunCall'Unds'Id'Unds'Values{}(X0:SortId{}, X1:SortValues{}))), \bottom{SortKotlinFunCall{}}()) [constructor{}()] // no junk
  axiom{} \or{SortParamsCellOpt{}} (LblnoParamsCell{}(), \or{SortParamsCellOpt{}} (\exists{SortParamsCellOpt{}} (Val:SortParamsCell{}, inj{SortParamsCell{}, SortParamsCellOpt{}} (Val:SortParamsCell{})), \bottom{SortParamsCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedCounterCellOpt{}} (LblnoGeneratedCounterCell{}(), \or{SortGeneratedCounterCellOpt{}} (\exists{SortGeneratedCounterCellOpt{}} (Val:SortGeneratedCounterCell{}, inj{SortGeneratedCounterCell{}, SortGeneratedCounterCellOpt{}} (Val:SortGeneratedCounterCell{})), \bottom{SortGeneratedCounterCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortTempCellOpt{}} (LblnoTempCell{}(), \or{SortTempCellOpt{}} (\exists{SortTempCellOpt{}} (Val:SortTempCell{}, inj{SortTempCell{}, SortTempCellOpt{}} (Val:SortTempCell{})), \bottom{SortTempCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortFunThreadCell{}} (\exists{SortFunThreadCell{}} (X0:SortIdCell{}, \exists{SortFunThreadCell{}} (X1:SortScopeCell{}, \exists{SortFunThreadCell{}} (X2:SortParamsCell{}, \exists{SortFunThreadCell{}} (X3:SortTempCell{}, \exists{SortFunThreadCell{}} (X4:SortLocalEnvCell{}, Lbl'-LT-'funThread'-GT-'{}(X0:SortIdCell{}, X1:SortScopeCell{}, X2:SortParamsCell{}, X3:SortTempCell{}, X4:SortLocalEnvCell{})))))), \bottom{SortFunThreadCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortSkip{}} (LblSkip'Unds'KT-SYNTAX'Unds'Skip{}(), \bottom{SortSkip{}}()) [constructor{}()] // no junk
  axiom{} \or{SortParamsCell{}} (\exists{SortParamsCell{}} (X0:SortK{}, Lbl'-LT-'params'-GT-'{}(X0:SortK{})), \bottom{SortParamsCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortFunReturn{}} (\exists{SortFunReturn{}} (Val:SortString{}, inj{SortString{}, SortFunReturn{}} (Val:SortString{})), \or{SortFunReturn{}} (\exists{SortFunReturn{}} (Val:SortPrintable{}, inj{SortPrintable{}, SortFunReturn{}} (Val:SortPrintable{})), \or{SortFunReturn{}} (\exists{SortFunReturn{}} (Val:SortId{}, inj{SortId{}, SortFunReturn{}} (Val:SortId{})), \or{SortFunReturn{}} (\exists{SortFunReturn{}} (Val:SortInt{}, inj{SortInt{}, SortFunReturn{}} (Val:SortInt{})), \or{SortFunReturn{}} (\exists{SortFunReturn{}} (Val:SortAExp{}, inj{SortAExp{}, SortFunReturn{}} (Val:SortAExp{})), \bottom{SortFunReturn{}}()))))) [constructor{}()] // no junk
  axiom{} \or{SortIdCellOpt{}} (LblnoIdCell{}(), \or{SortIdCellOpt{}} (\exists{SortIdCellOpt{}} (Val:SortIdCell{}, inj{SortIdCell{}, SortIdCellOpt{}} (Val:SortIdCell{})), \bottom{SortIdCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedCounterCell{}} (\exists{SortGeneratedCounterCell{}} (X0:SortInt{}, Lbl'-LT-'generatedCounter'-GT-'{}(X0:SortInt{})), \bottom{SortGeneratedCounterCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortId{}} (\top{SortId{}}(), \bottom{SortId{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortStream{}} (\exists{SortStream{}} (X0:SortK{}, Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(X0:SortK{})), \bottom{SortStream{}}()) [constructor{}()] // no junk
  axiom{} \or{SortCell{}} (\exists{SortCell{}} (Val:SortIdCell{}, inj{SortIdCell{}, SortCell{}} (Val:SortIdCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortOutCell{}, inj{SortOutCell{}, SortCell{}} (Val:SortOutCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortTCell{}, inj{SortTCell{}, SortCell{}} (Val:SortTCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortFunThreadCell{}, inj{SortFunThreadCell{}, SortCell{}} (Val:SortFunThreadCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortParamsCell{}, inj{SortParamsCell{}, SortCell{}} (Val:SortParamsCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortKCell{}, inj{SortKCell{}, SortCell{}} (Val:SortKCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortStoreCell{}, inj{SortStoreCell{}, SortCell{}} (Val:SortStoreCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortEnvCell{}, inj{SortEnvCell{}, SortCell{}} (Val:SortEnvCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortLocalEnvCell{}, inj{SortLocalEnvCell{}, SortCell{}} (Val:SortLocalEnvCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortLocCell{}, inj{SortLocCell{}, SortCell{}} (Val:SortLocCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortFunctionCell{}, inj{SortFunctionCell{}, SortCell{}} (Val:SortFunctionCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortTempCell{}, inj{SortTempCell{}, SortCell{}} (Val:SortTempCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortScopeCell{}, inj{SortScopeCell{}, SortCell{}} (Val:SortScopeCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortMultsCell{}, inj{SortMultsCell{}, SortCell{}} (Val:SortMultsCell{})), \bottom{SortCell{}}())))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortBool{}} (\top{SortBool{}}(), \bottom{SortBool{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortKCell{}} (\exists{SortKCell{}} (X0:SortK{}, Lbl'-LT-'k'-GT-'{}(X0:SortK{})), \bottom{SortKCell{}}()) [constructor{}()] // no junk
  axiom{} \bottom{SortK{}}() [constructor{}()] // no junk
  axiom{} \or{SortStoreCell{}} (\exists{SortStoreCell{}} (X0:SortMap{}, Lbl'-LT-'store'-GT-'{}(X0:SortMap{})), \bottom{SortStoreCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortIOFile{}} (\exists{SortIOFile{}} (X0:SortString{}, \exists{SortIOFile{}} (X1:SortInt{}, Lbl'Hash'tempFile{}(X0:SortString{}, X1:SortInt{}))), \or{SortIOFile{}} (\exists{SortIOFile{}} (Val:SortIOError{}, inj{SortIOError{}, SortIOFile{}} (Val:SortIOError{})), \bottom{SortIOFile{}}())) [constructor{}()] // no junk
  axiom{} \or{SortStoreCellOpt{}} (LblnoStoreCell{}(), \or{SortStoreCellOpt{}} (\exists{SortStoreCellOpt{}} (Val:SortStoreCell{}, inj{SortStoreCell{}, SortStoreCellOpt{}} (Val:SortStoreCell{})), \bottom{SortStoreCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortVariableType{}} (Lblval'Unds'KT-SYNTAX'Unds'VariableType{}(), \or{SortVariableType{}} (Lblvar'Unds'KT-SYNTAX'Unds'VariableType{}(), \bottom{SortVariableType{}}())) [constructor{}()] // no junk
  axiom{} \or{SortKResult{}} (\exists{SortKResult{}} (Val:SortString{}, inj{SortString{}, SortKResult{}} (Val:SortString{})), \or{SortKResult{}} (\exists{SortKResult{}} (Val:SortBool{}, inj{SortBool{}, SortKResult{}} (Val:SortBool{})), \or{SortKResult{}} (\exists{SortKResult{}} (Val:SortInt{}, inj{SortInt{}, SortKResult{}} (Val:SortInt{})), \bottom{SortKResult{}}()))) [constructor{}()] // no junk
  axiom{} \or{SortAssigner{}} (\exists{SortAssigner{}} (X0:SortDeclaredVar{}, \exists{SortAssigner{}} (X1:SortAExp{}, Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(X0:SortDeclaredVar{}, X1:SortAExp{}))), \or{SortAssigner{}} (\exists{SortAssigner{}} (Val:SortUniqueIdAssigner{}, inj{SortUniqueIdAssigner{}, SortAssigner{}} (Val:SortUniqueIdAssigner{})), \bottom{SortAssigner{}}())) [constructor{}()] // no junk
  axiom{} \or{SortElseIfStatement{}} (\exists{SortElseIfStatement{}} (X0:SortBlock{}, Lblelse'UndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'Block{}(X0:SortBlock{})), \or{SortElseIfStatement{}} (\exists{SortElseIfStatement{}} (X0:SortBExp{}, \exists{SortElseIfStatement{}} (X1:SortBlock{}, Lblelseif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}))), \or{SortElseIfStatement{}} (\exists{SortElseIfStatement{}} (X0:SortBExp{}, \exists{SortElseIfStatement{}} (X1:SortBlock{}, \exists{SortElseIfStatement{}} (X2:SortElseIfStatement{}, Lblelseif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortElseIfStatement{})))), \bottom{SortElseIfStatement{}}()))) [constructor{}()] // no junk
  axiom{} \bottom{SortMap{}}() [constructor{}()] // no junk
  axiom{} \or{SortLocalResId{}} (\exists{SortLocalResId{}} (X0:SortId{}, \exists{SortLocalResId{}} (X1:SortId{}, LbllocalResId'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResId'Unds'Id'Unds'Id{}(X0:SortId{}, X1:SortId{}))), \bottom{SortLocalResId{}}()) [constructor{}()] // no junk
  axiom{} \or{SortParams{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Params'Unds'Id'Unds'Params'QuotRBraUnds'Params{}(), \or{SortParams{}} (\exists{SortParams{}} (X0:SortId{}, \exists{SortParams{}} (X1:SortParams{}, Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Params'Unds'Id'Unds'Params{}(X0:SortId{}, X1:SortParams{}))), \bottom{SortParams{}}())) [constructor{}()] // no junk
  axiom{} \or{SortEnvCell{}} (\exists{SortEnvCell{}} (X0:SortMap{}, Lbl'-LT-'env'-GT-'{}(X0:SortMap{})), \bottom{SortEnvCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortFunctionCellOpt{}} (LblnoFunctionCell{}(), \or{SortFunctionCellOpt{}} (\exists{SortFunctionCellOpt{}} (Val:SortFunctionCell{}, inj{SortFunctionCell{}, SortFunctionCellOpt{}} (Val:SortFunctionCell{})), \bottom{SortFunctionCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortLocalEnvCell{}} (\exists{SortLocalEnvCell{}} (X0:SortMap{}, Lbl'-LT-'localEnv'-GT-'{}(X0:SortMap{})), \bottom{SortLocalEnvCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortMultsCellOpt{}} (LblnoMultsCell{}(), \or{SortMultsCellOpt{}} (\exists{SortMultsCellOpt{}} (Val:SortMultsCell{}, inj{SortMultsCell{}, SortMultsCellOpt{}} (Val:SortMultsCell{})), \bottom{SortMultsCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortScopeCellOpt{}} (LblnoScopeCell{}(), \or{SortScopeCellOpt{}} (\exists{SortScopeCellOpt{}} (Val:SortScopeCell{}, inj{SortScopeCell{}, SortScopeCellOpt{}} (Val:SortScopeCell{})), \bottom{SortScopeCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortLocCell{}} (\exists{SortLocCell{}} (X0:SortInt{}, Lbl'-LT-'loc'-GT-'{}(X0:SortInt{})), \bottom{SortLocCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortLocalResInt{}} (\exists{SortLocalResInt{}} (X0:SortId{}, \exists{SortLocalResInt{}} (X1:SortInt{}, LbllocalResInt'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResInt'Unds'Id'Unds'Int{}(X0:SortId{}, X1:SortInt{}))), \bottom{SortLocalResInt{}}()) [constructor{}()] // no junk
  axiom{} \or{SortKCellOpt{}} (LblnoKCell{}(), \or{SortKCellOpt{}} (\exists{SortKCellOpt{}} (Val:SortKCell{}, inj{SortKCell{}, SortKCellOpt{}} (Val:SortKCell{})), \bottom{SortKCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortFunctionMain{}} (\exists{SortFunctionMain{}} (X0:SortBlock{}, Lblfunmain'LParRParLBraUndsRBraUnds'KT-SYNTAX'Unds'FunctionMain'Unds'Block{}(X0:SortBlock{})), \bottom{SortFunctionMain{}}()) [constructor{}()] // no junk
  axiom{} \or{SortFunctionCellFragment{}} (\exists{SortFunctionCellFragment{}} (X0:SortFunThreadCellMap{}, Lbl'-LT-'function'-GT-'-fragment{}(X0:SortFunThreadCellMap{})), \bottom{SortFunctionCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortFunctionCell{}} (\exists{SortFunctionCell{}} (X0:SortFunThreadCellMap{}, Lbl'-LT-'function'-GT-'{}(X0:SortFunThreadCellMap{})), \bottom{SortFunctionCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortUniqueIdAssigner{}} (\exists{SortUniqueIdAssigner{}} (X0:SortId{}, \exists{SortUniqueIdAssigner{}} (X1:SortAExp{}, Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp{}(X0:SortId{}, X1:SortAExp{}))), \bottom{SortUniqueIdAssigner{}}()) [constructor{}()] // no junk
  axiom{} \or{SortKotIntVarAssign{}} (\exists{SortKotIntVarAssign{}} (X0:SortVariableType{}, \exists{SortKotIntVarAssign{}} (X1:SortId{}, Lbl'UndsUndsColn'Int'Unds'KT-SYNTAX'Unds'KotIntVarAssign'Unds'VariableType'Unds'Id{}(X0:SortVariableType{}, X1:SortId{}))), \bottom{SortKotIntVarAssign{}}()) [constructor{}()] // no junk
  axiom{} \or{SortInt{}} (\top{SortInt{}}(), \bottom{SortInt{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortFloat{}} (\top{SortFloat{}}(), \bottom{SortFloat{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortTempCell{}} (\exists{SortTempCell{}} (X0:SortK{}, Lbl'-LT-'temp'-GT-'{}(X0:SortK{})), \bottom{SortTempCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedTopCell{}} (\exists{SortGeneratedTopCell{}} (X0:SortTCell{}, \exists{SortGeneratedTopCell{}} (X1:SortGeneratedCounterCell{}, Lbl'-LT-'generatedTop'-GT-'{}(X0:SortTCell{}, X1:SortGeneratedCounterCell{}))), \bottom{SortGeneratedTopCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortFunThreadCellFragment{}} (\exists{SortFunThreadCellFragment{}} (X0:SortIdCellOpt{}, \exists{SortFunThreadCellFragment{}} (X1:SortScopeCellOpt{}, \exists{SortFunThreadCellFragment{}} (X2:SortParamsCellOpt{}, \exists{SortFunThreadCellFragment{}} (X3:SortTempCellOpt{}, \exists{SortFunThreadCellFragment{}} (X4:SortLocalEnvCellOpt{}, Lbl'-LT-'funThread'-GT-'-fragment{}(X0:SortIdCellOpt{}, X1:SortScopeCellOpt{}, X2:SortParamsCellOpt{}, X3:SortTempCellOpt{}, X4:SortLocalEnvCellOpt{})))))), \bottom{SortFunThreadCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortEnvCellOpt{}} (LblnoEnvCell{}(), \or{SortEnvCellOpt{}} (\exists{SortEnvCellOpt{}} (Val:SortEnvCell{}, inj{SortEnvCell{}, SortEnvCellOpt{}} (Val:SortEnvCell{})), \bottom{SortEnvCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortKotlinFun{}} (\exists{SortKotlinFun{}} (X0:SortId{}, \exists{SortKotlinFun{}} (X1:SortParams{}, \exists{SortKotlinFun{}} (X2:SortFunReturnType{}, \exists{SortKotlinFun{}} (X3:SortBlock{}, Lblfun'UndsLParUndsRParColnUndsUndsUnds'KT-SYNTAX'Unds'KotlinFun'Unds'Id'Unds'Params'Unds'FunReturnType'Unds'Block{}(X0:SortId{}, X1:SortParams{}, X2:SortFunReturnType{}, X3:SortBlock{}))))), \bottom{SortKotlinFun{}}()) [constructor{}()] // no junk
  axiom{} \or{SortBlock{}} (\exists{SortBlock{}} (X0:SortStatement{}, Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(X0:SortStatement{})), \or{SortBlock{}} (\exists{SortBlock{}} (Val:SortAExpMod{}, inj{SortAExpMod{}, SortBlock{}} (Val:SortAExpMod{})), \or{SortBlock{}} (\exists{SortBlock{}} (Val:SortString{}, inj{SortString{}, SortBlock{}} (Val:SortString{})), \or{SortBlock{}} (\exists{SortBlock{}} (Val:SortPrintable{}, inj{SortPrintable{}, SortBlock{}} (Val:SortPrintable{})), \or{SortBlock{}} (\exists{SortBlock{}} (Val:SortStatement{}, inj{SortStatement{}, SortBlock{}} (Val:SortStatement{})), \or{SortBlock{}} (\exists{SortBlock{}} (Val:SortKotlinFunCall{}, inj{SortKotlinFunCall{}, SortBlock{}} (Val:SortKotlinFunCall{})), \or{SortBlock{}} (\exists{SortBlock{}} (Val:SortSkip{}, inj{SortSkip{}, SortBlock{}} (Val:SortSkip{})), \or{SortBlock{}} (\exists{SortBlock{}} (Val:SortId{}, inj{SortId{}, SortBlock{}} (Val:SortId{})), \or{SortBlock{}} (\exists{SortBlock{}} (Val:SortAssigner{}, inj{SortAssigner{}, SortBlock{}} (Val:SortAssigner{})), \or{SortBlock{}} (\exists{SortBlock{}} (Val:SortLocalResId{}, inj{SortLocalResId{}, SortBlock{}} (Val:SortLocalResId{})), \or{SortBlock{}} (\exists{SortBlock{}} (Val:SortLocalResInt{}, inj{SortLocalResInt{}, SortBlock{}} (Val:SortLocalResInt{})), \or{SortBlock{}} (\exists{SortBlock{}} (Val:SortUniqueIdAssigner{}, inj{SortUniqueIdAssigner{}, SortBlock{}} (Val:SortUniqueIdAssigner{})), \or{SortBlock{}} (\exists{SortBlock{}} (Val:SortKotIntVarAssign{}, inj{SortKotIntVarAssign{}, SortBlock{}} (Val:SortKotIntVarAssign{})), \or{SortBlock{}} (\exists{SortBlock{}} (Val:SortInt{}, inj{SortInt{}, SortBlock{}} (Val:SortInt{})), \or{SortBlock{}} (\exists{SortBlock{}} (Val:SortKotlinFun{}, inj{SortKotlinFun{}, SortBlock{}} (Val:SortKotlinFun{})), \or{SortBlock{}} (\exists{SortBlock{}} (Val:SortLocalResString{}, inj{SortLocalResString{}, SortBlock{}} (Val:SortLocalResString{})), \or{SortBlock{}} (\exists{SortBlock{}} (Val:SortAExp{}, inj{SortAExp{}, SortBlock{}} (Val:SortAExp{})), \bottom{SortBlock{}}()))))))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortAExps{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps'QuotRBraUnds'AExps{}(), \or{SortAExps{}} (\exists{SortAExps{}} (X0:SortAExp{}, \exists{SortAExps{}} (X1:SortAExps{}, Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(X0:SortAExp{}, X1:SortAExps{}))), \bottom{SortAExps{}}())) [constructor{}()] // no junk
  axiom{} \bottom{SortSet{}}() [constructor{}()] // no junk
  axiom{} \or{SortScopeCell{}} (\exists{SortScopeCell{}} (X0:SortK{}, Lbl'-LT-'scope'-GT-'{}(X0:SortK{})), \bottom{SortScopeCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortLocalEnvCellOpt{}} (LblnoLocalEnvCell{}(), \or{SortLocalEnvCellOpt{}} (\exists{SortLocalEnvCellOpt{}} (Val:SortLocalEnvCell{}, inj{SortLocalEnvCell{}, SortLocalEnvCellOpt{}} (Val:SortLocalEnvCell{})), \bottom{SortLocalEnvCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortIOString{}} (\exists{SortIOString{}} (Val:SortString{}, inj{SortString{}, SortIOString{}} (Val:SortString{})), \or{SortIOString{}} (\exists{SortIOString{}} (Val:SortIOError{}, inj{SortIOError{}, SortIOString{}} (Val:SortIOError{})), \bottom{SortIOString{}}())) [constructor{}()] // no junk
  axiom{} \or{SortDeclaredVar{}} (\exists{SortDeclaredVar{}} (X0:SortVariableType{}, \exists{SortDeclaredVar{}} (X1:SortIds{}, Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(X0:SortVariableType{}, X1:SortIds{}))), \bottom{SortDeclaredVar{}}()) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedTopCellFragment{}} (\exists{SortGeneratedTopCellFragment{}} (X0:SortTCellOpt{}, \exists{SortGeneratedTopCellFragment{}} (X1:SortGeneratedCounterCellOpt{}, Lbl'-LT-'generatedTop'-GT-'-fragment{}(X0:SortTCellOpt{}, X1:SortGeneratedCounterCellOpt{}))), \bottom{SortGeneratedTopCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortMainKotlinProg{}} (\exists{SortMainKotlinProg{}} (Val:SortFunctionMain{}, inj{SortFunctionMain{}, SortMainKotlinProg{}} (Val:SortFunctionMain{})), \bottom{SortMainKotlinProg{}}()) [constructor{}()] // no junk
  axiom{} \or{SortIOError{}} (Lbl'Hash'E2BIG{}(), \or{SortIOError{}} (Lbl'Hash'EACCES{}(), \or{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), \or{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), \or{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), \or{SortIOError{}} (Lbl'Hash'EAGAIN{}(), \or{SortIOError{}} (Lbl'Hash'EALREADY{}(), \or{SortIOError{}} (Lbl'Hash'EBADF{}(), \or{SortIOError{}} (Lbl'Hash'EBUSY{}(), \or{SortIOError{}} (Lbl'Hash'ECHILD{}(), \or{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), \or{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), \or{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), \or{SortIOError{}} (Lbl'Hash'EDEADLK{}(), \or{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), \or{SortIOError{}} (Lbl'Hash'EDOM{}(), \or{SortIOError{}} (Lbl'Hash'EEXIST{}(), \or{SortIOError{}} (Lbl'Hash'EFAULT{}(), \or{SortIOError{}} (Lbl'Hash'EFBIG{}(), \or{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), \or{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), \or{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), \or{SortIOError{}} (Lbl'Hash'EINTR{}(), \or{SortIOError{}} (Lbl'Hash'EINVAL{}(), \or{SortIOError{}} (Lbl'Hash'EIO{}(), \or{SortIOError{}} (Lbl'Hash'EISCONN{}(), \or{SortIOError{}} (Lbl'Hash'EISDIR{}(), \or{SortIOError{}} (Lbl'Hash'ELOOP{}(), \or{SortIOError{}} (Lbl'Hash'EMFILE{}(), \or{SortIOError{}} (Lbl'Hash'EMLINK{}(), \or{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), \or{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), \or{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), \or{SortIOError{}} (Lbl'Hash'ENETRESET{}(), \or{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), \or{SortIOError{}} (Lbl'Hash'ENFILE{}(), \or{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), \or{SortIOError{}} (Lbl'Hash'ENODEV{}(), \or{SortIOError{}} (Lbl'Hash'ENOENT{}(), \or{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), \or{SortIOError{}} (Lbl'Hash'ENOLCK{}(), \or{SortIOError{}} (Lbl'Hash'ENOMEM{}(), \or{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), \or{SortIOError{}} (Lbl'Hash'ENOSPC{}(), \or{SortIOError{}} (Lbl'Hash'ENOSYS{}(), \or{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), \or{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), \or{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), \or{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), \or{SortIOError{}} (Lbl'Hash'ENOTTY{}(), \or{SortIOError{}} (Lbl'Hash'ENXIO{}(), \or{SortIOError{}} (Lbl'Hash'EOF{}(), \or{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), \or{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), \or{SortIOError{}} (Lbl'Hash'EPERM{}(), \or{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), \or{SortIOError{}} (Lbl'Hash'EPIPE{}(), \or{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), \or{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), \or{SortIOError{}} (Lbl'Hash'ERANGE{}(), \or{SortIOError{}} (Lbl'Hash'EROFS{}(), \or{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), \or{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), \or{SortIOError{}} (Lbl'Hash'ESPIPE{}(), \or{SortIOError{}} (Lbl'Hash'ESRCH{}(), \or{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), \or{SortIOError{}} (Lbl'Hash'ETOOMANYREFS{}(), \or{SortIOError{}} (Lbl'Hash'EWOULDBLOCK{}(), \or{SortIOError{}} (Lbl'Hash'EXDEV{}(), \or{SortIOError{}} (\exists{SortIOError{}} (X0:SortString{}, Lbl'Hash'noParse{}(X0:SortString{})), \or{SortIOError{}} (\exists{SortIOError{}} (X0:SortInt{}, Lbl'Hash'unknownIOError{}(X0:SortInt{})), \bottom{SortIOError{}}()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortLocCellOpt{}} (LblnoLocCell{}(), \or{SortLocCellOpt{}} (\exists{SortLocCellOpt{}} (Val:SortLocCell{}, inj{SortLocCell{}, SortLocCellOpt{}} (Val:SortLocCell{})), \bottom{SortLocCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortLocalResString{}} (\exists{SortLocalResString{}} (X0:SortId{}, \exists{SortLocalResString{}} (X1:SortString{}, LbllocalResString'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResString'Unds'Id'Unds'String{}(X0:SortId{}, X1:SortString{}))), \bottom{SortLocalResString{}}()) [constructor{}()] // no junk
  axiom{} \or{SortAExp{}} (\exists{SortAExp{}} (X0:SortAExp{}, \exists{SortAExp{}} (X1:SortAExp{}, Lbl'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \or{SortAExp{}} (\exists{SortAExp{}} (X0:SortAExp{}, \exists{SortAExp{}} (X1:SortAExp{}, Lbl'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \or{SortAExp{}} (\exists{SortAExp{}} (X0:SortAExp{}, \exists{SortAExp{}} (X1:SortAExp{}, Lbl'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \or{SortAExp{}} (\exists{SortAExp{}} (X0:SortAExp{}, \exists{SortAExp{}} (X1:SortAExp{}, Lbl'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \or{SortAExp{}} (\exists{SortAExp{}} (Val:SortString{}, inj{SortString{}, SortAExp{}} (Val:SortString{})), \or{SortAExp{}} (\exists{SortAExp{}} (Val:SortPrintable{}, inj{SortPrintable{}, SortAExp{}} (Val:SortPrintable{})), \or{SortAExp{}} (\exists{SortAExp{}} (Val:SortId{}, inj{SortId{}, SortAExp{}} (Val:SortId{})), \or{SortAExp{}} (\exists{SortAExp{}} (Val:SortInt{}, inj{SortInt{}, SortAExp{}} (Val:SortInt{})), \bottom{SortAExp{}}())))))))) [constructor{}()] // no junk
  axiom{} \or{SortMultsCell{}} (\exists{SortMultsCell{}} (X0:SortMap{}, Lbl'-LT-'mults'-GT-'{}(X0:SortMap{})), \bottom{SortMultsCell{}}()) [constructor{}()] // no junk

// rules
// rule `#if_#then_#else_#fi_K-EQUAL_Sort_Bool_Sort_Sort`{K}(C,B1,_0)=>B1 requires C ensures #token("true","Bool") [UNIQUE_ID(b40db17b830ee9bc7ad48d91713b0acfd528a4caa7b9f56b2654645f58b2f21f) contentStartColumn(8) contentStartLine(862) org.kframework.attributes.Location(Location(862,8,862,59)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        VarC:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortK{},R} (
        Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortK{}}(VarC:SortBool{},VarB1:SortK{},Var'Unds'0:SortK{}),
        VarB1:SortK{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" K [klabel(#ruleRequires) symbol()]"), contentStartLine{}("862"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(862,8,862,59)"), UNIQUE'Unds'ID{}("b40db17b830ee9bc7ad48d91713b0acfd528a4caa7b9f56b2654645f58b2f21f")]

// rule `#if_#then_#else_#fi_K-EQUAL_Sort_Bool_Sort_Sort`{K}(C,_0,B2)=>B2 requires `notBool_`(C) ensures #token("true","Bool") [UNIQUE_ID(c58758cb7cd533229481b46197a7bcc89c827d31024156fac406fb13a31d73b2) contentStartColumn(8) contentStartLine(863) org.kframework.attributes.Location(Location(863,8,863,67)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        LblnotBool'Unds'{}(VarC:SortBool{}),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortK{},R} (
        Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortK{}}(VarC:SortBool{},Var'Unds'0:SortK{},VarB2:SortK{}),
        VarB2:SortK{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" K [klabel(#ruleRequires) symbol()]"), contentStartLine{}("863"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(863,8,863,67)"), UNIQUE'Unds'ID{}("c58758cb7cd533229481b46197a7bcc89c827d31024156fac406fb13a31d73b2")]

// rule `#open(_)_K-IO_IOInt_String`(S)=>`#open(_,_)_K-IO_IOInt_String_String`(S,#token("\"r+\"","String")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(569335f78fe30a33cbf240624728b69a4b2f754fb86768b85047de1f7ce3b0ef) contentStartColumn(8) contentStartLine(1002) org.kframework.attributes.Location(Location(1002,8,1002,48)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortIOInt{},R} (
        Lbl'Hash'open'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'String{}(VarS:SortString{}),
        Lbl'Hash'open'LParUndsCommUndsRParUnds'K-IO'Unds'IOInt'Unds'String'Unds'String{}(VarS:SortString{},\dv{SortString{}}("r+"))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("1002"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1002,8,1002,48)"), UNIQUE'Unds'ID{}("569335f78fe30a33cbf240624728b69a4b2f754fb86768b85047de1f7ce3b0ef")]

// rule `#stderr_K-IO_Int`(.KList)=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(648a904c3812c1cb0fecdba98730749b96204f03d0ceae9cf8dba2a96458d1ea) contentStartColumn(8) contentStartLine(1010) org.kframework.attributes.Location(Location(1010,8,1010,20)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Hash'stderr'Unds'K-IO'Unds'Int{}(),
        \dv{SortInt{}}("2")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("1010"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1010,8,1010,20)"), UNIQUE'Unds'ID{}("648a904c3812c1cb0fecdba98730749b96204f03d0ceae9cf8dba2a96458d1ea")]

// rule `#stdin_K-IO_Int`(.KList)=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b272916c87307d1096c0f36d3414bbf8d87233e4d72cb16865787ff20a3f8d74) contentStartColumn(8) contentStartLine(1008) org.kframework.attributes.Location(Location(1008,8,1008,19)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Hash'stdin'Unds'K-IO'Unds'Int{}(),
        \dv{SortInt{}}("0")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("1008"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1008,8,1008,19)"), UNIQUE'Unds'ID{}("b272916c87307d1096c0f36d3414bbf8d87233e4d72cb16865787ff20a3f8d74")]

// rule `#stdout_K-IO_Int`(.KList)=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d1cffe88ed4a0ac4f38b38f0ee6d54743fa4052ada718e9cea5f7a0ccb082d65) contentStartColumn(8) contentStartLine(1009) org.kframework.attributes.Location(Location(1009,8,1009,20)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Hash'stdout'Unds'K-IO'Unds'Int{}(),
        \dv{SortInt{}}("1")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("1009"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1009,8,1009,20)"), UNIQUE'Unds'ID{}("d1cffe88ed4a0ac4f38b38f0ee6d54743fa4052ada718e9cea5f7a0ccb082d65")]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_*__KT-SYNTAX_AExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_*__KT-SYNTAX_AExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(2782b34332a2d90e440d5a0395afdb821d2562303dd587bb9d8dd0280c4dc4a6) cool() cool-like() org.kframework.attributes.Location(Location(112,25,112,49)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) seqstrict()]
  alias rule6LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule6LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule6LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(112,25,112,49)"), UNIQUE'Unds'ID{}("2782b34332a2d90e440d5a0395afdb821d2562303dd587bb9d8dd0280c4dc4a6"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_*__KT-SYNTAX_AExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_*__KT-SYNTAX_AExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(15a9f60095477ce383ac30c60166d7d4e845be622470c0ab38cab46e82004ef3) cool() cool-like() org.kframework.attributes.Location(Location(112,25,112,49)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) seqstrict()]
  alias rule7LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule7LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule7LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(112,25,112,49)"), UNIQUE'Unds'ID{}("15a9f60095477ce383ac30c60166d7d4e845be622470c0ab38cab46e82004ef3"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_+__KT-SYNTAX_AExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_+__KT-SYNTAX_AExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(9bbeb77f6804532b7bac0cfb39c1748950de4131c4f2b572e3aa0fed9ff6a48f) cool() cool-like() org.kframework.attributes.Location(Location(115,19,115,43)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) seqstrict()]
  alias rule8LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule8LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule8LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(115,19,115,43)"), UNIQUE'Unds'ID{}("9bbeb77f6804532b7bac0cfb39c1748950de4131c4f2b572e3aa0fed9ff6a48f"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_+__KT-SYNTAX_AExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_+__KT-SYNTAX_AExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(7d05856953113a27ddc52a4fff4faf3135b7441f5ade7538ff1b946abeb62414) cool() cool-like() org.kframework.attributes.Location(Location(115,19,115,43)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) seqstrict()]
  alias rule9LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule9LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule9LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(115,19,115,43)"), UNIQUE'Unds'ID{}("7d05856953113a27ddc52a4fff4faf3135b7441f5ade7538ff1b946abeb62414"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_-__KT-SYNTAX_AExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_-__KT-SYNTAX_AExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(9d45b483827ccc79c1b5d5cdde1ec843a5bbbc963f91748a137439d7557408bc) cool() cool-like() org.kframework.attributes.Location(Location(114,19,114,43)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) seqstrict()]
  alias rule10LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule10LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule10LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(114,19,114,43)"), UNIQUE'Unds'ID{}("9d45b483827ccc79c1b5d5cdde1ec843a5bbbc963f91748a137439d7557408bc"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_-__KT-SYNTAX_AExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_-__KT-SYNTAX_AExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(ef299a2a5c178dd219c2fe5de49eeed9ab0f62d3a49beac3a1427b3efe6446c4) cool() cool-like() org.kframework.attributes.Location(Location(114,19,114,43)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) seqstrict()]
  alias rule11LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule11LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule11LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(114,19,114,43)"), UNIQUE'Unds'ID{}("ef299a2a5c178dd219c2fe5de49eeed9ab0f62d3a49beac3a1427b3efe6446c4"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_/__KT-SYNTAX_AExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_/__KT-SYNTAX_AExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(52fd3eb759931588ebfe0a145a3c4ea4d7bd7e6e3b76ef85b1dccdc07dc1d51c) cool() cool-like() org.kframework.attributes.Location(Location(113,25,113,49)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) seqstrict()]
  alias rule12LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule12LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule12LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(113,25,113,49)"), UNIQUE'Unds'ID{}("52fd3eb759931588ebfe0a145a3c4ea4d7bd7e6e3b76ef85b1dccdc07dc1d51c"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_/__KT-SYNTAX_AExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_/__KT-SYNTAX_AExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(e2889a8aeeab1ee5728eb34ae1a4738bd4a34acb987b50cb1752214d2012bacd) cool() cool-like() org.kframework.attributes.Location(Location(113,25,113,49)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) seqstrict()]
  alias rule13LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule13LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule13LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(113,25,113,49)"), UNIQUE'Unds'ID{}("e2889a8aeeab1ee5728eb34ae1a4738bd4a34acb987b50cb1752214d2012bacd"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_<=__KT-SYNTAX_BExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_<=__KT-SYNTAX_BExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(2122d4fded4c82ec6c72aaa1fa6d275bc1394357925e429fbb1a2323796c9696) cool() cool-like() org.kframework.attributes.Location(Location(103,19,103,41)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule14LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule14LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule14LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(103,19,103,41)"), UNIQUE'Unds'ID{}("2122d4fded4c82ec6c72aaa1fa6d275bc1394357925e429fbb1a2323796c9696")]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_<=__KT-SYNTAX_BExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_<=__KT-SYNTAX_BExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(93f05ecb119461d9fdd6a39084fa96f2ca3ab76a68b201ce39d2ac25631bc7c1) cool() cool-like() org.kframework.attributes.Location(Location(103,19,103,41)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule15LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule15LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule15LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(103,19,103,41)"), UNIQUE'Unds'ID{}("93f05ecb119461d9fdd6a39084fa96f2ca3ab76a68b201ce39d2ac25631bc7c1")]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_<__KT-SYNTAX_BExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_<__KT-SYNTAX_BExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(b73fd39dea5a74eff9ac42938e8c49abfc2bb1a4f9f602626e315a0b6ab100d2) cool() cool-like() org.kframework.attributes.Location(Location(102,19,102,40)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule16LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule16LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule16LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(102,19,102,40)"), UNIQUE'Unds'ID{}("b73fd39dea5a74eff9ac42938e8c49abfc2bb1a4f9f602626e315a0b6ab100d2")]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_<__KT-SYNTAX_BExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_<__KT-SYNTAX_BExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(ca2d501a83f399d131f0e3a1bcac409a2924703c42ab9f271e17b5f9eddd7d11) cool() cool-like() org.kframework.attributes.Location(Location(102,19,102,40)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule17LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule17LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule17LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(102,19,102,40)"), UNIQUE'Unds'ID{}("ca2d501a83f399d131f0e3a1bcac409a2924703c42ab9f271e17b5f9eddd7d11")]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_==__KT-SYNTAX_BExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_==__KT-SYNTAX_BExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(25f9cbe7ffa347cd4a9e43e21cb62fcd983ec82275938586d7a5bbd5d92a3033) cool() cool-like() org.kframework.attributes.Location(Location(101,19,101,41)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule18LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule18LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule18LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(101,19,101,41)"), UNIQUE'Unds'ID{}("25f9cbe7ffa347cd4a9e43e21cb62fcd983ec82275938586d7a5bbd5d92a3033")]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_==__KT-SYNTAX_BExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_==__KT-SYNTAX_BExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(28c6036804c81869d79250f1ab5e6a0c1802b70ac9fc97a95617e9bd880fedb5) cool() cool-like() org.kframework.attributes.Location(Location(101,19,101,41)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule19LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule19LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule19LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(101,19,101,41)"), UNIQUE'Unds'ID{}("28c6036804c81869d79250f1ab5e6a0c1802b70ac9fc97a95617e9bd880fedb5")]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_=__KT-SYNTAX_Assigner_DeclaredVar_AExp0_`(inj{DeclaredVar,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(dc2c9abb668cf7d2fe40f06fa67b59ea2d4413790c8f27a71774720051bb2b3b) cool() cool-like() org.kframework.attributes.Location(Location(52,23,52,54)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict(2)]
  alias rule20LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortDeclaredVar{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule20LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortDeclaredVar{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(kseq{}(inj{SortDeclaredVar{}, SortKItem{}}(VarK0:SortDeclaredVar{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule20LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortDeclaredVar{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(VarK0:SortDeclaredVar{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}("2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(52,23,52,54)"), UNIQUE'Unds'ID{}("dc2c9abb668cf7d2fe40f06fa67b59ea2d4413790c8f27a71774720051bb2b3b")]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_=__KT-SYNTAX_UniqueIdAssigner_Id_AExp0_`(inj{Id,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{UniqueIdAssigner,KItem}(`_=__KT-SYNTAX_UniqueIdAssigner_Id_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(500a225686999aed82216adcd42c034a3cf394e1369d7abcd84c765c9e97d801) cool() cool-like() org.kframework.attributes.Location(Location(49,31,49,54)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict(2)]
  alias rule21LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortId{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule21LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortId{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarK0:SortId{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule21LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortId{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortUniqueIdAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp{}(VarK0:SortId{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}("2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(49,31,49,54)"), UNIQUE'Unds'ID{}("500a225686999aed82216adcd42c034a3cf394e1369d7abcd84c765c9e97d801")]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_>=__KT-SYNTAX_BExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_>=__KT-SYNTAX_BExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(e77676fbd73c04bb96c6cbc75fb20cc88cec72f665d8ce3c8ab98b6bf040718c) cool() cool-like() org.kframework.attributes.Location(Location(105,19,105,41)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule22LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule22LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule22LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(105,19,105,41)"), UNIQUE'Unds'ID{}("e77676fbd73c04bb96c6cbc75fb20cc88cec72f665d8ce3c8ab98b6bf040718c")]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_>=__KT-SYNTAX_BExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_>=__KT-SYNTAX_BExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(8fe3818745fe8c6247ada07f9126bbc37fbfc894e936405659aea85f5916715b) cool() cool-like() org.kframework.attributes.Location(Location(105,19,105,41)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule23LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule23LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule23LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(105,19,105,41)"), UNIQUE'Unds'ID{}("8fe3818745fe8c6247ada07f9126bbc37fbfc894e936405659aea85f5916715b")]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_>__KT-SYNTAX_BExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_>__KT-SYNTAX_BExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(9e3f117c1772ae3734bfb45fff7e3495d649a6dfb5886faf9b7f5805f7ca899f) cool() cool-like() org.kframework.attributes.Location(Location(104,19,104,40)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule24LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule24LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule24LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(104,19,104,40)"), UNIQUE'Unds'ID{}("9e3f117c1772ae3734bfb45fff7e3495d649a6dfb5886faf9b7f5805f7ca899f")]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezer_>__KT-SYNTAX_BExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_>__KT-SYNTAX_BExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(eaf883fe71eddedfec7c7a7811f8f59d3d735cdae5af155206ed676d4e75da8d) cool() cool-like() org.kframework.attributes.Location(Location(104,19,104,40)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule25LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule25LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule25LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(104,19,104,40)"), UNIQUE'Unds'ID{}("eaf883fe71eddedfec7c7a7811f8f59d3d735cdae5af155206ed676d4e75da8d")]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{BExp,KItem}(HOLE) #as _9``~>`#freezer_?_:__KT-SYNTAX_Statement_BExp_Block_Block1_`(inj{Block,KItem}(K1),inj{Block,KItem}(K2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`_?_:__KT-SYNTAX_Statement_BExp_Block_Block`(HOLE,K1,K2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(a5c1ce69d6ca001ec420cca93525cb4ffe1f3f09511f334f6ca61b3bc8749edf) cool() cool-like() org.kframework.attributes.Location(Location(58,23,58,58)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict(1)]
  alias rule26LHS{}(SortGeneratedCounterCell{},SortK{},SortBExp{},SortBlock{},SortBlock{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule26LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarK1:SortBlock{}),dotk{}()),kseq{}(inj{SortBlock{}, SortKItem{}}(VarK2:SortBlock{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule26LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(58,23,58,58)"), UNIQUE'Unds'ID{}("a5c1ce69d6ca001ec420cca93525cb4ffe1f3f09511f334f6ca61b3bc8749edf")]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{BExp,KItem}(HOLE) #as _9``~>`#freezerif(_)__KT-SYNTAX_Statement_BExp_Block1_`(inj{Block,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`if(_)__KT-SYNTAX_Statement_BExp_Block`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(dae5efa8271e76658337cbd9969eab967005b46c999814c1ca54b19a5a0195c4) cool() cool-like() org.kframework.attributes.Location(Location(57,24,57,58)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict(1)]
  alias rule27LHS{}(SortGeneratedCounterCell{},SortK{},SortBExp{},SortBlock{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule27LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarK1:SortBlock{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule27LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(VarHOLE:SortBExp{},VarK1:SortBlock{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(57,24,57,58)"), UNIQUE'Unds'ID{}("dae5efa8271e76658337cbd9969eab967005b46c999814c1ca54b19a5a0195c4")]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{BExp,KItem}(HOLE) #as _9``~>`#freezerif(_)___KT-SYNTAX_Statement_BExp_Block_ElseIfStatement1_`(inj{Block,KItem}(K1),inj{ElseIfStatement,KItem}(K2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`if(_)___KT-SYNTAX_Statement_BExp_Block_ElseIfStatement`(HOLE,K1,K2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(428da769fee395e947aed679d2d25951c43823e637337698e3be2cbfb6d61212) cool() cool-like() org.kframework.attributes.Location(Location(59,23,59,73)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict(1)]
  alias rule28LHS{}(SortGeneratedCounterCell{},SortK{},SortBExp{},SortBlock{},SortElseIfStatement{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule28LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortElseIfStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarK1:SortBlock{}),dotk{}()),kseq{}(inj{SortElseIfStatement{}, SortKItem{}}(VarK2:SortElseIfStatement{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule28LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortElseIfStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortElseIfStatement{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(59,23,59,73)"), UNIQUE'Unds'ID{}("428da769fee395e947aed679d2d25951c43823e637337698e3be2cbfb6d61212")]

// rule `<generatedTop>`(`<T>`(`<k>`(``inj{AExp,KItem}(HOLE) #as _9``~>`#freezerprint(_)_KT-SYNTAX_Statement_AExps1_`(inj{AExps,KItem}(AEs))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`print(_)_KT-SYNTAX_Statement_AExps`(`_,__KT-SYNTAX_AExps_AExp_AExps`(HOLE,AEs)))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(_9)) ensures #token("true","Bool") [UNIQUE_ID(08d79080a6f3b6fa3ab31d1c20d41e235cb5c38fd82e6bfa2959e04c69bdc8d7) contentStartColumn(11) contentStartLine(84) cool() cool-like() org.kframework.attributes.Location(Location(84,11,84,38)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule29LHS{}(SortAExps{},SortGeneratedCounterCell{},SortK{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortKItem{}) : SortGeneratedTopCell{}
  where rule29LHS{}(VarAEs:SortAExps{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(Var'Unds'9:SortKItem{},dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),Var'Unds'9:SortKItem{}),kseq{}(Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(kseq{}(inj{SortAExps{}, SortKItem{}}(VarAEs:SortAExps{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule29LHS{}(VarAEs:SortAExps{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(VarHOLE:SortAExp{},VarAEs:SortAExps{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("84"), contentStartColumn{}("11"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(84,11,84,38)"), UNIQUE'Unds'ID{}("08d79080a6f3b6fa3ab31d1c20d41e235cb5c38fd82e6bfa2959e04c69bdc8d7")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`while(_)__KT-SYNTAX_Statement_BExp_Block`(B,`{_}_KT-SYNTAX_Block_Statement`(S)) #as _10)~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`if(_)__KT-SYNTAX_Statement_BExp_Block`(B,`{_}_KT-SYNTAX_Block_Statement`(`___KT-SYNTAX_Statement_Statement_Statement`(S,_10))))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3da62b05db3df8cce1450fd07e530dedec522dc45c7b0c4b4ac5842322ad9b0a) contentStartColumn(8) contentStartLine(322) org.kframework.attributes.Location(Location(322,8,322,74)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) structural()]
  alias rule30LHS{}(SortBExp{},SortGeneratedCounterCell{},SortK{},SortStatement{},SortFunctionCell{},SortEnvCell{},SortStatement{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule30LHS{}(VarB:SortBExp{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'10:SortStatement{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(\and{SortStatement{}}(Lblwhile'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(VarB:SortBExp{},Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(VarS:SortStatement{})),Var'Unds'10:SortStatement{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule30LHS{}(VarB:SortBExp{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'10:SortStatement{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(VarB:SortBExp{},Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(VarS:SortStatement{},Var'Unds'10:SortStatement{})))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("322"), contentStartColumn{}("8"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(322,8,322,74)"), UNIQUE'Unds'ID{}("3da62b05db3df8cce1450fd07e530dedec522dc45c7b0c4b4ac5842322ad9b0a")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Id,KItem}(I)~>DotVar2),_0,`<env>`(`_Map_`(`_|->_`(inj{Id,KItem}(I),L),DotVar3)) #as _8,`<store>`(`_Map_`(`_|->_`(L,V),DotVar4)) #as _10,_1,_2,_3),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(V~>DotVar2),_0,_8,_10,_1,_2,_3),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0389400ab02b42fde0be22606d3e79e24ad00b0d812734905348972217007e97) contentStartColumn(8) contentStartLine(192) cool-like() org.kframework.attributes.Location(Location(192,8,194,39)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule31LHS{}(SortGeneratedCounterCell{},SortK{},SortMap{},SortMap{},SortId{},SortKItem{},SortKItem{},SortFunctionCell{},SortMultsCell{},SortStoreCell{},SortOutCell{},SortLocCell{},SortEnvCell{}) : SortGeneratedTopCell{}
  where rule31LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarV:SortKItem{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortMultsCell{},Var'Unds'10:SortStoreCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{},Var'Unds'8:SortEnvCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},\and{SortEnvCell{}}(Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),VarL:SortKItem{}),VarDotVar3:SortMap{})),Var'Unds'8:SortEnvCell{}),\and{SortStoreCell{}}(Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarL:SortKItem{},VarV:SortKItem{}),VarDotVar4:SortMap{})),Var'Unds'10:SortStoreCell{}),Var'Unds'1:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule31LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarV:SortKItem{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortMultsCell{},Var'Unds'10:SortStoreCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{},Var'Unds'8:SortEnvCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(VarV:SortKItem{},VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'8:SortEnvCell{},Var'Unds'10:SortStoreCell{},Var'Unds'1:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), cool-like{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("192"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(192,8,194,39)"), UNIQUE'Unds'ID{}("0389400ab02b42fde0be22606d3e79e24ad00b0d812734905348972217007e97")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Skip,KItem}(`Skip_KT-SYNTAX_Skip`(.KList))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7cc01e097372e726e1b9130596f445ac64cef89564cb6d04f12172b751d2229c) contentStartColumn(8) contentStartLine(307) org.kframework.attributes.Location(Location(307,8,307,17)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule32LHS{}(SortGeneratedCounterCell{},SortK{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule32LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortSkip{}, SortKItem{}}(LblSkip'Unds'KT-SYNTAX'Unds'Skip{}()),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule32LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(VarDotVar2:SortK{}),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("307"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(307,8,307,17)"), UNIQUE'Unds'ID{}("7cc01e097372e726e1b9130596f445ac64cef89564cb6d04f12172b751d2229c")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{KotlinFunCall,KItem}(`_(_);_KT-SYNTAX_KotlinFunCall_Id_Values`(I,`.List{"_,__KT-SYNTAX_Values_Int_Values"}_Values`(.KList)))~>DotVar2),`<function>`(`_FunThreadCellMap_`(`FunThreadCellMapItem`(`<id>`(inj{Id,KItem}(I)),`<funThread>`(`<id>`(inj{Id,KItem}(I)),`<scope>`(inj{Statement,KItem}(S)),`<params>`(P),`<temp>`(inj{Params,KItem}(`.List{"_,__KT-SYNTAX_Params_Id_Params"}_Params`(.KList))),DotVar4)),DotVar3)),_0,_1,_2,_3,_4),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{LocalFun,KItem}(`local(_,_)_KT-SYNTAX_LocalFun_Id_Statement`(I,S))~>DotVar2),`<function>`(`_FunThreadCellMap_`(`FunThreadCellMapItem`(`<id>`(inj{Id,KItem}(I)),`<funThread>`(`<id>`(inj{Id,KItem}(I)),`<scope>`(inj{Statement,KItem}(S)),`<params>`(P),`<temp>`(P),DotVar4)),DotVar3)),_0,_1,_2,_3,_4),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(048a1b21b511171157559c127323bf2eb6629ce56d0ad3625de7591b6543aa91) contentStartColumn(8) contentStartLine(263) org.kframework.attributes.Location(Location(263,8,271,19)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule33LHS{}(SortGeneratedCounterCell{},SortK{},SortFunThreadCellMap{},SortLocalEnvCell{},SortId{},SortK{},SortStatement{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule33LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortFunThreadCellMap{},VarDotVar4:SortLocalEnvCell{},VarI:SortId{},VarP:SortK{},VarS:SortStatement{},Var'Unds'0:SortEnvCell{},Var'Unds'1:SortStoreCell{},Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortKotlinFunCall{}, SortKItem{}}(Lbl'UndsLParUndsRParSClnUnds'KT-SYNTAX'Unds'KotlinFunCall'Unds'Id'Unds'Values{}(VarI:SortId{},Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Values'Unds'Int'Unds'Values'QuotRBraUnds'Values{}())),VarDotVar2:SortK{})),Lbl'-LT-'function'-GT-'{}(Lbl'Unds'FunThreadCellMap'Unds'{}(LblFunThreadCellMapItem{}(Lbl'-LT-'id'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),dotk{}())),Lbl'-LT-'funThread'-GT-'{}(Lbl'-LT-'id'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),dotk{}())),Lbl'-LT-'scope'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(VarS:SortStatement{}),dotk{}())),Lbl'-LT-'params'-GT-'{}(VarP:SortK{}),Lbl'-LT-'temp'-GT-'{}(kseq{}(inj{SortParams{}, SortKItem{}}(Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Params'Unds'Id'Unds'Params'QuotRBraUnds'Params{}()),dotk{}())),VarDotVar4:SortLocalEnvCell{})),VarDotVar3:SortFunThreadCellMap{})),Var'Unds'0:SortEnvCell{},Var'Unds'1:SortStoreCell{},Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule33LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortFunThreadCellMap{},VarDotVar4:SortLocalEnvCell{},VarI:SortId{},VarP:SortK{},VarS:SortStatement{},Var'Unds'0:SortEnvCell{},Var'Unds'1:SortStoreCell{},Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortLocalFun{}, SortKItem{}}(Lbllocal'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalFun'Unds'Id'Unds'Statement{}(VarI:SortId{},VarS:SortStatement{})),VarDotVar2:SortK{})),Lbl'-LT-'function'-GT-'{}(Lbl'Unds'FunThreadCellMap'Unds'{}(LblFunThreadCellMapItem{}(Lbl'-LT-'id'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),dotk{}())),Lbl'-LT-'funThread'-GT-'{}(Lbl'-LT-'id'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),dotk{}())),Lbl'-LT-'scope'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(VarS:SortStatement{}),dotk{}())),Lbl'-LT-'params'-GT-'{}(VarP:SortK{}),Lbl'-LT-'temp'-GT-'{}(VarP:SortK{}),VarDotVar4:SortLocalEnvCell{})),VarDotVar3:SortFunThreadCellMap{})),Var'Unds'0:SortEnvCell{},Var'Unds'1:SortStoreCell{},Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("263"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(263,8,271,19)"), UNIQUE'Unds'ID{}("048a1b21b511171157559c127323bf2eb6629ce56d0ad3625de7591b6543aa91")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{KotlinFunCall,KItem}(`_(_);_KT-SYNTAX_KotlinFunCall_Id_Values`(I,`_,__KT-SYNTAX_Values_Int_Values`(V,Vs)))~>DotVar2),`<function>`(`_FunThreadCellMap_`(`FunThreadCellMapItem`(`<id>`(inj{Id,KItem}(I)),`<funThread>`(`<id>`(inj{Id,KItem}(I)),_0,_1,`<temp>`(inj{Params,KItem}(`_,__KT-SYNTAX_Params_Id_Params`(P,Ps))),`<localEnv>`(FunM))),DotVar3)),_2,`<store>`(SMap),_3,_4,`<loc>`(L)),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{KotlinFunCall,KItem}(`_(_);_KT-SYNTAX_KotlinFunCall_Id_Values`(I,Vs))~>DotVar2),`<function>`(`_FunThreadCellMap_`(`FunThreadCellMapItem`(`<id>`(inj{Id,KItem}(I)),`<funThread>`(`<id>`(inj{Id,KItem}(I)),_0,_1,`<temp>`(inj{Params,KItem}(Ps)),`<localEnv>`(`_Map_`(FunM,`_|->_`(inj{Id,KItem}(P),inj{Int,KItem}(L)))))),DotVar3)),_2,`<store>`(`_Map_`(SMap,`_|->_`(inj{Int,KItem}(L),inj{Int,KItem}(V)))),_3,_4,`<loc>`(`_+Int_`(L,#token("1","Int")))),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2e3cd43c80a1eed7f38a2624b6ec797edcce12cc1989629300623873dbb2a3ba) contentStartColumn(8) contentStartLine(274) org.kframework.attributes.Location(Location(274,8,283,33)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule34LHS{}(SortGeneratedCounterCell{},SortK{},SortFunThreadCellMap{},SortMap{},SortId{},SortInt{},SortId{},SortParams{},SortMap{},SortInt{},SortValues{},SortScopeCell{},SortParamsCell{},SortEnvCell{},SortMultsCell{},SortOutCell{}) : SortGeneratedTopCell{}
  where rule34LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortFunThreadCellMap{},VarFunM:SortMap{},VarI:SortId{},VarL:SortInt{},VarP:SortId{},VarPs:SortParams{},VarSMap:SortMap{},VarV:SortInt{},VarVs:SortValues{},Var'Unds'0:SortScopeCell{},Var'Unds'1:SortParamsCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortKotlinFunCall{}, SortKItem{}}(Lbl'UndsLParUndsRParSClnUnds'KT-SYNTAX'Unds'KotlinFunCall'Unds'Id'Unds'Values{}(VarI:SortId{},Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Values'Unds'Int'Unds'Values{}(VarV:SortInt{},VarVs:SortValues{}))),VarDotVar2:SortK{})),Lbl'-LT-'function'-GT-'{}(Lbl'Unds'FunThreadCellMap'Unds'{}(LblFunThreadCellMapItem{}(Lbl'-LT-'id'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),dotk{}())),Lbl'-LT-'funThread'-GT-'{}(Lbl'-LT-'id'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),dotk{}())),Var'Unds'0:SortScopeCell{},Var'Unds'1:SortParamsCell{},Lbl'-LT-'temp'-GT-'{}(kseq{}(inj{SortParams{}, SortKItem{}}(Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Params'Unds'Id'Unds'Params{}(VarP:SortId{},VarPs:SortParams{})),dotk{}())),Lbl'-LT-'localEnv'-GT-'{}(VarFunM:SortMap{}))),VarDotVar3:SortFunThreadCellMap{})),Var'Unds'2:SortEnvCell{},Lbl'-LT-'store'-GT-'{}(VarSMap:SortMap{}),Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(VarL:SortInt{})),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule34LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortFunThreadCellMap{},VarFunM:SortMap{},VarI:SortId{},VarL:SortInt{},VarP:SortId{},VarPs:SortParams{},VarSMap:SortMap{},VarV:SortInt{},VarVs:SortValues{},Var'Unds'0:SortScopeCell{},Var'Unds'1:SortParamsCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortKotlinFunCall{}, SortKItem{}}(Lbl'UndsLParUndsRParSClnUnds'KT-SYNTAX'Unds'KotlinFunCall'Unds'Id'Unds'Values{}(VarI:SortId{},VarVs:SortValues{})),VarDotVar2:SortK{})),Lbl'-LT-'function'-GT-'{}(Lbl'Unds'FunThreadCellMap'Unds'{}(LblFunThreadCellMapItem{}(Lbl'-LT-'id'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),dotk{}())),Lbl'-LT-'funThread'-GT-'{}(Lbl'-LT-'id'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),dotk{}())),Var'Unds'0:SortScopeCell{},Var'Unds'1:SortParamsCell{},Lbl'-LT-'temp'-GT-'{}(kseq{}(inj{SortParams{}, SortKItem{}}(VarPs:SortParams{}),dotk{}())),Lbl'-LT-'localEnv'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarFunM:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarP:SortId{}),inj{SortInt{}, SortKItem{}}(VarL:SortInt{})))))),VarDotVar3:SortFunThreadCellMap{})),Var'Unds'2:SortEnvCell{},Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarSMap:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortInt{}, SortKItem{}}(VarV:SortInt{})))),Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(VarL:SortInt{},\dv{SortInt{}}("1")))),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("274"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(274,8,283,33)"), UNIQUE'Unds'ID{}("2e3cd43c80a1eed7f38a2624b6ec797edcce12cc1989629300623873dbb2a3ba")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_*__KT-SYNTAX_AExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_*__KT-SYNTAX_AExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(eb0de505737cfe12902d3b0b6e8b003ef04ee55a42ea3e026a6186c226d46e57) heat() org.kframework.attributes.Location(Location(112,25,112,49)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) seqstrict()]
  alias rule35LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule35LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule35LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(112,25,112,49)"), UNIQUE'Unds'ID{}("eb0de505737cfe12902d3b0b6e8b003ef04ee55a42ea3e026a6186c226d46e57"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_*__KT-SYNTAX_AExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_*__KT-SYNTAX_AExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(isKResult(inj{AExp,KItem}(K0)),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(2ca73c6f9209198cd44b62bf6cd43b13a90f81579f144810a802b3aee59a227d) heat() org.kframework.attributes.Location(Location(112,25,112,49)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) seqstrict()]
  alias rule36LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule36LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule36LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(112,25,112,49)"), UNIQUE'Unds'ID{}("2ca73c6f9209198cd44b62bf6cd43b13a90f81579f144810a802b3aee59a227d"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_*__KT-SYNTAX_AExp_AExp_AExp`(inj{Int,AExp}(I1),inj{Int,AExp}(I2)))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Int,KItem}(`_*Int_`(I1,I2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(eead6f48316b22ead16ef82b935c7e01c3a25985bd2df614c06b41da7f39afad) contentStartColumn(8) contentStartLine(340) org.kframework.attributes.Location(Location(340,8,340,37)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule37LHS{}(SortGeneratedCounterCell{},SortK{},SortInt{},SortInt{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule37LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsStarUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(VarI1:SortInt{}),inj{SortInt{}, SortAExp{}}(VarI2:SortInt{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule37LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'UndsStar'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("340"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(340,8,340,37)"), UNIQUE'Unds'ID{}("eead6f48316b22ead16ef82b935c7e01c3a25985bd2df614c06b41da7f39afad")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{AExpMod,KItem}(`_++_KT-SYNTAX_AExpMod_Id`(I))~>DotVar2),_0,`<env>`(`_Map_`(`_|->_`(inj{Id,KItem}(I),L),DotVar3)) #as _9,`<store>`(`_Map_`(`_|->_`(L,inj{Int,KItem}(V)),DotVar4)),_1,_2,_3),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Skip,KItem}(`Skip_KT-SYNTAX_Skip`(.KList))~>DotVar2),_0,_9,`<store>`(`_Map_`(`_|->_`(L,inj{Int,KItem}(`_+Int_`(V,#token("1","Int")))),DotVar4)),_1,_2,_3),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(62cac6bdd4032ddefb1e4d8c39d9d90ab4a9c094fb953cf1bdc8bd9598accb04) contentStartColumn(8) contentStartLine(198) org.kframework.attributes.Location(Location(198,8,200,53)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule38LHS{}(SortGeneratedCounterCell{},SortK{},SortMap{},SortMap{},SortId{},SortKItem{},SortInt{},SortFunctionCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortEnvCell{}) : SortGeneratedTopCell{}
  where rule38LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{},Var'Unds'9:SortEnvCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExpMod{}, SortKItem{}}(Lbl'UndsPlusPlusUnds'KT-SYNTAX'Unds'AExpMod'Unds'Id{}(VarI:SortId{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},\and{SortEnvCell{}}(Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),VarL:SortKItem{}),VarDotVar3:SortMap{})),Var'Unds'9:SortEnvCell{}),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarL:SortKItem{},inj{SortInt{}, SortKItem{}}(VarV:SortInt{})),VarDotVar4:SortMap{})),Var'Unds'1:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule38LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{},Var'Unds'9:SortEnvCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortSkip{}, SortKItem{}}(LblSkip'Unds'KT-SYNTAX'Unds'Skip{}()),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'9:SortEnvCell{},Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarL:SortKItem{},inj{SortInt{}, SortKItem{}}(Lbl'UndsPlus'Int'Unds'{}(VarV:SortInt{},\dv{SortInt{}}("1")))),VarDotVar4:SortMap{})),Var'Unds'1:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("198"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(198,8,200,53)"), UNIQUE'Unds'ID{}("62cac6bdd4032ddefb1e4d8c39d9d90ab4a9c094fb953cf1bdc8bd9598accb04")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_+__KT-SYNTAX_AExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_+__KT-SYNTAX_AExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(16adf00d1bb9dcf5431803e954c53b3ebd4f5f6e2f5a7bce7445d4af8b4ae33c) heat() org.kframework.attributes.Location(Location(115,19,115,43)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) seqstrict()]
  alias rule39LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule39LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule39LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(115,19,115,43)"), UNIQUE'Unds'ID{}("16adf00d1bb9dcf5431803e954c53b3ebd4f5f6e2f5a7bce7445d4af8b4ae33c"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_+__KT-SYNTAX_AExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_+__KT-SYNTAX_AExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(isKResult(inj{AExp,KItem}(K0)),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(030b835cc0e0408fa59bdf4a3cea58c828effc9535dc81f9ecf9b65f28cc6ed8) heat() org.kframework.attributes.Location(Location(115,19,115,43)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) seqstrict()]
  alias rule40LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule40LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule40LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(115,19,115,43)"), UNIQUE'Unds'ID{}("030b835cc0e0408fa59bdf4a3cea58c828effc9535dc81f9ecf9b65f28cc6ed8"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_+__KT-SYNTAX_AExp_AExp_AExp`(inj{Int,AExp}(I1),inj{Int,AExp}(I2)))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Int,KItem}(`_+Int_`(I1,I2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(84cb4602d86fc8dd351a6ce9617c99886ff696489a3beca94f4f5af13c4ed39b) contentStartColumn(8) contentStartLine(338) org.kframework.attributes.Location(Location(338,8,338,37)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule41LHS{}(SortGeneratedCounterCell{},SortK{},SortInt{},SortInt{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule41LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(VarI1:SortInt{}),inj{SortInt{}, SortAExp{}}(VarI2:SortInt{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule41LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'UndsPlus'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("338"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(338,8,338,37)"), UNIQUE'Unds'ID{}("84cb4602d86fc8dd351a6ce9617c99886ff696489a3beca94f4f5af13c4ed39b")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_+__KT-SYNTAX_AExp_AExp_AExp`(inj{String,AExp}(S1),inj{String,AExp}(S2)))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{String,KItem}(`_+String__STRING_String_String_String`(S1,S2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0ad063f426c15ef72dffe50006b3a377e9af61e85661444f85d1951ed0eeda0d) contentStartColumn(8) contentStartLine(346) org.kframework.attributes.Location(Location(346,8,346,46)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule42LHS{}(SortGeneratedCounterCell{},SortK{},SortString{},SortString{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule42LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS1:SortString{},VarS2:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(inj{SortString{}, SortAExp{}}(VarS1:SortString{}),inj{SortString{}, SortAExp{}}(VarS2:SortString{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule42LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS1:SortString{},VarS2:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortString{}, SortKItem{}}(Lbl'UndsPlus'String'UndsUnds'STRING'Unds'String'Unds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("346"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(346,8,346,46)"), UNIQUE'Unds'ID{}("0ad063f426c15ef72dffe50006b3a377e9af61e85661444f85d1951ed0eeda0d")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{AExpMod,KItem}(`_--_KT-SYNTAX_AExpMod_Id`(I))~>DotVar2),_0,`<env>`(`_Map_`(`_|->_`(inj{Id,KItem}(I),L),DotVar3)) #as _9,`<store>`(`_Map_`(`_|->_`(L,inj{Int,KItem}(V)),DotVar4)),_1,_2,_3),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Skip,KItem}(`Skip_KT-SYNTAX_Skip`(.KList))~>DotVar2),_0,_9,`<store>`(`_Map_`(`_|->_`(L,inj{Int,KItem}(`_-Int_`(V,#token("1","Int")))),DotVar4)),_1,_2,_3),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0a4f0bc6efd4ee15c000866b16ccfc9d6fd9617fdbd7c57fa5f3e236819716f5) contentStartColumn(8) contentStartLine(202) org.kframework.attributes.Location(Location(202,8,204,53)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule43LHS{}(SortGeneratedCounterCell{},SortK{},SortMap{},SortMap{},SortId{},SortKItem{},SortInt{},SortFunctionCell{},SortMultsCell{},SortOutCell{},SortLocCell{},SortEnvCell{}) : SortGeneratedTopCell{}
  where rule43LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{},Var'Unds'9:SortEnvCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExpMod{}, SortKItem{}}(Lbl'Unds'--'Unds'KT-SYNTAX'Unds'AExpMod'Unds'Id{}(VarI:SortId{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},\and{SortEnvCell{}}(Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),VarL:SortKItem{}),VarDotVar3:SortMap{})),Var'Unds'9:SortEnvCell{}),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarL:SortKItem{},inj{SortInt{}, SortKItem{}}(VarV:SortInt{})),VarDotVar4:SortMap{})),Var'Unds'1:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule43LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{},Var'Unds'9:SortEnvCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortSkip{}, SortKItem{}}(LblSkip'Unds'KT-SYNTAX'Unds'Skip{}()),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'9:SortEnvCell{},Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarL:SortKItem{},inj{SortInt{}, SortKItem{}}(Lbl'Unds'-Int'Unds'{}(VarV:SortInt{},\dv{SortInt{}}("1")))),VarDotVar4:SortMap{})),Var'Unds'1:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("202"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(202,8,204,53)"), UNIQUE'Unds'ID{}("0a4f0bc6efd4ee15c000866b16ccfc9d6fd9617fdbd7c57fa5f3e236819716f5")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_-__KT-SYNTAX_AExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_-__KT-SYNTAX_AExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(103669c71b52063f6ac1ccff5b645ed5be5368fa30ecf90ff1c43641467d14dc) heat() org.kframework.attributes.Location(Location(114,19,114,43)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) seqstrict()]
  alias rule44LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule44LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule44LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(114,19,114,43)"), UNIQUE'Unds'ID{}("103669c71b52063f6ac1ccff5b645ed5be5368fa30ecf90ff1c43641467d14dc"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_-__KT-SYNTAX_AExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_-__KT-SYNTAX_AExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(isKResult(inj{AExp,KItem}(K0)),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(f3aff125f93b7744f017f5b5d39e96193732733d43aa9a2bc14ca950c1ec00d3) heat() org.kframework.attributes.Location(Location(114,19,114,43)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) seqstrict()]
  alias rule45LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule45LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule45LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(114,19,114,43)"), UNIQUE'Unds'ID{}("f3aff125f93b7744f017f5b5d39e96193732733d43aa9a2bc14ca950c1ec00d3"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_-__KT-SYNTAX_AExp_AExp_AExp`(inj{Int,AExp}(I1),inj{Int,AExp}(I2)))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Int,KItem}(`_-Int_`(I1,I2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4aba07a7977fd35dc54963ec523b02afe91a8d2550e3758b13ba3a78abfe9b72) contentStartColumn(8) contentStartLine(339) org.kframework.attributes.Location(Location(339,8,339,37)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule46LHS{}(SortGeneratedCounterCell{},SortK{},SortInt{},SortInt{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule46LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'Unds'-'UndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(VarI1:SortInt{}),inj{SortInt{}, SortAExp{}}(VarI2:SortInt{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule46LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'Unds'-Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("339"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(339,8,339,37)"), UNIQUE'Unds'ID{}("4aba07a7977fd35dc54963ec523b02afe91a8d2550e3758b13ba3a78abfe9b72")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_/__KT-SYNTAX_AExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_/__KT-SYNTAX_AExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(fd7bd2133659426d0ef549b09640daa2e02b71044c7bd5090e9dbc7587d1a4f0) heat() org.kframework.attributes.Location(Location(113,25,113,49)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) seqstrict()]
  alias rule47LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule47LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule47LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(113,25,113,49)"), UNIQUE'Unds'ID{}("fd7bd2133659426d0ef549b09640daa2e02b71044c7bd5090e9dbc7587d1a4f0"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_/__KT-SYNTAX_AExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_/__KT-SYNTAX_AExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(isKResult(inj{AExp,KItem}(K0)),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(ab14aecc7389cc2dcd92445d379fd8adad4bb87742a4d550c99b2c47f506f304) heat() org.kframework.attributes.Location(Location(113,25,113,49)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) seqstrict()]
  alias rule48LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule48LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule48LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(113,25,113,49)"), UNIQUE'Unds'ID{}("ab14aecc7389cc2dcd92445d379fd8adad4bb87742a4d550c99b2c47f506f304"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(`_/__KT-SYNTAX_AExp_AExp_AExp`(inj{Int,AExp}(I1),inj{Int,AExp}(I2)))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Int,KItem}(`_/Int_`(I1,I2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3460746545052b50711e168c01ca63cfd12d98c570891945486e54f9a90aa021) contentStartColumn(8) contentStartLine(341) org.kframework.attributes.Location(Location(341,8,341,37)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule49LHS{}(SortGeneratedCounterCell{},SortK{},SortInt{},SortInt{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule49LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'KT-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(VarI1:SortInt{}),inj{SortInt{}, SortAExp{}}(VarI2:SortInt{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule49LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'UndsSlsh'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("341"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(341,8,341,37)"), UNIQUE'Unds'ID{}("3460746545052b50711e168c01ca63cfd12d98c570891945486e54f9a90aa021")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_<=__KT-SYNTAX_BExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_<=__KT-SYNTAX_BExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(de3be33fa9edb98d6864f65b68da1f3bcaa859c8860d6e97939e269a7ee5be39) heat() org.kframework.attributes.Location(Location(103,19,103,41)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule50LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule50LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule50LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(103,19,103,41)"), UNIQUE'Unds'ID{}("de3be33fa9edb98d6864f65b68da1f3bcaa859c8860d6e97939e269a7ee5be39")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_<=__KT-SYNTAX_BExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_<=__KT-SYNTAX_BExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(09d8610b09cc539e6593587956249c703a6679500830f28ad593d3d81040ac22) heat() org.kframework.attributes.Location(Location(103,19,103,41)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule51LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule51LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule51LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(103,19,103,41)"), UNIQUE'Unds'ID{}("09d8610b09cc539e6593587956249c703a6679500830f28ad593d3d81040ac22")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_<=__KT-SYNTAX_BExp_AExp_AExp`(inj{Int,AExp}(I1),inj{Int,AExp}(I2)))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Bool,KItem}(`_<=Int_`(I1,I2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8482c387a13b70ea974bf862a531b6e3d8c7b7e3d6546d5d18a5509e037b89c2) contentStartColumn(8) contentStartLine(343) org.kframework.attributes.Location(Location(343,8,343,39)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule52LHS{}(SortGeneratedCounterCell{},SortK{},SortInt{},SortInt{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule52LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(VarI1:SortInt{}),inj{SortInt{}, SortAExp{}}(VarI2:SortInt{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule52LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBool{}, SortKItem{}}(Lbl'Unds-LT-Eqls'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("343"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(343,8,343,39)"), UNIQUE'Unds'ID{}("8482c387a13b70ea974bf862a531b6e3d8c7b7e3d6546d5d18a5509e037b89c2")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_<__KT-SYNTAX_BExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_<__KT-SYNTAX_BExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(7221fe55a181dc28dcb2e31c3f9a5c34ea1bbfe70dcdfa101086234fa1f79de9) heat() org.kframework.attributes.Location(Location(102,19,102,40)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule53LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule53LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule53LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(102,19,102,40)"), UNIQUE'Unds'ID{}("7221fe55a181dc28dcb2e31c3f9a5c34ea1bbfe70dcdfa101086234fa1f79de9")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_<__KT-SYNTAX_BExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_<__KT-SYNTAX_BExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(8cb2694a91bc24701cb2b418d8265a3d0a8f0e757a6f18c18ac4e76d99c3fe2a) heat() org.kframework.attributes.Location(Location(102,19,102,40)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule54LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule54LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule54LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(102,19,102,40)"), UNIQUE'Unds'ID{}("8cb2694a91bc24701cb2b418d8265a3d0a8f0e757a6f18c18ac4e76d99c3fe2a")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_<__KT-SYNTAX_BExp_AExp_AExp`(inj{Int,AExp}(I1),inj{Int,AExp}(I2)))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Bool,KItem}(`_<Int_`(I1,I2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e55a4d7ce9d959d237a2aced63edd6ec2f9d7d5a309ec58d410d4eace2d7b3e4) contentStartColumn(8) contentStartLine(342) org.kframework.attributes.Location(Location(342,8,342,37)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule55LHS{}(SortGeneratedCounterCell{},SortK{},SortInt{},SortInt{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule55LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(VarI1:SortInt{}),inj{SortInt{}, SortAExp{}}(VarI2:SortInt{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule55LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBool{}, SortKItem{}}(Lbl'Unds-LT-'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("342"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(342,8,342,37)"), UNIQUE'Unds'ID{}("e55a4d7ce9d959d237a2aced63edd6ec2f9d7d5a309ec58d410d4eace2d7b3e4")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_==__KT-SYNTAX_BExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_==__KT-SYNTAX_BExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(b51f2bcda112792c6d61d445d65f65078cc17045f3debbe8b18fa59987a744cc) heat() org.kframework.attributes.Location(Location(101,19,101,41)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule56LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule56LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule56LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(101,19,101,41)"), UNIQUE'Unds'ID{}("b51f2bcda112792c6d61d445d65f65078cc17045f3debbe8b18fa59987a744cc")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_==__KT-SYNTAX_BExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_==__KT-SYNTAX_BExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(3e2254146a8b247081357e3e992bb9062927f41e078bf1469e61519c2652f244) heat() org.kframework.attributes.Location(Location(101,19,101,41)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule57LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule57LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule57LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(101,19,101,41)"), UNIQUE'Unds'ID{}("3e2254146a8b247081357e3e992bb9062927f41e078bf1469e61519c2652f244")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_==__KT-SYNTAX_BExp_AExp_AExp`(inj{Int,AExp}(I1),inj{Int,AExp}(I2)))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Bool,KItem}(`_==Int_`(I1,I2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d8211cb43876369ee1a405ef1386051dcf244e45c44a77148bf196411bb99fd9) contentStartColumn(8) contentStartLine(337) org.kframework.attributes.Location(Location(337,8,337,39)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule58LHS{}(SortGeneratedCounterCell{},SortK{},SortInt{},SortInt{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule58LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'UndsEqlsEqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(VarI1:SortInt{}),inj{SortInt{}, SortAExp{}}(VarI2:SortInt{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule58LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBool{}, SortKItem{}}(Lbl'UndsEqlsEqls'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("337"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(337,8,337,39)"), UNIQUE'Unds'ID{}("d8211cb43876369ee1a405ef1386051dcf244e45c44a77148bf196411bb99fd9")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_=__KT-SYNTAX_Assigner_DeclaredVar_AExp0_`(inj{DeclaredVar,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(8049af300cc0f3590433dd1de044248aa097c708793fcc5497aa3ad1f1aac2d9) heat() org.kframework.attributes.Location(Location(52,23,52,54)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict(2)]
  alias rule59LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortDeclaredVar{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule59LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortDeclaredVar{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(VarK0:SortDeclaredVar{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule59LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortDeclaredVar{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp0'Unds'{}(kseq{}(inj{SortDeclaredVar{}, SortKItem{}}(VarK0:SortDeclaredVar{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [strict{}("2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(52,23,52,54)"), UNIQUE'Unds'ID{}("8049af300cc0f3590433dd1de044248aa097c708793fcc5497aa3ad1f1aac2d9")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(`___KT-SYNTAX_DeclaredVar_VariableType_Ids`(`val_KT-SYNTAX_VariableType`(.KList) #as _8,`_,__KT-SYNTAX_Ids_Id_Ids`(I,Is)),inj{String,AExp}(Stg) #as _10))~>DotVar2),_0,`<env>`(MEnv),`<store>`(MStore),`<mults>`(Mults),_1,`<loc>`(L)),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(`___KT-SYNTAX_DeclaredVar_VariableType_Ids`(_8,Is),_10))~>DotVar2),_0,`<env>`(`_Map_`(MEnv,`_|->_`(inj{Id,KItem}(I),inj{Int,KItem}(L)))),`<store>`(`_Map_`(MStore,`_|->_`(inj{Int,KItem}(L),inj{String,KItem}(Stg)))),`<mults>`(`_Map_`(Mults,`_|->_`(inj{Int,KItem}(L),inj{Int,KItem}(#token("0","Int"))))),_1,`<loc>`(`_+Int_`(L,#token("1","Int")))),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0276393465fffc31c3f38240512534e9fd0dd6b4eab737e11ec6cfa1e2a7191f) contentStartColumn(8) contentStartLine(231) org.kframework.attributes.Location(Location(231,8,235,37)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule60LHS{}(SortGeneratedCounterCell{},SortK{},SortId{},SortIds{},SortInt{},SortMap{},SortMap{},SortMap{},SortString{},SortFunctionCell{},SortOutCell{},SortAExp{},SortVariableType{}) : SortGeneratedTopCell{}
  where rule60LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarIs:SortIds{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarStg:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{},Var'Unds'10:SortAExp{},Var'Unds'8:SortVariableType{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(\and{SortVariableType{}}(Lblval'Unds'KT-SYNTAX'Unds'VariableType{}(),Var'Unds'8:SortVariableType{}),Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(VarI:SortId{},VarIs:SortIds{})),\and{SortAExp{}}(inj{SortString{}, SortAExp{}}(VarStg:SortString{}),Var'Unds'10:SortAExp{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(VarMEnv:SortMap{}),Lbl'-LT-'store'-GT-'{}(VarMStore:SortMap{}),Lbl'-LT-'mults'-GT-'{}(VarMults:SortMap{}),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(VarL:SortInt{})),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule60LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarIs:SortIds{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarStg:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{},Var'Unds'10:SortAExp{},Var'Unds'8:SortVariableType{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(Var'Unds'8:SortVariableType{},VarIs:SortIds{}),Var'Unds'10:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMEnv:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),inj{SortInt{}, SortKItem{}}(VarL:SortInt{})))),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMStore:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortString{}, SortKItem{}}(VarStg:SortString{})))),Lbl'-LT-'mults'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMults:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortInt{}, SortKItem{}}(\dv{SortInt{}}("0"))))),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(VarL:SortInt{},\dv{SortInt{}}("1")))),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("231"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(231,8,235,37)"), UNIQUE'Unds'ID{}("0276393465fffc31c3f38240512534e9fd0dd6b4eab737e11ec6cfa1e2a7191f")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(`___KT-SYNTAX_DeclaredVar_VariableType_Ids`(`val_KT-SYNTAX_VariableType`(.KList) #as _8,`_,__KT-SYNTAX_Ids_Id_Ids`(I,Is)),inj{Int,AExp}(V) #as _10))~>DotVar2),_0,`<env>`(MEnv),`<store>`(MStore),`<mults>`(Mults),_1,`<loc>`(L)),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(`___KT-SYNTAX_DeclaredVar_VariableType_Ids`(_8,Is),_10))~>DotVar2),_0,`<env>`(`_Map_`(MEnv,`_|->_`(inj{Id,KItem}(I),inj{Int,KItem}(L)))),`<store>`(`_Map_`(MStore,`_|->_`(inj{Int,KItem}(L),inj{Int,KItem}(V)))),`<mults>`(`_Map_`(Mults,`_|->_`(inj{Int,KItem}(L),inj{Int,KItem}(#token("0","Int"))))),_1,`<loc>`(`_+Int_`(L,#token("1","Int")))),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ede7560249f268e5bcc145690c711d41cac6c8956ddb74d3999c049fc47a6513) contentStartColumn(8) contentStartLine(160) org.kframework.attributes.Location(Location(160,8,164,37)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule61LHS{}(SortGeneratedCounterCell{},SortK{},SortId{},SortIds{},SortInt{},SortMap{},SortMap{},SortMap{},SortInt{},SortFunctionCell{},SortOutCell{},SortAExp{},SortVariableType{}) : SortGeneratedTopCell{}
  where rule61LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarIs:SortIds{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{},Var'Unds'10:SortAExp{},Var'Unds'8:SortVariableType{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(\and{SortVariableType{}}(Lblval'Unds'KT-SYNTAX'Unds'VariableType{}(),Var'Unds'8:SortVariableType{}),Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(VarI:SortId{},VarIs:SortIds{})),\and{SortAExp{}}(inj{SortInt{}, SortAExp{}}(VarV:SortInt{}),Var'Unds'10:SortAExp{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(VarMEnv:SortMap{}),Lbl'-LT-'store'-GT-'{}(VarMStore:SortMap{}),Lbl'-LT-'mults'-GT-'{}(VarMults:SortMap{}),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(VarL:SortInt{})),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule61LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarIs:SortIds{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{},Var'Unds'10:SortAExp{},Var'Unds'8:SortVariableType{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(Var'Unds'8:SortVariableType{},VarIs:SortIds{}),Var'Unds'10:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMEnv:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),inj{SortInt{}, SortKItem{}}(VarL:SortInt{})))),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMStore:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortInt{}, SortKItem{}}(VarV:SortInt{})))),Lbl'-LT-'mults'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMults:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortInt{}, SortKItem{}}(\dv{SortInt{}}("0"))))),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(VarL:SortInt{},\dv{SortInt{}}("1")))),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("160"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(160,8,164,37)"), UNIQUE'Unds'ID{}("ede7560249f268e5bcc145690c711d41cac6c8956ddb74d3999c049fc47a6513")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(`___KT-SYNTAX_DeclaredVar_VariableType_Ids`(`var_KT-SYNTAX_VariableType`(.KList) #as _8,`_,__KT-SYNTAX_Ids_Id_Ids`(I,Is)),inj{String,AExp}(S) #as _10))~>DotVar2),_0,`<env>`(MEnv),`<store>`(MStore),`<mults>`(Mults),_1,`<loc>`(L)),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(`___KT-SYNTAX_DeclaredVar_VariableType_Ids`(_8,Is),_10))~>DotVar2),_0,`<env>`(`_Map_`(MEnv,`_|->_`(inj{Id,KItem}(I),inj{Int,KItem}(L)))),`<store>`(`_Map_`(MStore,`_|->_`(inj{Int,KItem}(L),inj{String,KItem}(S)))),`<mults>`(`_Map_`(Mults,`_|->_`(inj{Int,KItem}(L),inj{Int,KItem}(#token("1","Int"))))),_1,`<loc>`(`_+Int_`(L,#token("1","Int")))),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(436cdb987de41ca5b2f78a2d3cf1fc7bd73b3df36bfea1875e55272fffd96b34) contentStartColumn(8) contentStartLine(219) org.kframework.attributes.Location(Location(219,8,223,37)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule62LHS{}(SortGeneratedCounterCell{},SortK{},SortId{},SortIds{},SortInt{},SortMap{},SortMap{},SortMap{},SortString{},SortFunctionCell{},SortOutCell{},SortAExp{},SortVariableType{}) : SortGeneratedTopCell{}
  where rule62LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarIs:SortIds{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarS:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{},Var'Unds'10:SortAExp{},Var'Unds'8:SortVariableType{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(\and{SortVariableType{}}(Lblvar'Unds'KT-SYNTAX'Unds'VariableType{}(),Var'Unds'8:SortVariableType{}),Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(VarI:SortId{},VarIs:SortIds{})),\and{SortAExp{}}(inj{SortString{}, SortAExp{}}(VarS:SortString{}),Var'Unds'10:SortAExp{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(VarMEnv:SortMap{}),Lbl'-LT-'store'-GT-'{}(VarMStore:SortMap{}),Lbl'-LT-'mults'-GT-'{}(VarMults:SortMap{}),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(VarL:SortInt{})),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule62LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarIs:SortIds{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarS:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{},Var'Unds'10:SortAExp{},Var'Unds'8:SortVariableType{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(Var'Unds'8:SortVariableType{},VarIs:SortIds{}),Var'Unds'10:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMEnv:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),inj{SortInt{}, SortKItem{}}(VarL:SortInt{})))),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMStore:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortString{}, SortKItem{}}(VarS:SortString{})))),Lbl'-LT-'mults'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMults:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortInt{}, SortKItem{}}(\dv{SortInt{}}("1"))))),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(VarL:SortInt{},\dv{SortInt{}}("1")))),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("219"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(219,8,223,37)"), UNIQUE'Unds'ID{}("436cdb987de41ca5b2f78a2d3cf1fc7bd73b3df36bfea1875e55272fffd96b34")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(`___KT-SYNTAX_DeclaredVar_VariableType_Ids`(`var_KT-SYNTAX_VariableType`(.KList) #as _8,`_,__KT-SYNTAX_Ids_Id_Ids`(I,Is)),inj{Int,AExp}(V) #as _10))~>DotVar2),_0,`<env>`(MEnv),`<store>`(MStore),`<mults>`(Mults),_1,`<loc>`(L)),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(`___KT-SYNTAX_DeclaredVar_VariableType_Ids`(_8,Is),_10))~>DotVar2),_0,`<env>`(`_Map_`(MEnv,`_|->_`(inj{Id,KItem}(I),inj{Int,KItem}(L)))),`<store>`(`_Map_`(MStore,`_|->_`(inj{Int,KItem}(L),inj{Int,KItem}(V)))),`<mults>`(`_Map_`(Mults,`_|->_`(inj{Int,KItem}(L),inj{Int,KItem}(#token("1","Int"))))),_1,`<loc>`(`_+Int_`(L,#token("1","Int")))),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c6ba7ffbe38bebd676121c2c0f752b6d1d5831e22c8034d37341dd00c9bf19e2) contentStartColumn(8) contentStartLine(154) org.kframework.attributes.Location(Location(154,8,158,37)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule63LHS{}(SortGeneratedCounterCell{},SortK{},SortId{},SortIds{},SortInt{},SortMap{},SortMap{},SortMap{},SortInt{},SortFunctionCell{},SortOutCell{},SortAExp{},SortVariableType{}) : SortGeneratedTopCell{}
  where rule63LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarIs:SortIds{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{},Var'Unds'10:SortAExp{},Var'Unds'8:SortVariableType{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(\and{SortVariableType{}}(Lblvar'Unds'KT-SYNTAX'Unds'VariableType{}(),Var'Unds'8:SortVariableType{}),Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(VarI:SortId{},VarIs:SortIds{})),\and{SortAExp{}}(inj{SortInt{}, SortAExp{}}(VarV:SortInt{}),Var'Unds'10:SortAExp{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(VarMEnv:SortMap{}),Lbl'-LT-'store'-GT-'{}(VarMStore:SortMap{}),Lbl'-LT-'mults'-GT-'{}(VarMults:SortMap{}),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(VarL:SortInt{})),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule63LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarIs:SortIds{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{},Var'Unds'10:SortAExp{},Var'Unds'8:SortVariableType{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(Var'Unds'8:SortVariableType{},VarIs:SortIds{}),Var'Unds'10:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMEnv:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),inj{SortInt{}, SortKItem{}}(VarL:SortInt{})))),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMStore:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortInt{}, SortKItem{}}(VarV:SortInt{})))),Lbl'-LT-'mults'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMults:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortInt{}, SortKItem{}}(\dv{SortInt{}}("1"))))),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(VarL:SortInt{},\dv{SortInt{}}("1")))),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("154"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(154,8,158,37)"), UNIQUE'Unds'ID{}("c6ba7ffbe38bebd676121c2c0f752b6d1d5831e22c8034d37341dd00c9bf19e2")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(`___KT-SYNTAX_DeclaredVar_VariableType_Ids`(T,`.List{"_,__KT-SYNTAX_Ids_Id_Ids"}_Ids`(.KList)),inj{Int,AExp}(_0)))~>DotVar2),_1,_2,_3,_4,_5,_6),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Skip,KItem}(`Skip_KT-SYNTAX_Skip`(.KList))~>DotVar2),_1,_2,_3,_4,_5,_6),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(cdbecc0ea6046a7c83cadcab2ce6c8399c4359f82c3f0ae8a24f3e8c410f92b8) contentStartColumn(8) contentStartLine(125) org.kframework.attributes.Location(Location(125,8,125,43)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule64LHS{}(SortGeneratedCounterCell{},SortK{},SortVariableType{},SortInt{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule64LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarT:SortVariableType{},Var'Unds'0:SortInt{},Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(VarT:SortVariableType{},Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}()),inj{SortInt{}, SortAExp{}}(Var'Unds'0:SortInt{}))),VarDotVar2:SortK{})),Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule64LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarT:SortVariableType{},Var'Unds'0:SortInt{},Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortSkip{}, SortKItem{}}(LblSkip'Unds'KT-SYNTAX'Unds'Skip{}()),VarDotVar2:SortK{})),Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("125"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(125,8,125,43)"), UNIQUE'Unds'ID{}("cdbecc0ea6046a7c83cadcab2ce6c8399c4359f82c3f0ae8a24f3e8c410f92b8")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(`___KT-SYNTAX_DeclaredVar_VariableType_Ids`(T,`.List{"_,__KT-SYNTAX_Ids_Id_Ids"}_Ids`(.KList)),inj{String,AExp}(_0)))~>DotVar2),_1,_2,_3,_4,_5,_6),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Skip,KItem}(`Skip_KT-SYNTAX_Skip`(.KList))~>DotVar2),_1,_2,_3,_4,_5,_6),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bf68310778e8978bb6e699d52170a2e556956d443c743336d4421b3b7050eb32) contentStartColumn(8) contentStartLine(211) org.kframework.attributes.Location(Location(211,8,211,46)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule65LHS{}(SortGeneratedCounterCell{},SortK{},SortVariableType{},SortString{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule65LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarT:SortVariableType{},Var'Unds'0:SortString{},Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(VarT:SortVariableType{},Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}()),inj{SortString{}, SortAExp{}}(Var'Unds'0:SortString{}))),VarDotVar2:SortK{})),Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule65LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarT:SortVariableType{},Var'Unds'0:SortString{},Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortSkip{}, SortKItem{}}(LblSkip'Unds'KT-SYNTAX'Unds'Skip{}()),VarDotVar2:SortK{})),Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("211"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(211,8,211,46)"), UNIQUE'Unds'ID{}("bf68310778e8978bb6e699d52170a2e556956d443c743336d4421b3b7050eb32")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(`___KT-SYNTAX_DeclaredVar_VariableType_Ids`(`val_KT-SYNTAX_VariableType`(.KList),`_,__KT-SYNTAX_Ids_Id_Ids`(I,`.List{"_,__KT-SYNTAX_Ids_Id_Ids"}_Ids`(.KList))),inj{String,AExp}(Stg)))~>DotVar2),_0,`<env>`(MEnv),`<store>`(MStore),`<mults>`(Mults),_1,`<loc>`(L)),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Skip,KItem}(`Skip_KT-SYNTAX_Skip`(.KList))~>DotVar2),_0,`<env>`(`_Map_`(MEnv,`_|->_`(inj{Id,KItem}(I),inj{Int,KItem}(L)))),`<store>`(`_Map_`(MStore,`_|->_`(inj{Int,KItem}(L),inj{String,KItem}(Stg)))),`<mults>`(`_Map_`(Mults,`_|->_`(inj{Int,KItem}(L),inj{Int,KItem}(#token("0","Int"))))),_1,`<loc>`(`_+Int_`(L,#token("1","Int")))),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5eed346edac55064ddba92dc1eaae408454be8c49eefbfd1ddcb0866fa7255f5) contentStartColumn(8) contentStartLine(225) org.kframework.attributes.Location(Location(225,8,229,37)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule66LHS{}(SortGeneratedCounterCell{},SortK{},SortId{},SortInt{},SortMap{},SortMap{},SortMap{},SortString{},SortFunctionCell{},SortOutCell{}) : SortGeneratedTopCell{}
  where rule66LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarStg:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(Lblval'Unds'KT-SYNTAX'Unds'VariableType{}(),Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(VarI:SortId{},Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}())),inj{SortString{}, SortAExp{}}(VarStg:SortString{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(VarMEnv:SortMap{}),Lbl'-LT-'store'-GT-'{}(VarMStore:SortMap{}),Lbl'-LT-'mults'-GT-'{}(VarMults:SortMap{}),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(VarL:SortInt{})),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule66LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarStg:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortSkip{}, SortKItem{}}(LblSkip'Unds'KT-SYNTAX'Unds'Skip{}()),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMEnv:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),inj{SortInt{}, SortKItem{}}(VarL:SortInt{})))),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMStore:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortString{}, SortKItem{}}(VarStg:SortString{})))),Lbl'-LT-'mults'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMults:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortInt{}, SortKItem{}}(\dv{SortInt{}}("0"))))),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(VarL:SortInt{},\dv{SortInt{}}("1")))),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("225"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(225,8,229,37)"), UNIQUE'Unds'ID{}("5eed346edac55064ddba92dc1eaae408454be8c49eefbfd1ddcb0866fa7255f5")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(`___KT-SYNTAX_DeclaredVar_VariableType_Ids`(`val_KT-SYNTAX_VariableType`(.KList),`_,__KT-SYNTAX_Ids_Id_Ids`(I,`.List{"_,__KT-SYNTAX_Ids_Id_Ids"}_Ids`(.KList))),inj{Int,AExp}(V)))~>DotVar2),_0,`<env>`(MEnv),`<store>`(MStore),`<mults>`(Mults),_1,`<loc>`(L)),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Skip,KItem}(`Skip_KT-SYNTAX_Skip`(.KList))~>DotVar2),_0,`<env>`(`_Map_`(MEnv,`_|->_`(inj{Id,KItem}(I),inj{Int,KItem}(L)))),`<store>`(`_Map_`(MStore,`_|->_`(inj{Int,KItem}(L),inj{Int,KItem}(V)))),`<mults>`(`_Map_`(Mults,`_|->_`(inj{Int,KItem}(L),inj{Int,KItem}(#token("0","Int"))))),_1,`<loc>`(`_+Int_`(L,#token("1","Int")))),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(20af8ad2042cf06d1944152d4f6b7cf5cf741410ca70e831f8133fceb3525642) contentStartColumn(8) contentStartLine(146) org.kframework.attributes.Location(Location(146,8,150,37)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule67LHS{}(SortGeneratedCounterCell{},SortK{},SortId{},SortInt{},SortMap{},SortMap{},SortMap{},SortInt{},SortFunctionCell{},SortOutCell{}) : SortGeneratedTopCell{}
  where rule67LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(Lblval'Unds'KT-SYNTAX'Unds'VariableType{}(),Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(VarI:SortId{},Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}())),inj{SortInt{}, SortAExp{}}(VarV:SortInt{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(VarMEnv:SortMap{}),Lbl'-LT-'store'-GT-'{}(VarMStore:SortMap{}),Lbl'-LT-'mults'-GT-'{}(VarMults:SortMap{}),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(VarL:SortInt{})),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule67LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortSkip{}, SortKItem{}}(LblSkip'Unds'KT-SYNTAX'Unds'Skip{}()),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMEnv:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),inj{SortInt{}, SortKItem{}}(VarL:SortInt{})))),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMStore:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortInt{}, SortKItem{}}(VarV:SortInt{})))),Lbl'-LT-'mults'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMults:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortInt{}, SortKItem{}}(\dv{SortInt{}}("0"))))),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(VarL:SortInt{},\dv{SortInt{}}("1")))),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("146"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(146,8,150,37)"), UNIQUE'Unds'ID{}("20af8ad2042cf06d1944152d4f6b7cf5cf741410ca70e831f8133fceb3525642")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(`___KT-SYNTAX_DeclaredVar_VariableType_Ids`(`var_KT-SYNTAX_VariableType`(.KList),`_,__KT-SYNTAX_Ids_Id_Ids`(I,`.List{"_,__KT-SYNTAX_Ids_Id_Ids"}_Ids`(.KList))),inj{String,AExp}(S)))~>DotVar2),_0,`<env>`(MEnv),`<store>`(MStore),`<mults>`(Mults),_1,`<loc>`(L)),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Skip,KItem}(`Skip_KT-SYNTAX_Skip`(.KList))~>DotVar2),_0,`<env>`(`_Map_`(MEnv,`_|->_`(inj{Id,KItem}(I),inj{Int,KItem}(L)))),`<store>`(`_Map_`(MStore,`_|->_`(inj{Int,KItem}(L),inj{String,KItem}(S)))),`<mults>`(`_Map_`(Mults,`_|->_`(inj{Int,KItem}(L),inj{Int,KItem}(#token("1","Int"))))),_1,`<loc>`(`_+Int_`(L,#token("1","Int")))),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(477dc7a56bebd26696bcc0b6feae99fa6e411fd5b1274d20253d5ab42775d672) contentStartColumn(8) contentStartLine(213) org.kframework.attributes.Location(Location(213,8,217,37)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule68LHS{}(SortGeneratedCounterCell{},SortK{},SortId{},SortInt{},SortMap{},SortMap{},SortMap{},SortString{},SortFunctionCell{},SortOutCell{}) : SortGeneratedTopCell{}
  where rule68LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarS:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(Lblvar'Unds'KT-SYNTAX'Unds'VariableType{}(),Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(VarI:SortId{},Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}())),inj{SortString{}, SortAExp{}}(VarS:SortString{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(VarMEnv:SortMap{}),Lbl'-LT-'store'-GT-'{}(VarMStore:SortMap{}),Lbl'-LT-'mults'-GT-'{}(VarMults:SortMap{}),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(VarL:SortInt{})),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule68LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarS:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortSkip{}, SortKItem{}}(LblSkip'Unds'KT-SYNTAX'Unds'Skip{}()),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMEnv:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),inj{SortInt{}, SortKItem{}}(VarL:SortInt{})))),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMStore:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortString{}, SortKItem{}}(VarS:SortString{})))),Lbl'-LT-'mults'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMults:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortInt{}, SortKItem{}}(\dv{SortInt{}}("1"))))),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(VarL:SortInt{},\dv{SortInt{}}("1")))),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("213"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(213,8,217,37)"), UNIQUE'Unds'ID{}("477dc7a56bebd26696bcc0b6feae99fa6e411fd5b1274d20253d5ab42775d672")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(`___KT-SYNTAX_DeclaredVar_VariableType_Ids`(`var_KT-SYNTAX_VariableType`(.KList),`_,__KT-SYNTAX_Ids_Id_Ids`(I,`.List{"_,__KT-SYNTAX_Ids_Id_Ids"}_Ids`(.KList))),inj{Int,AExp}(V)))~>DotVar2),_0,`<env>`(MEnv),`<store>`(MStore),`<mults>`(Mults),_1,`<loc>`(L)),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Skip,KItem}(`Skip_KT-SYNTAX_Skip`(.KList))~>DotVar2),_0,`<env>`(`_Map_`(MEnv,`_|->_`(inj{Id,KItem}(I),inj{Int,KItem}(L)))),`<store>`(`_Map_`(MStore,`_|->_`(inj{Int,KItem}(L),inj{Int,KItem}(V)))),`<mults>`(`_Map_`(Mults,`_|->_`(inj{Int,KItem}(L),inj{Int,KItem}(#token("1","Int"))))),_1,`<loc>`(`_+Int_`(L,#token("1","Int")))),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7d65b97b30bd6b3e3d62fb281201ae155fe0d413aeb8f3e15766e806f51ecc8e) contentStartColumn(8) contentStartLine(140) org.kframework.attributes.Location(Location(140,8,144,37)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule69LHS{}(SortGeneratedCounterCell{},SortK{},SortId{},SortInt{},SortMap{},SortMap{},SortMap{},SortInt{},SortFunctionCell{},SortOutCell{}) : SortGeneratedTopCell{}
  where rule69LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(Lblvar'Unds'KT-SYNTAX'Unds'VariableType{}(),Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(VarI:SortId{},Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}())),inj{SortInt{}, SortAExp{}}(VarV:SortInt{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(VarMEnv:SortMap{}),Lbl'-LT-'store'-GT-'{}(VarMStore:SortMap{}),Lbl'-LT-'mults'-GT-'{}(VarMults:SortMap{}),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(VarL:SortInt{})),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule69LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortSkip{}, SortKItem{}}(LblSkip'Unds'KT-SYNTAX'Unds'Skip{}()),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMEnv:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),inj{SortInt{}, SortKItem{}}(VarL:SortInt{})))),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMStore:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortInt{}, SortKItem{}}(VarV:SortInt{})))),Lbl'-LT-'mults'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMults:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortInt{}, SortKItem{}}(\dv{SortInt{}}("1"))))),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(VarL:SortInt{},\dv{SortInt{}}("1")))),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("140"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(140,8,144,37)"), UNIQUE'Unds'ID{}("7d65b97b30bd6b3e3d62fb281201ae155fe0d413aeb8f3e15766e806f51ecc8e")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{UniqueIdAssigner,KItem}(`_=__KT-SYNTAX_UniqueIdAssigner_Id_AExp`(I,inj{String,AExp}(Stg)))~>DotVar2),_0,`<env>`(`_Map_`(`_|->_`(inj{Id,KItem}(I),L),DotVar3)) #as _10,_1,`<mults>`(`_Map_`(`_|->_`(L,inj{AExp,KItem}(S)),DotVar4)) #as _12,_2,_3),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`if(_)__KT-SYNTAX_Statement_BExp_Block`(`_>__KT-SYNTAX_BExp_AExp_AExp`(S,inj{Int,AExp}(#token("0","Int"))),`{_}_KT-SYNTAX_Block_Statement`(inj{LocalResString,Statement}(`localResString(_,_)_KT-SYNTAX_LocalResString_Id_String`(I,Stg)))))~>DotVar2),_0,_10,_1,_12,_2,_3),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8e7c8f94e2e558860633ea6cfb9de24da696b21d4d22333b20c482aeacff6bad) contentStartColumn(8) contentStartLine(238) org.kframework.attributes.Location(Location(238,8,240,40)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule70LHS{}(SortGeneratedCounterCell{},SortK{},SortMap{},SortMap{},SortId{},SortKItem{},SortAExp{},SortString{},SortFunctionCell{},SortStoreCell{},SortEnvCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule70LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarS:SortAExp{},VarStg:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortStoreCell{},Var'Unds'10:SortEnvCell{},Var'Unds'12:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortUniqueIdAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp{}(VarI:SortId{},inj{SortString{}, SortAExp{}}(VarStg:SortString{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},\and{SortEnvCell{}}(Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),VarL:SortKItem{}),VarDotVar3:SortMap{})),Var'Unds'10:SortEnvCell{}),Var'Unds'1:SortStoreCell{},\and{SortMultsCell{}}(Lbl'-LT-'mults'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarL:SortKItem{},inj{SortAExp{}, SortKItem{}}(VarS:SortAExp{})),VarDotVar4:SortMap{})),Var'Unds'12:SortMultsCell{}),Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule70LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarS:SortAExp{},VarStg:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortStoreCell{},Var'Unds'10:SortEnvCell{},Var'Unds'12:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarS:SortAExp{},inj{SortInt{}, SortAExp{}}(\dv{SortInt{}}("0"))),Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(inj{SortLocalResString{}, SortStatement{}}(LbllocalResString'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResString'Unds'Id'Unds'String{}(VarI:SortId{},VarStg:SortString{}))))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'10:SortEnvCell{},Var'Unds'1:SortStoreCell{},Var'Unds'12:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("238"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(238,8,240,40)"), UNIQUE'Unds'ID{}("8e7c8f94e2e558860633ea6cfb9de24da696b21d4d22333b20c482aeacff6bad")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{UniqueIdAssigner,KItem}(`_=__KT-SYNTAX_UniqueIdAssigner_Id_AExp`(I,inj{Int,AExp}(V)))~>DotVar2),_0,`<env>`(`_Map_`(`_|->_`(inj{Id,KItem}(I),L),DotVar3)) #as _10,_1,`<mults>`(`_Map_`(`_|->_`(L,inj{AExp,KItem}(S)),DotVar4)) #as _12,_2,_3),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`if(_)__KT-SYNTAX_Statement_BExp_Block`(`_>__KT-SYNTAX_BExp_AExp_AExp`(S,inj{Int,AExp}(#token("0","Int"))),`{_}_KT-SYNTAX_Block_Statement`(inj{LocalResInt,Statement}(`localResInt(_,_)_KT-SYNTAX_LocalResInt_Id_Int`(I,V)))))~>DotVar2),_0,_10,_1,_12,_2,_3),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(074c0c8da3421a6d68290ff378a9a8ed52242e8c870e0b0c6fb6401e9e1666cd) contentStartColumn(8) contentStartLine(173) org.kframework.attributes.Location(Location(173,8,175,40)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule71LHS{}(SortGeneratedCounterCell{},SortK{},SortMap{},SortMap{},SortId{},SortKItem{},SortAExp{},SortInt{},SortFunctionCell{},SortStoreCell{},SortEnvCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule71LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarS:SortAExp{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortStoreCell{},Var'Unds'10:SortEnvCell{},Var'Unds'12:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortUniqueIdAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp{}(VarI:SortId{},inj{SortInt{}, SortAExp{}}(VarV:SortInt{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},\and{SortEnvCell{}}(Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),VarL:SortKItem{}),VarDotVar3:SortMap{})),Var'Unds'10:SortEnvCell{}),Var'Unds'1:SortStoreCell{},\and{SortMultsCell{}}(Lbl'-LT-'mults'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarL:SortKItem{},inj{SortAExp{}, SortKItem{}}(VarS:SortAExp{})),VarDotVar4:SortMap{})),Var'Unds'12:SortMultsCell{}),Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule71LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarS:SortAExp{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortStoreCell{},Var'Unds'10:SortEnvCell{},Var'Unds'12:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarS:SortAExp{},inj{SortInt{}, SortAExp{}}(\dv{SortInt{}}("0"))),Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(inj{SortLocalResInt{}, SortStatement{}}(LbllocalResInt'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResInt'Unds'Id'Unds'Int{}(VarI:SortId{},VarV:SortInt{}))))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'10:SortEnvCell{},Var'Unds'1:SortStoreCell{},Var'Unds'12:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("173"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(173,8,175,40)"), UNIQUE'Unds'ID{}("074c0c8da3421a6d68290ff378a9a8ed52242e8c870e0b0c6fb6401e9e1666cd")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{UniqueIdAssigner,KItem}(`_=__KT-SYNTAX_UniqueIdAssigner_Id_AExp`(I1,inj{Id,AExp}(I2)))~>DotVar2),_0,`<env>`(`_Map_`(`_|->_`(inj{Id,KItem}(I1),L),DotVar3)) #as _10,_1,`<mults>`(`_Map_`(`_|->_`(L,inj{AExp,KItem}(S)),DotVar4)) #as _12,_2,_3),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`if(_)__KT-SYNTAX_Statement_BExp_Block`(`_>__KT-SYNTAX_BExp_AExp_AExp`(S,inj{Int,AExp}(#token("0","Int"))),`{_}_KT-SYNTAX_Block_Statement`(inj{LocalResId,Statement}(`localResId(_,_)_KT-SYNTAX_LocalResId_Id_Id`(I1,I2)))))~>DotVar2),_0,_10,_1,_12,_2,_3),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(cbfc596fa16b84d0420b4b899269896fa1099f16b90800f581eebcebb9baadf5) contentStartColumn(8) contentStartLine(183) org.kframework.attributes.Location(Location(183,8,185,40)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule72LHS{}(SortGeneratedCounterCell{},SortK{},SortMap{},SortMap{},SortId{},SortId{},SortKItem{},SortAExp{},SortFunctionCell{},SortStoreCell{},SortEnvCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule72LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI1:SortId{},VarI2:SortId{},VarL:SortKItem{},VarS:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortStoreCell{},Var'Unds'10:SortEnvCell{},Var'Unds'12:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortUniqueIdAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp{}(VarI1:SortId{},inj{SortId{}, SortAExp{}}(VarI2:SortId{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},\and{SortEnvCell{}}(Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI1:SortId{}),VarL:SortKItem{}),VarDotVar3:SortMap{})),Var'Unds'10:SortEnvCell{}),Var'Unds'1:SortStoreCell{},\and{SortMultsCell{}}(Lbl'-LT-'mults'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarL:SortKItem{},inj{SortAExp{}, SortKItem{}}(VarS:SortAExp{})),VarDotVar4:SortMap{})),Var'Unds'12:SortMultsCell{}),Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule72LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI1:SortId{},VarI2:SortId{},VarL:SortKItem{},VarS:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortStoreCell{},Var'Unds'10:SortEnvCell{},Var'Unds'12:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarS:SortAExp{},inj{SortInt{}, SortAExp{}}(\dv{SortInt{}}("0"))),Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(inj{SortLocalResId{}, SortStatement{}}(LbllocalResId'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResId'Unds'Id'Unds'Id{}(VarI1:SortId{},VarI2:SortId{}))))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'10:SortEnvCell{},Var'Unds'1:SortStoreCell{},Var'Unds'12:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("183"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(183,8,185,40)"), UNIQUE'Unds'ID{}("cbfc596fa16b84d0420b4b899269896fa1099f16b90800f581eebcebb9baadf5")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{UniqueIdAssigner,KItem}(`_=__KT-SYNTAX_UniqueIdAssigner_Id_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_=__KT-SYNTAX_UniqueIdAssigner_Id_AExp0_`(inj{Id,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(12bfb728262db8b7f82e3e4d91fc03606e3b8bfc2909ad20df1e49f32c6c4c83) heat() org.kframework.attributes.Location(Location(49,31,49,54)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict(2)]
  alias rule73LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortId{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule73LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortId{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortUniqueIdAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp{}(VarK0:SortId{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule73LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortId{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp0'Unds'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarK0:SortId{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [strict{}("2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(49,31,49,54)"), UNIQUE'Unds'ID{}("12bfb728262db8b7f82e3e4d91fc03606e3b8bfc2909ad20df1e49f32c6c4c83")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_>=__KT-SYNTAX_BExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_>=__KT-SYNTAX_BExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(4c467c85aacb888cbb4fba2563ce2a336109d7b1f18efc85d4ea67e2c9827a46) heat() org.kframework.attributes.Location(Location(105,19,105,41)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule74LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule74LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule74LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(105,19,105,41)"), UNIQUE'Unds'ID{}("4c467c85aacb888cbb4fba2563ce2a336109d7b1f18efc85d4ea67e2c9827a46")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_>=__KT-SYNTAX_BExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_>=__KT-SYNTAX_BExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(7a4d50a48848602b489c021a2d28f793ba67a56d7d0b23136582f57bb3ba776b) heat() org.kframework.attributes.Location(Location(105,19,105,41)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule75LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule75LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule75LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds-GT-EqlsUndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(105,19,105,41)"), UNIQUE'Unds'ID{}("7a4d50a48848602b489c021a2d28f793ba67a56d7d0b23136582f57bb3ba776b")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_>__KT-SYNTAX_BExp_AExp_AExp`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_>__KT-SYNTAX_BExp_AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(3eb2764c7e0a1d87a45a63fc24c18b4a95460a961cf87e82c5731b4de0780e11) heat() org.kframework.attributes.Location(Location(104,19,104,40)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule76LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule76LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule76LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(104,19,104,40)"), UNIQUE'Unds'ID{}("3eb2764c7e0a1d87a45a63fc24c18b4a95460a961cf87e82c5731b4de0780e11")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_>__KT-SYNTAX_BExp_AExp_AExp`(K0,HOLE))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_>__KT-SYNTAX_BExp_AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(5ceff271fe70871456e9e0d4d1dd8a864458044824b74bdb342902e2b5222a75) heat() org.kframework.attributes.Location(Location(104,19,104,40)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict()]
  alias rule77LHS{}(SortGeneratedCounterCell{},SortK{},SortAExp{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule77LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule77LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(104,19,104,40)"), UNIQUE'Unds'ID{}("5ceff271fe70871456e9e0d4d1dd8a864458044824b74bdb342902e2b5222a75")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(`_>__KT-SYNTAX_BExp_AExp_AExp`(inj{Int,AExp}(I1),inj{Int,AExp}(I2)))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Bool,KItem}(`_>Int_`(I1,I2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(fa8fe6d985de14b2c303e72c63e9707bdc24e5f330a83410a886e611ac4baf0b) contentStartColumn(8) contentStartLine(344) org.kframework.attributes.Location(Location(344,8,344,37)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule78LHS{}(SortGeneratedCounterCell{},SortK{},SortInt{},SortInt{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule78LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-GT-UndsUnds'KT-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(VarI1:SortInt{}),inj{SortInt{}, SortAExp{}}(VarI2:SortInt{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule78LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBool{}, SortKItem{}}(Lbl'Unds-GT-'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("344"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(344,8,344,37)"), UNIQUE'Unds'ID{}("fa8fe6d985de14b2c303e72c63e9707bdc24e5f330a83410a886e611ac4baf0b")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`_?_:__KT-SYNTAX_Statement_BExp_Block_Block`(HOLE,K1,K2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(HOLE)~>`#freezer_?_:__KT-SYNTAX_Statement_BExp_Block_Block1_`(inj{Block,KItem}(K1),inj{Block,KItem}(K2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{BExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(9207db56b4afe3b1358057cf11eae70f7fbdeed0a2114ce951a396f0299bfa4d) heat() org.kframework.attributes.Location(Location(58,23,58,58)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict(1)]
  alias rule79LHS{}(SortGeneratedCounterCell{},SortK{},SortBExp{},SortBlock{},SortBlock{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule79LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule79LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),kseq{}(Lbl'Hash'freezer'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block1'Unds'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarK1:SortBlock{}),dotk{}()),kseq{}(inj{SortBlock{}, SortKItem{}}(VarK2:SortBlock{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(58,23,58,58)"), UNIQUE'Unds'ID{}("9207db56b4afe3b1358057cf11eae70f7fbdeed0a2114ce951a396f0299bfa4d")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`_?_:__KT-SYNTAX_Statement_BExp_Block_Block`(inj{Bool,BExp}(#token("true","Bool") #as _13),B,_0))~>DotVar2),_1,_2,_3,_4,_5,_6),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Block,KItem}(B)~>DotVar2),_1,_2,_3,_4,_5,_6),DotVar0) requires _13 ensures _13 [UNIQUE_ID(69725fa4c5c1e6c5acba8a49be32e3fa1204460c9d45b224bd40027cfab02173) contentStartColumn(8) contentStartLine(334) org.kframework.attributes.Location(Location(334,8,334,31)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule80LHS{}(SortBlock{},SortGeneratedCounterCell{},SortK{},SortBlock{},SortFunctionCell{},SortBool{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule80LHS{}(VarB:SortBlock{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortBlock{},Var'Unds'1:SortFunctionCell{},Var'Unds'13:SortBool{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Var'Unds'13:SortBool{},
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(inj{SortBool{}, SortBExp{}}(\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'13:SortBool{})),VarB:SortBlock{},Var'Unds'0:SortBlock{})),VarDotVar2:SortK{})),Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule80LHS{}(VarB:SortBlock{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortBlock{},Var'Unds'1:SortFunctionCell{},Var'Unds'13:SortBool{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Var'Unds'13:SortBool{},
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarB:SortBlock{}),VarDotVar2:SortK{})),Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("334"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(334,8,334,31)"), UNIQUE'Unds'ID{}("69725fa4c5c1e6c5acba8a49be32e3fa1204460c9d45b224bd40027cfab02173")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`_?_:__KT-SYNTAX_Statement_BExp_Block_Block`(inj{Bool,BExp}(#token("false","Bool")),_0,B))~>DotVar2),_1,_2,_3,_4,_5,_6),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Block,KItem}(B)~>DotVar2),_1,_2,_3,_4,_5,_6),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1984a282e01c57b9fbbafb7ef550f17e31f6dfd1c021ff7da3a32b8c818ceccd) contentStartColumn(8) contentStartLine(335) org.kframework.attributes.Location(Location(335,8,335,32)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule81LHS{}(SortBlock{},SortGeneratedCounterCell{},SortK{},SortBlock{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule81LHS{}(VarB:SortBlock{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortBlock{},Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lbl'UndsQuesUndsColnUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'Block{}(inj{SortBool{}, SortBExp{}}(\dv{SortBool{}}("false")),Var'Unds'0:SortBlock{},VarB:SortBlock{})),VarDotVar2:SortK{})),Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule81LHS{}(VarB:SortBlock{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortBlock{},Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarB:SortBlock{}),VarDotVar2:SortK{})),Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("335"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(335,8,335,32)"), UNIQUE'Unds'ID{}("1984a282e01c57b9fbbafb7ef550f17e31f6dfd1c021ff7da3a32b8c818ceccd")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{KotIntVarAssign,KItem}(`__:Int_KT-SYNTAX_KotIntVarAssign_VariableType_Id`(T,I))~>DotVar2),_0,`<env>`(MEnv),`<store>`(MStore),`<mults>`(Mults),_1,`<loc>`(L)),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Skip,KItem}(`Skip_KT-SYNTAX_Skip`(.KList))~>DotVar2),_0,`<env>`(`_Map_`(MEnv,`_|->_`(inj{Id,KItem}(I),inj{Int,KItem}(L)))),`<store>`(`_Map_`(MStore,`_|->_`(inj{Int,KItem}(L),inj{Int,KItem}(#token("0","Int"))))),`<mults>`(`_Map_`(Mults,`_|->_`(inj{Int,KItem}(L),inj{Int,KItem}(#token("1","Int"))))),_1,`<loc>`(`_+Int_`(L,#token("1","Int")))),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b193b4e9a73efaf5dcd1ed33983a9db73b754c841143380cfc24f414b6bc6140) contentStartColumn(8) contentStartLine(132) org.kframework.attributes.Location(Location(132,8,136,35)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule82LHS{}(SortGeneratedCounterCell{},SortK{},SortId{},SortInt{},SortMap{},SortMap{},SortMap{},SortVariableType{},SortFunctionCell{},SortOutCell{}) : SortGeneratedTopCell{}
  where rule82LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarT:SortVariableType{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortKotIntVarAssign{}, SortKItem{}}(Lbl'UndsUndsColn'Int'Unds'KT-SYNTAX'Unds'KotIntVarAssign'Unds'VariableType'Unds'Id{}(VarT:SortVariableType{},VarI:SortId{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(VarMEnv:SortMap{}),Lbl'-LT-'store'-GT-'{}(VarMStore:SortMap{}),Lbl'-LT-'mults'-GT-'{}(VarMults:SortMap{}),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(VarL:SortInt{})),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule82LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarT:SortVariableType{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortSkip{}, SortKItem{}}(LblSkip'Unds'KT-SYNTAX'Unds'Skip{}()),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMEnv:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),inj{SortInt{}, SortKItem{}}(VarL:SortInt{})))),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMStore:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortInt{}, SortKItem{}}(\dv{SortInt{}}("0"))))),Lbl'-LT-'mults'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarMults:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortInt{}, SortKItem{}}(\dv{SortInt{}}("1"))))),Var'Unds'1:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(VarL:SortInt{},\dv{SortInt{}}("1")))),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("132"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(132,8,136,35)"), UNIQUE'Unds'ID{}("b193b4e9a73efaf5dcd1ed33983a9db73b754c841143380cfc24f414b6bc6140")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{KotIntVarAssign,KItem}(`__:Int_KT-SYNTAX_KotIntVarAssign_VariableType_Id`(T,Id))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Skip,KItem}(`Skip_KT-SYNTAX_Skip`(.KList))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(87ccf07e0787d945f245c15b834a15c566fd7cd1600313dd32a7d32d7557f07c) contentStartColumn(8) contentStartLine(128) org.kframework.attributes.Location(Location(128,8,128,39)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule83LHS{}(SortGeneratedCounterCell{},SortK{},SortId{},SortVariableType{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule83LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarId:SortId{},VarT:SortVariableType{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortKotIntVarAssign{}, SortKItem{}}(Lbl'UndsUndsColn'Int'Unds'KT-SYNTAX'Unds'KotIntVarAssign'Unds'VariableType'Unds'Id{}(VarT:SortVariableType{},VarId:SortId{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule83LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarId:SortId{},VarT:SortVariableType{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortSkip{}, SortKItem{}}(LblSkip'Unds'KT-SYNTAX'Unds'Skip{}()),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("128"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(128,8,128,39)"), UNIQUE'Unds'ID{}("87ccf07e0787d945f245c15b834a15c566fd7cd1600313dd32a7d32d7557f07c")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`___KT-SYNTAX_Statement_Statement_Statement`(S1,S2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(S1)~>inj{Statement,KItem}(S2)~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2e244984483ff152c6fba48002ff7ce4e3ad3bd36ef8632408c12077390c6914) contentStartColumn(8) contentStartLine(303) org.kframework.attributes.Location(Location(303,8,303,45)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) structural()]
  alias rule84LHS{}(SortGeneratedCounterCell{},SortK{},SortStatement{},SortStatement{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule84LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS1:SortStatement{},VarS2:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(VarS1:SortStatement{},VarS2:SortStatement{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule84LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS1:SortStatement{},VarS2:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(VarS1:SortStatement{}),kseq{}(inj{SortStatement{}, SortKItem{}}(VarS2:SortStatement{}),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("303"), contentStartColumn{}("8"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(303,8,303,45)"), UNIQUE'Unds'ID{}("2e244984483ff152c6fba48002ff7ce4e3ad3bd36ef8632408c12077390c6914")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{ElseIfStatement,KItem}(`else__KT-SYNTAX_ElseIfStatement_Block`(`{_}_KT-SYNTAX_Block_Statement`(S)))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(S)~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c53453cf0be665ce888754c54058a9f82367fe4b93802aa81def1ae0d29a544e) contentStartColumn(8) contentStartLine(332) org.kframework.attributes.Location(Location(332,8,332,23)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule85LHS{}(SortGeneratedCounterCell{},SortK{},SortStatement{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule85LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortElseIfStatement{}, SortKItem{}}(Lblelse'UndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'Block{}(Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(VarS:SortStatement{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule85LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(VarS:SortStatement{}),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("332"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(332,8,332,23)"), UNIQUE'Unds'ID{}("c53453cf0be665ce888754c54058a9f82367fe4b93802aa81def1ae0d29a544e")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{ElseIfStatement,KItem}(`elseif(_)__KT-SYNTAX_ElseIfStatement_BExp_Block`(B,`{_}_KT-SYNTAX_Block_Statement`(S) #as _11))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`if(_)__KT-SYNTAX_Statement_BExp_Block`(B,_11))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(49c7e7276bc871f7a5d610e21b4e525c9d3b5185bcd828c23e89dced39f931b7) contentStartColumn(8) contentStartLine(331) org.kframework.attributes.Location(Location(331,8,331,60)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule86LHS{}(SortBExp{},SortGeneratedCounterCell{},SortK{},SortStatement{},SortFunctionCell{},SortEnvCell{},SortBlock{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule86LHS{}(VarB:SortBExp{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'11:SortBlock{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortElseIfStatement{}, SortKItem{}}(Lblelseif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block{}(VarB:SortBExp{},\and{SortBlock{}}(Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(VarS:SortStatement{}),Var'Unds'11:SortBlock{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule86LHS{}(VarB:SortBExp{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'11:SortBlock{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(VarB:SortBExp{},Var'Unds'11:SortBlock{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("331"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(331,8,331,60)"), UNIQUE'Unds'ID{}("49c7e7276bc871f7a5d610e21b4e525c9d3b5185bcd828c23e89dced39f931b7")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{ElseIfStatement,KItem}(`elseif(_)___KT-SYNTAX_ElseIfStatement_BExp_Block_ElseIfStatement`(B,`{_}_KT-SYNTAX_Block_Statement`(S1) #as _11,S2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`if(_)___KT-SYNTAX_Statement_BExp_Block_ElseIfStatement`(B,_11,S2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f9516730554d4b01fae01d4cf5000d2c5112ea1434c1d08541dee7bd0b151feb) contentStartColumn(8) contentStartLine(330) org.kframework.attributes.Location(Location(330,8,330,84)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule87LHS{}(SortBExp{},SortGeneratedCounterCell{},SortK{},SortStatement{},SortElseIfStatement{},SortFunctionCell{},SortEnvCell{},SortBlock{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule87LHS{}(VarB:SortBExp{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS1:SortStatement{},VarS2:SortElseIfStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'11:SortBlock{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortElseIfStatement{}, SortKItem{}}(Lblelseif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'ElseIfStatement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(VarB:SortBExp{},\and{SortBlock{}}(Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(VarS1:SortStatement{}),Var'Unds'11:SortBlock{}),VarS2:SortElseIfStatement{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule87LHS{}(VarB:SortBExp{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS1:SortStatement{},VarS2:SortElseIfStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'11:SortBlock{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(VarB:SortBExp{},Var'Unds'11:SortBlock{},VarS2:SortElseIfStatement{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("330"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(330,8,330,84)"), UNIQUE'Unds'ID{}("f9516730554d4b01fae01d4cf5000d2c5112ea1434c1d08541dee7bd0b151feb")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`for(_;_;_)__KT-SYNTAX_Statement_Assigner_BExp_AExpMod_Block`(A,B,AEM,`{_}_KT-SYNTAX_Block_Statement`(S)))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Assigner,KItem}(A)~>inj{Statement,KItem}(`while(_)__KT-SYNTAX_Statement_BExp_Block`(B,`{_}_KT-SYNTAX_Block_Statement`(`___KT-SYNTAX_Statement_Statement_Statement`(S,inj{AExpMod,Statement}(AEM)))))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2cf4d51ff7b8955e8c1744d343efb21c32122a105da4732079bb3988e8b7d14b) contentStartColumn(8) contentStartLine(323) org.kframework.attributes.Location(Location(323,8,324,32)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) structural()]
  alias rule88LHS{}(SortAssigner{},SortAExpMod{},SortBExp{},SortGeneratedCounterCell{},SortK{},SortStatement{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule88LHS{}(VarA:SortAssigner{},VarAEM:SortAExpMod{},VarB:SortBExp{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblfor'LParUndsSClnUndsSClnUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Assigner'Unds'BExp'Unds'AExpMod'Unds'Block{}(VarA:SortAssigner{},VarB:SortBExp{},VarAEM:SortAExpMod{},Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(VarS:SortStatement{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule88LHS{}(VarA:SortAssigner{},VarAEM:SortAExpMod{},VarB:SortBExp{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(VarA:SortAssigner{}),kseq{}(inj{SortStatement{}, SortKItem{}}(Lblwhile'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(VarB:SortBExp{},Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(VarS:SortStatement{},inj{SortAExpMod{}, SortStatement{}}(VarAEM:SortAExpMod{}))))),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("323"), contentStartColumn{}("8"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(323,8,324,32)"), UNIQUE'Unds'ID{}("2cf4d51ff7b8955e8c1744d343efb21c32122a105da4732079bb3988e8b7d14b")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{KotlinFun,KItem}(`fun_(_):___KT-SYNTAX_KotlinFun_Id_Params_FunReturnType_Block`(I,P,VariableType,`{_}_KT-SYNTAX_Block_Statement`(S)))~>DotVar2),`<function>`(`_FunThreadCellMap_`(`.FunThreadCellMap`(.KList),DotVar3)),_0,_1,_2,_3,_4),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Skip,KItem}(`Skip_KT-SYNTAX_Skip`(.KList))~>DotVar2),`<function>`(`_FunThreadCellMap_`(`FunThreadCellMapItem`(`<id>`(inj{Id,KItem}(I)),`<funThread>`(`<id>`(inj{Id,KItem}(I)),`<scope>`(inj{Statement,KItem}(S)),`<params>`(inj{Params,KItem}(P)),`<temp>`(inj{Params,KItem}(P)),`<localEnv>`(`.Map`(.KList)))),DotVar3)),_0,_1,_2,_3,_4),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4b6b5e018a10ed6b454b474f7ba789d40429dea8b1c1babbd357d47b8d4073b4) contentStartColumn(8) contentStartLine(252) org.kframework.attributes.Location(Location(252,8,260,8)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule89LHS{}(SortGeneratedCounterCell{},SortK{},SortFunThreadCellMap{},SortId{},SortParams{},SortStatement{},SortFunReturnType{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule89LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortFunThreadCellMap{},VarI:SortId{},VarP:SortParams{},VarS:SortStatement{},VarVariableType:SortFunReturnType{},Var'Unds'0:SortEnvCell{},Var'Unds'1:SortStoreCell{},Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortKotlinFun{}, SortKItem{}}(Lblfun'UndsLParUndsRParColnUndsUndsUnds'KT-SYNTAX'Unds'KotlinFun'Unds'Id'Unds'Params'Unds'FunReturnType'Unds'Block{}(VarI:SortId{},VarP:SortParams{},VarVariableType:SortFunReturnType{},Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(VarS:SortStatement{}))),VarDotVar2:SortK{})),Lbl'-LT-'function'-GT-'{}(Lbl'Unds'FunThreadCellMap'Unds'{}(Lbl'Stop'FunThreadCellMap{}(),VarDotVar3:SortFunThreadCellMap{})),Var'Unds'0:SortEnvCell{},Var'Unds'1:SortStoreCell{},Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule89LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortFunThreadCellMap{},VarI:SortId{},VarP:SortParams{},VarS:SortStatement{},VarVariableType:SortFunReturnType{},Var'Unds'0:SortEnvCell{},Var'Unds'1:SortStoreCell{},Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortSkip{}, SortKItem{}}(LblSkip'Unds'KT-SYNTAX'Unds'Skip{}()),VarDotVar2:SortK{})),Lbl'-LT-'function'-GT-'{}(Lbl'Unds'FunThreadCellMap'Unds'{}(LblFunThreadCellMapItem{}(Lbl'-LT-'id'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),dotk{}())),Lbl'-LT-'funThread'-GT-'{}(Lbl'-LT-'id'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),dotk{}())),Lbl'-LT-'scope'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(VarS:SortStatement{}),dotk{}())),Lbl'-LT-'params'-GT-'{}(kseq{}(inj{SortParams{}, SortKItem{}}(VarP:SortParams{}),dotk{}())),Lbl'-LT-'temp'-GT-'{}(kseq{}(inj{SortParams{}, SortKItem{}}(VarP:SortParams{}),dotk{}())),Lbl'-LT-'localEnv'-GT-'{}(Lbl'Stop'Map{}()))),VarDotVar3:SortFunThreadCellMap{})),Var'Unds'0:SortEnvCell{},Var'Unds'1:SortStoreCell{},Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("252"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(252,8,260,8)"), UNIQUE'Unds'ID{}("4b6b5e018a10ed6b454b474f7ba789d40429dea8b1c1babbd357d47b8d4073b4")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{FunctionMain,KItem}(`funmain(){_}_KT-SYNTAX_FunctionMain_Block`(B))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Block,KItem}(B)~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ef2da7d12d7d0a888759d7c21e407f0440614755d2d084acb6e7ad77d29175d8) contentStartColumn(8) contentStartLine(298) org.kframework.attributes.Location(Location(298,8,298,35)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) structural()]
  alias rule90LHS{}(SortBlock{},SortGeneratedCounterCell{},SortK{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule90LHS{}(VarB:SortBlock{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortFunctionMain{}, SortKItem{}}(Lblfunmain'LParRParLBraUndsRBraUnds'KT-SYNTAX'Unds'FunctionMain'Unds'Block{}(VarB:SortBlock{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule90LHS{}(VarB:SortBlock{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarB:SortBlock{}),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("298"), contentStartColumn{}("8"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(298,8,298,35)"), UNIQUE'Unds'ID{}("ef2da7d12d7d0a888759d7c21e407f0440614755d2d084acb6e7ad77d29175d8")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`if(_)__KT-SYNTAX_Statement_BExp_Block`(HOLE,K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(HOLE)~>`#freezerif(_)__KT-SYNTAX_Statement_BExp_Block1_`(inj{Block,KItem}(K1))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{BExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(b168c1ae3ab34f5fbb14e812afc39a388b6e35ba70ce160368247b575379db2c) heat() org.kframework.attributes.Location(Location(57,24,57,58)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict(1)]
  alias rule91LHS{}(SortGeneratedCounterCell{},SortK{},SortBExp{},SortBlock{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule91LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(VarHOLE:SortBExp{},VarK1:SortBlock{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule91LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),kseq{}(Lbl'Hash'freezerif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block1'Unds'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarK1:SortBlock{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(57,24,57,58)"), UNIQUE'Unds'ID{}("b168c1ae3ab34f5fbb14e812afc39a388b6e35ba70ce160368247b575379db2c")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`if(_)__KT-SYNTAX_Statement_BExp_Block`(inj{Bool,BExp}(#token("true","Bool") #as _12),`{_}_KT-SYNTAX_Block_Statement`(S)))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(S)~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires _12 ensures _12 [UNIQUE_ID(1e69bec737eda621b0f9873c3aefa44dde7f1bd8e468c8a6ed5933742ada3c2e) contentStartColumn(8) contentStartLine(326) org.kframework.attributes.Location(Location(326,8,326,38)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule92LHS{}(SortGeneratedCounterCell{},SortK{},SortStatement{},SortFunctionCell{},SortEnvCell{},SortBool{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule92LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'12:SortBool{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Var'Unds'12:SortBool{},
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(inj{SortBool{}, SortBExp{}}(\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'12:SortBool{})),Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(VarS:SortStatement{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule92LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'12:SortBool{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Var'Unds'12:SortBool{},
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(VarS:SortStatement{}),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("326"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(326,8,326,38)"), UNIQUE'Unds'ID{}("1e69bec737eda621b0f9873c3aefa44dde7f1bd8e468c8a6ed5933742ada3c2e")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`if(_)__KT-SYNTAX_Statement_BExp_Block`(inj{Bool,BExp}(#token("false","Bool")),`{_}_KT-SYNTAX_Block_Statement`(_0)))~>DotVar2),_1,_2,_3,_4,_5,_6),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Skip,KItem}(`Skip_KT-SYNTAX_Skip`(.KList))~>DotVar2),_1,_2,_3,_4,_5,_6),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4677052d240769c7b2644cb990e5a212a40c2edd9e42656342fb2e4f1bf39efd) contentStartColumn(8) contentStartLine(327) org.kframework.attributes.Location(Location(327,8,327,32)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule93LHS{}(SortGeneratedCounterCell{},SortK{},SortStatement{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule93LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortStatement{},Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblif'LParUndsRParUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block{}(inj{SortBool{}, SortBExp{}}(\dv{SortBool{}}("false")),Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(Var'Unds'0:SortStatement{}))),VarDotVar2:SortK{})),Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule93LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortStatement{},Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortSkip{}, SortKItem{}}(LblSkip'Unds'KT-SYNTAX'Unds'Skip{}()),VarDotVar2:SortK{})),Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("327"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(327,8,327,32)"), UNIQUE'Unds'ID{}("4677052d240769c7b2644cb990e5a212a40c2edd9e42656342fb2e4f1bf39efd")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`if(_)___KT-SYNTAX_Statement_BExp_Block_ElseIfStatement`(HOLE,K1,K2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{BExp,KItem}(HOLE)~>`#freezerif(_)___KT-SYNTAX_Statement_BExp_Block_ElseIfStatement1_`(inj{Block,KItem}(K1),inj{ElseIfStatement,KItem}(K2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(`_andBool_`(#token("true","Bool"),#token("true","Bool")),`notBool_`(isKResult(inj{BExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(98f50483d99dd0ec5d2bf24bab08ec587986e1cc52a965826c6f6540afc52c41) heat() org.kframework.attributes.Location(Location(59,23,59,73)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) strict(1)]
  alias rule94LHS{}(SortGeneratedCounterCell{},SortK{},SortBExp{},SortBlock{},SortElseIfStatement{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule94LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortElseIfStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortElseIfStatement{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule94LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortElseIfStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),kseq{}(Lbl'Hash'freezerif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement1'Unds'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarK1:SortBlock{}),dotk{}()),kseq{}(inj{SortElseIfStatement{}, SortKItem{}}(VarK2:SortElseIfStatement{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(59,23,59,73)"), UNIQUE'Unds'ID{}("98f50483d99dd0ec5d2bf24bab08ec587986e1cc52a965826c6f6540afc52c41")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`if(_)___KT-SYNTAX_Statement_BExp_Block_ElseIfStatement`(inj{Bool,BExp}(#token("true","Bool") #as _12),`{_}_KT-SYNTAX_Block_Statement`(B),S))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(B)~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires _12 ensures _12 [UNIQUE_ID(8276da6f7e205916db58ee405a1a45eded3aa408f06f0c6a5ebc95371d8f969b) contentStartColumn(8) contentStartLine(328) org.kframework.attributes.Location(Location(328,8,328,46)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule95LHS{}(SortStatement{},SortGeneratedCounterCell{},SortK{},SortElseIfStatement{},SortFunctionCell{},SortEnvCell{},SortBool{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule95LHS{}(VarB:SortStatement{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortElseIfStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'12:SortBool{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Var'Unds'12:SortBool{},
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(inj{SortBool{}, SortBExp{}}(\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'12:SortBool{})),Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(VarB:SortStatement{}),VarS:SortElseIfStatement{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule95LHS{}(VarB:SortStatement{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortElseIfStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'12:SortBool{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Var'Unds'12:SortBool{},
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(VarB:SortStatement{}),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("328"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(328,8,328,46)"), UNIQUE'Unds'ID{}("8276da6f7e205916db58ee405a1a45eded3aa408f06f0c6a5ebc95371d8f969b")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`if(_)___KT-SYNTAX_Statement_BExp_Block_ElseIfStatement`(inj{Bool,BExp}(#token("false","Bool")),`{_}_KT-SYNTAX_Block_Statement`(_0),S))~>DotVar2),_1,_2,_3,_4,_5,_6),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{ElseIfStatement,KItem}(S)~>DotVar2),_1,_2,_3,_4,_5,_6),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(620ba37ea078ef91b87963d41d7bd9b7498e51b4b5146c4a8ed626f0c047be02) contentStartColumn(8) contentStartLine(329) org.kframework.attributes.Location(Location(329,8,329,47)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule96LHS{}(SortGeneratedCounterCell{},SortK{},SortElseIfStatement{},SortStatement{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule96LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortElseIfStatement{},Var'Unds'0:SortStatement{},Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblif'LParUndsRParUndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'BExp'Unds'Block'Unds'ElseIfStatement{}(inj{SortBool{}, SortBExp{}}(\dv{SortBool{}}("false")),Lbl'LBraUndsRBraUnds'KT-SYNTAX'Unds'Block'Unds'Statement{}(Var'Unds'0:SortStatement{}),VarS:SortElseIfStatement{})),VarDotVar2:SortK{})),Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule96LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortElseIfStatement{},Var'Unds'0:SortStatement{},Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortElseIfStatement{}, SortKItem{}}(VarS:SortElseIfStatement{}),VarDotVar2:SortK{})),Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("329"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(329,8,329,47)"), UNIQUE'Unds'ID{}("620ba37ea078ef91b87963d41d7bd9b7498e51b4b5146c4a8ed626f0c047be02")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{LocalFun,KItem}(`local(_,_)_KT-SYNTAX_LocalFun_Id_Statement`(FunId,inj{Assigner,Statement}(`_=__KT-SYNTAX_Assigner_DeclaredVar_AExp`(`___KT-SYNTAX_DeclaredVar_VariableType_Ids`(`var_KT-SYNTAX_VariableType`(.KList),`_,__KT-SYNTAX_Ids_Id_Ids`(I,`.List{"_,__KT-SYNTAX_Ids_Id_Ids"}_Ids`(.KList))),inj{Int,AExp}(V)))))~>DotVar2),`<function>`(`_FunThreadCellMap_`(`FunThreadCellMapItem`(`<id>`(inj{Id,KItem}(FunId)),`<funThread>`(`<id>`(inj{Id,KItem}(FunId)),_0,_1,_2,`<localEnv>`(FunM))),DotVar3)),_3,`<store>`(SMap),_4,_5,`<loc>`(L)),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Skip,KItem}(`Skip_KT-SYNTAX_Skip`(.KList))~>DotVar2),`<function>`(`_FunThreadCellMap_`(`FunThreadCellMapItem`(`<id>`(inj{Id,KItem}(FunId)),`<funThread>`(`<id>`(inj{Id,KItem}(FunId)),_0,_1,_2,`<localEnv>`(`_Map_`(FunM,`_|->_`(inj{Id,KItem}(I),inj{Int,KItem}(L)))))),DotVar3)),_3,`<store>`(`_Map_`(SMap,`_|->_`(inj{Int,KItem}(L),inj{Int,KItem}(V)))),_4,_5,`<loc>`(`_+Int_`(L,#token("1","Int")))),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e9696895016b71c473230eded78506bb692359c1356247d1ce0195642f6f6e3a) contentStartColumn(8) contentStartLine(286) org.kframework.attributes.Location(Location(286,8,294,33)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule97LHS{}(SortGeneratedCounterCell{},SortK{},SortFunThreadCellMap{},SortId{},SortMap{},SortId{},SortInt{},SortMap{},SortInt{},SortScopeCell{},SortParamsCell{},SortTempCell{},SortEnvCell{},SortMultsCell{},SortOutCell{}) : SortGeneratedTopCell{}
  where rule97LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortFunThreadCellMap{},VarFunId:SortId{},VarFunM:SortMap{},VarI:SortId{},VarL:SortInt{},VarSMap:SortMap{},VarV:SortInt{},Var'Unds'0:SortScopeCell{},Var'Unds'1:SortParamsCell{},Var'Unds'2:SortTempCell{},Var'Unds'3:SortEnvCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortLocalFun{}, SortKItem{}}(Lbllocal'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalFun'Unds'Id'Unds'Statement{}(VarFunId:SortId{},inj{SortAssigner{}, SortStatement{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'Assigner'Unds'DeclaredVar'Unds'AExp{}(Lbl'UndsUndsUnds'KT-SYNTAX'Unds'DeclaredVar'Unds'VariableType'Unds'Ids{}(Lblvar'Unds'KT-SYNTAX'Unds'VariableType{}(),Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(VarI:SortId{},Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}())),inj{SortInt{}, SortAExp{}}(VarV:SortInt{}))))),VarDotVar2:SortK{})),Lbl'-LT-'function'-GT-'{}(Lbl'Unds'FunThreadCellMap'Unds'{}(LblFunThreadCellMapItem{}(Lbl'-LT-'id'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarFunId:SortId{}),dotk{}())),Lbl'-LT-'funThread'-GT-'{}(Lbl'-LT-'id'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarFunId:SortId{}),dotk{}())),Var'Unds'0:SortScopeCell{},Var'Unds'1:SortParamsCell{},Var'Unds'2:SortTempCell{},Lbl'-LT-'localEnv'-GT-'{}(VarFunM:SortMap{}))),VarDotVar3:SortFunThreadCellMap{})),Var'Unds'3:SortEnvCell{},Lbl'-LT-'store'-GT-'{}(VarSMap:SortMap{}),Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(VarL:SortInt{})),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule97LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortFunThreadCellMap{},VarFunId:SortId{},VarFunM:SortMap{},VarI:SortId{},VarL:SortInt{},VarSMap:SortMap{},VarV:SortInt{},Var'Unds'0:SortScopeCell{},Var'Unds'1:SortParamsCell{},Var'Unds'2:SortTempCell{},Var'Unds'3:SortEnvCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortSkip{}, SortKItem{}}(LblSkip'Unds'KT-SYNTAX'Unds'Skip{}()),VarDotVar2:SortK{})),Lbl'-LT-'function'-GT-'{}(Lbl'Unds'FunThreadCellMap'Unds'{}(LblFunThreadCellMapItem{}(Lbl'-LT-'id'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarFunId:SortId{}),dotk{}())),Lbl'-LT-'funThread'-GT-'{}(Lbl'-LT-'id'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarFunId:SortId{}),dotk{}())),Var'Unds'0:SortScopeCell{},Var'Unds'1:SortParamsCell{},Var'Unds'2:SortTempCell{},Lbl'-LT-'localEnv'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarFunM:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),inj{SortInt{}, SortKItem{}}(VarL:SortInt{})))))),VarDotVar3:SortFunThreadCellMap{})),Var'Unds'3:SortEnvCell{},Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarSMap:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(VarL:SortInt{}),inj{SortInt{}, SortKItem{}}(VarV:SortInt{})))),Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Lbl'-LT-'loc'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(VarL:SortInt{},\dv{SortInt{}}("1")))),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("286"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(286,8,294,33)"), UNIQUE'Unds'ID{}("e9696895016b71c473230eded78506bb692359c1356247d1ce0195642f6f6e3a")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{LocalFun,KItem}(`local(_,_)_KT-SYNTAX_LocalFun_Id_Statement`(I,`___KT-SYNTAX_Statement_Statement_Statement`(S1,S2)))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{LocalFun,KItem}(`local(_,_)_KT-SYNTAX_LocalFun_Id_Statement`(I,S1))~>inj{LocalFun,KItem}(`local(_,_)_KT-SYNTAX_LocalFun_Id_Statement`(I,S2))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(cea42b6e286af72f8b7bcbe30f82c76e534b54906b1dc95ac3c0be18e98bb1da) contentStartColumn(8) contentStartLine(306) org.kframework.attributes.Location(Location(306,8,306,78)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) structural()]
  alias rule98LHS{}(SortGeneratedCounterCell{},SortK{},SortId{},SortStatement{},SortStatement{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule98LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarS1:SortStatement{},VarS2:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortLocalFun{}, SortKItem{}}(Lbllocal'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalFun'Unds'Id'Unds'Statement{}(VarI:SortId{},Lbl'UndsUndsUnds'KT-SYNTAX'Unds'Statement'Unds'Statement'Unds'Statement{}(VarS1:SortStatement{},VarS2:SortStatement{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule98LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarS1:SortStatement{},VarS2:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortLocalFun{}, SortKItem{}}(Lbllocal'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalFun'Unds'Id'Unds'Statement{}(VarI:SortId{},VarS1:SortStatement{})),kseq{}(inj{SortLocalFun{}, SortKItem{}}(Lbllocal'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalFun'Unds'Id'Unds'Statement{}(VarI:SortId{},VarS2:SortStatement{})),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("306"), contentStartColumn{}("8"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(306,8,306,78)"), UNIQUE'Unds'ID{}("cea42b6e286af72f8b7bcbe30f82c76e534b54906b1dc95ac3c0be18e98bb1da")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{LocalResId,KItem}(`localResId(_,_)_KT-SYNTAX_LocalResId_Id_Id`(I1,I2))~>DotVar2),_0,`<env>`(`_Map_`(`_|->_`(inj{Id,KItem}(I2),L),DotVar3)) #as _9,`<store>`(`_Map_`(`_|->_`(L,inj{AExp,KItem}(V)),DotVar4)) #as _11,_1,_2,_3),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{UniqueIdAssigner,KItem}(`_=__KT-SYNTAX_UniqueIdAssigner_Id_AExp`(I1,V))~>DotVar2),_0,_9,_11,_1,_2,_3),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f304950fd3b17782cbfd510bec7408fc49df78b022718b4212566c1dfa6dbb80) contentStartColumn(8) contentStartLine(187) org.kframework.attributes.Location(Location(187,8,189,42)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule99LHS{}(SortGeneratedCounterCell{},SortK{},SortMap{},SortMap{},SortId{},SortId{},SortKItem{},SortAExp{},SortFunctionCell{},SortMultsCell{},SortStoreCell{},SortOutCell{},SortLocCell{},SortEnvCell{}) : SortGeneratedTopCell{}
  where rule99LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI1:SortId{},VarI2:SortId{},VarL:SortKItem{},VarV:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortMultsCell{},Var'Unds'11:SortStoreCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{},Var'Unds'9:SortEnvCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortLocalResId{}, SortKItem{}}(LbllocalResId'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResId'Unds'Id'Unds'Id{}(VarI1:SortId{},VarI2:SortId{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},\and{SortEnvCell{}}(Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI2:SortId{}),VarL:SortKItem{}),VarDotVar3:SortMap{})),Var'Unds'9:SortEnvCell{}),\and{SortStoreCell{}}(Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarL:SortKItem{},inj{SortAExp{}, SortKItem{}}(VarV:SortAExp{})),VarDotVar4:SortMap{})),Var'Unds'11:SortStoreCell{}),Var'Unds'1:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule99LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI1:SortId{},VarI2:SortId{},VarL:SortKItem{},VarV:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortMultsCell{},Var'Unds'11:SortStoreCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{},Var'Unds'9:SortEnvCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortUniqueIdAssigner{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'KT-SYNTAX'Unds'UniqueIdAssigner'Unds'Id'Unds'AExp{}(VarI1:SortId{},VarV:SortAExp{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'9:SortEnvCell{},Var'Unds'11:SortStoreCell{},Var'Unds'1:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("187"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(187,8,189,42)"), UNIQUE'Unds'ID{}("f304950fd3b17782cbfd510bec7408fc49df78b022718b4212566c1dfa6dbb80")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{LocalResInt,KItem}(`localResInt(_,_)_KT-SYNTAX_LocalResInt_Id_Int`(I,V))~>DotVar2),_1,`<env>`(`_Map_`(`_|->_`(inj{Id,KItem}(I),L),DotVar3)) #as _10,`<store>`(`_Map_`(`_|->_`(L,_0),DotVar4)),_2,_3,_4),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Skip,KItem}(`Skip_KT-SYNTAX_Skip`(.KList))~>DotVar2),_1,_10,`<store>`(`_Map_`(`_|->_`(L,inj{Int,KItem}(V)),DotVar4)),_2,_3,_4),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bee03a337ac90e8b037a19e52cd130eb994ffa6cea9e6b3aade43f96d0de9f7f) contentStartColumn(10) contentStartLine(178) org.kframework.attributes.Location(Location(178,10,180,44)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule100LHS{}(SortGeneratedCounterCell{},SortK{},SortMap{},SortMap{},SortId{},SortKItem{},SortInt{},SortKItem{},SortFunctionCell{},SortEnvCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule100LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarV:SortInt{},Var'Unds'0:SortKItem{},Var'Unds'1:SortFunctionCell{},Var'Unds'10:SortEnvCell{},Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortLocalResInt{}, SortKItem{}}(LbllocalResInt'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResInt'Unds'Id'Unds'Int{}(VarI:SortId{},VarV:SortInt{})),VarDotVar2:SortK{})),Var'Unds'1:SortFunctionCell{},\and{SortEnvCell{}}(Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),VarL:SortKItem{}),VarDotVar3:SortMap{})),Var'Unds'10:SortEnvCell{}),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarL:SortKItem{},Var'Unds'0:SortKItem{}),VarDotVar4:SortMap{})),Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule100LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarV:SortInt{},Var'Unds'0:SortKItem{},Var'Unds'1:SortFunctionCell{},Var'Unds'10:SortEnvCell{},Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortSkip{}, SortKItem{}}(LblSkip'Unds'KT-SYNTAX'Unds'Skip{}()),VarDotVar2:SortK{})),Var'Unds'1:SortFunctionCell{},Var'Unds'10:SortEnvCell{},Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarL:SortKItem{},inj{SortInt{}, SortKItem{}}(VarV:SortInt{})),VarDotVar4:SortMap{})),Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("178"), contentStartColumn{}("10"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(178,10,180,44)"), UNIQUE'Unds'ID{}("bee03a337ac90e8b037a19e52cd130eb994ffa6cea9e6b3aade43f96d0de9f7f")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{LocalResString,KItem}(`localResString(_,_)_KT-SYNTAX_LocalResString_Id_String`(I,Stg))~>DotVar2),_1,`<env>`(`_Map_`(`_|->_`(inj{Id,KItem}(I),L),DotVar3)) #as _10,`<store>`(`_Map_`(`_|->_`(L,_0),DotVar4)),_2,_3,_4),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Skip,KItem}(`Skip_KT-SYNTAX_Skip`(.KList))~>DotVar2),_1,_10,`<store>`(`_Map_`(`_|->_`(L,inj{String,KItem}(Stg)),DotVar4)),_2,_3,_4),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(271c7c8dd628ba521cb008c9d8093c8b9dcd6157cbb8e0d1b65f141fa70dca0d) contentStartColumn(10) contentStartLine(243) org.kframework.attributes.Location(Location(243,10,245,46)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule101LHS{}(SortGeneratedCounterCell{},SortK{},SortMap{},SortMap{},SortId{},SortKItem{},SortString{},SortKItem{},SortFunctionCell{},SortEnvCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule101LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarStg:SortString{},Var'Unds'0:SortKItem{},Var'Unds'1:SortFunctionCell{},Var'Unds'10:SortEnvCell{},Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortLocalResString{}, SortKItem{}}(LbllocalResString'LParUndsCommUndsRParUnds'KT-SYNTAX'Unds'LocalResString'Unds'Id'Unds'String{}(VarI:SortId{},VarStg:SortString{})),VarDotVar2:SortK{})),Var'Unds'1:SortFunctionCell{},\and{SortEnvCell{}}(Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarI:SortId{}),VarL:SortKItem{}),VarDotVar3:SortMap{})),Var'Unds'10:SortEnvCell{}),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarL:SortKItem{},Var'Unds'0:SortKItem{}),VarDotVar4:SortMap{})),Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule101LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarStg:SortString{},Var'Unds'0:SortKItem{},Var'Unds'1:SortFunctionCell{},Var'Unds'10:SortEnvCell{},Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortSkip{}, SortKItem{}}(LblSkip'Unds'KT-SYNTAX'Unds'Skip{}()),VarDotVar2:SortK{})),Var'Unds'1:SortFunctionCell{},Var'Unds'10:SortEnvCell{},Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarL:SortKItem{},inj{SortString{}, SortKItem{}}(VarStg:SortString{})),VarDotVar4:SortMap{})),Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("243"), contentStartColumn{}("10"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(243,10,245,46)"), UNIQUE'Unds'ID{}("271c7c8dd628ba521cb008c9d8093c8b9dcd6157cbb8e0d1b65f141fa70dca0d")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`print(_)_KT-SYNTAX_Statement_AExps`(`.List{"_,__KT-SYNTAX_AExps_AExp_AExps"}_AExps`(.KList)))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0b3237cac764a87d70cf58d3b06fce148ec480525a18b21c259ec2b62aecaeeb) contentStartColumn(8) contentStartLine(86) org.kframework.attributes.Location(Location(86,8,86,26)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) structural()]
  alias rule102LHS{}(SortGeneratedCounterCell{},SortK{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule102LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(Lbl'Stop'List'LBraQuotUndsCommUndsUnds'KT-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps'QuotRBraUnds'AExps{}())),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule102LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(VarDotVar2:SortK{}),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("86"), contentStartColumn{}("8"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(86,8,86,26)"), UNIQUE'Unds'ID{}("0b3237cac764a87d70cf58d3b06fce148ec480525a18b21c259ec2b62aecaeeb")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`print(_)_KT-SYNTAX_Statement_AExps`(`_,__KT-SYNTAX_AExps_AExp_AExps`(HOLE,AEs)))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezerprint(_)_KT-SYNTAX_Statement_AExps1_`(inj{AExps,KItem}(AEs))~>DotVar2),_0,_1,_2,_3,_4,_5),DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(c2cce4b9557a0791e9f5c1332fea7dbb6d68caf5bb349e9068882b157760df59) contentStartColumn(11) contentStartLine(84) heat() org.kframework.attributes.Location(Location(84,11,84,38)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  alias rule103LHS{}(SortAExps{},SortGeneratedCounterCell{},SortK{},SortAExp{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortOutCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule103LHS{}(VarAEs:SortAExps{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(VarHOLE:SortAExp{},VarAEs:SortAExps{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule103LHS{}(VarAEs:SortAExps{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezerprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps1'Unds'{}(kseq{}(inj{SortAExps{}, SortKItem{}}(VarAEs:SortAExps{}),dotk{}())),VarDotVar2:SortK{}))),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), heat{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("84"), contentStartColumn{}("11"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(84,11,84,38)"), UNIQUE'Unds'ID{}("c2cce4b9557a0791e9f5c1332fea7dbb6d68caf5bb349e9068882b157760df59")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`print(_)_KT-SYNTAX_Statement_AExps`(`_,__KT-SYNTAX_AExps_AExp_AExps`(inj{Printable,AExp}(P),AEs)))~>DotVar2),_0,_1,_2,_3,`<out>`(`_List_`(DotVar3,`.List`(.KList))),_4),DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Statement,KItem}(`print(_)_KT-SYNTAX_Statement_AExps`(AEs))~>DotVar2),_0,_1,_2,_3,`<out>`(`_List_`(DotVar3,`ListItem`(inj{Printable,KItem}(P)))),_4),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(cec558724460380f457a74c30b6d9542f5fdd94f73d3f2db1b8add9050f5691c) contentStartColumn(8) contentStartLine(88) org.kframework.attributes.Location(Location(88,8,89,43)) org.kframework.attributes.Source(Source(/\workspace/./kt.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) print()]
  alias rule104LHS{}(SortAExps{},SortGeneratedCounterCell{},SortK{},SortList{},SortPrintable{},SortFunctionCell{},SortEnvCell{},SortStoreCell{},SortMultsCell{},SortLocCell{}) : SortGeneratedTopCell{}
  where rule104LHS{}(VarAEs:SortAExps{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortList{},VarP:SortPrintable{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortLocCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(Lbl'UndsCommUndsUnds'KT-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(inj{SortPrintable{}, SortAExp{}}(VarP:SortPrintable{}),VarAEs:SortAExps{}))),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Lbl'-LT-'out'-GT-'{}(Lbl'Unds'List'Unds'{}(VarDotVar3:SortList{},Lbl'Stop'List{}())),Var'Unds'4:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule104LHS{}(VarAEs:SortAExps{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortList{},VarP:SortPrintable{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortLocCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStatement{}, SortKItem{}}(Lblprint'LParUndsRParUnds'KT-SYNTAX'Unds'Statement'Unds'AExps{}(VarAEs:SortAExps{})),VarDotVar2:SortK{})),Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Lbl'-LT-'out'-GT-'{}(Lbl'Unds'List'Unds'{}(VarDotVar3:SortList{},LblListItem{}(inj{SortPrintable{}, SortKItem{}}(VarP:SortPrintable{})))),Var'Unds'4:SortLocCell{}),VarDotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)"), print{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("88"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(88,8,89,43)"), UNIQUE'Unds'ID{}("cec558724460380f457a74c30b6d9542f5fdd94f73d3f2db1b8add9050f5691c")]

// rule `_<=String__STRING_Bool_String_String`(S1,S2)=>`notBool_`(`_<String__STRING_Bool_String_String`(S2,S1)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b845027eb9a8c978d2dfe3ec05a6eff77ba88b8f5c3ab2cb696a29aeae2db3b8) contentStartColumn(8) contentStartLine(616) org.kframework.attributes.Location(Location(616,8,616,63)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds-LT-Eqls'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        LblnotBool'Unds'{}(Lbl'Unds-LT-'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(VarS2:SortString{},VarS1:SortString{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("616"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(616,8,616,63)"), UNIQUE'Unds'ID{}("b845027eb9a8c978d2dfe3ec05a6eff77ba88b8f5c3ab2cb696a29aeae2db3b8")]

// rule `_=/=Bool_`(B1,B2)=>`notBool_`(`_==Bool_`(B1,B2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8082ec9e8ff1aaf1e4594a6b86a75f2a67d244a719944f7f727338912cec93c1) contentStartColumn(8) contentStartLine(352) org.kframework.attributes.Location(Location(352,8,352,57)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(VarB1:SortBool{},VarB2:SortBool{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'Bool'Unds'{}(VarB1:SortBool{},VarB2:SortBool{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("352"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(352,8,352,57)"), UNIQUE'Unds'ID{}("8082ec9e8ff1aaf1e4594a6b86a75f2a67d244a719944f7f727338912cec93c1")]

// rule `_=/=Int_`(I1,I2)=>`notBool_`(`_==Int_`(I1,I2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1268ef8223300f719d2c898f934c4a0dd4d5d94e2224e9d2139c61b6a7fd7621) contentStartColumn(8) contentStartLine(472) org.kframework.attributes.Location(Location(472,8,472,53)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsSlshEqls'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("472"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(472,8,472,53)"), UNIQUE'Unds'ID{}("1268ef8223300f719d2c898f934c4a0dd4d5d94e2224e9d2139c61b6a7fd7621")]

// rule `_=/=K_`(K1,K2)=>`notBool_`(`_==K_`(K1,K2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(be43f022db407512c682c661ea25224c02085b8ae4fc4e4122c1ffda4d9c10dc) contentStartColumn(8) contentStartLine(856) org.kframework.attributes.Location(Location(856,8,856,45)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsSlshEqls'K'Unds'{}(VarK1:SortK{},VarK2:SortK{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'K'Unds'{}(VarK1:SortK{},VarK2:SortK{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("856"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(856,8,856,45)"), UNIQUE'Unds'ID{}("be43f022db407512c682c661ea25224c02085b8ae4fc4e4122c1ffda4d9c10dc")]

// rule `_=/=String__STRING_Bool_String_String`(S1,S2)=>`notBool_`(`_==String__STRING_Bool_String_String`(S1,S2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(a78bcc075d04a4fc9a360ddd678304c36ad82d78aed5298cf3ca840ff9a64c6c) contentStartColumn(8) contentStartLine(603) org.kframework.attributes.Location(Location(603,8,603,65)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("603"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(603,8,603,65)"), UNIQUE'Unds'ID{}("a78bcc075d04a4fc9a360ddd678304c36ad82d78aed5298cf3ca840ff9a64c6c")]

// rule `_==Bool_`(K1,K2)=>`_==K_`(inj{Bool,KItem}(K1),inj{Bool,KItem}(K2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f80f7fe83e61312531fc419ec0b0880a6d89d056a322bd6e29a1f8082203f4f5) contentStartColumn(8) contentStartLine(858) org.kframework.attributes.Location(Location(858,8,858,43)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsEqls'Bool'Unds'{}(VarK1:SortBool{},VarK2:SortBool{}),
        Lbl'UndsEqlsEqls'K'Unds'{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarK1:SortBool{}),dotk{}()),kseq{}(inj{SortBool{}, SortKItem{}}(VarK2:SortBool{}),dotk{}()))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("858"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(858,8,858,43)"), UNIQUE'Unds'ID{}("f80f7fe83e61312531fc419ec0b0880a6d89d056a322bd6e29a1f8082203f4f5")]

// rule `_==Int_`(I1,I2)=>`_==K_`(inj{Int,KItem}(I1),inj{Int,KItem}(I2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e92e4aa4a18bee70f2627cdafb8687e2dfcc0dd6a7f8cbb8d1bd17d751c2da2a) contentStartColumn(8) contentStartLine(471) org.kframework.attributes.Location(Location(471,8,471,40)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsEqls'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{}),
        Lbl'UndsEqlsEqls'K'Unds'{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarI1:SortInt{}),dotk{}()),kseq{}(inj{SortInt{}, SortKItem{}}(VarI2:SortInt{}),dotk{}()))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("471"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(471,8,471,40)"), UNIQUE'Unds'ID{}("e92e4aa4a18bee70f2627cdafb8687e2dfcc0dd6a7f8cbb8d1bd17d751c2da2a")]

// rule `_==String__STRING_Bool_String_String`(S1,S2)=>`_==K_`(inj{String,KItem}(S1),inj{String,KItem}(S2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d866d86c70a0259cfd553051351e356373b3c533c9a7b9974500e5dd032f7ca9) contentStartColumn(8) contentStartLine(604) org.kframework.attributes.Location(Location(604,8,604,49)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsEqls'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        Lbl'UndsEqlsEqls'K'Unds'{}(kseq{}(inj{SortString{}, SortKItem{}}(VarS1:SortString{}),dotk{}()),kseq{}(inj{SortString{}, SortKItem{}}(VarS2:SortString{}),dotk{}()))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("604"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(604,8,604,49)"), UNIQUE'Unds'ID{}("d866d86c70a0259cfd553051351e356373b3c533c9a7b9974500e5dd032f7ca9")]

// rule `_>=String__STRING_Bool_String_String`(S1,S2)=>`notBool_`(`_<String__STRING_Bool_String_String`(S1,S2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8307efe6b82cfb4a21276b92acefe5869f724f1def05bc54f10b09ba49b56f33) contentStartColumn(8) contentStartLine(618) org.kframework.attributes.Location(Location(618,8,618,63)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds-GT-Eqls'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        LblnotBool'Unds'{}(Lbl'Unds-LT-'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("618"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(618,8,618,63)"), UNIQUE'Unds'ID{}("8307efe6b82cfb4a21276b92acefe5869f724f1def05bc54f10b09ba49b56f33")]

// rule `_>String__STRING_Bool_String_String`(S1,S2)=>`_<String__STRING_Bool_String_String`(S2,S1) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(24e2c6676f433dc8124ed0562f1c81405451eb8a338e395aa96f1325c51dea92) contentStartColumn(8) contentStartLine(617) org.kframework.attributes.Location(Location(617,8,617,52)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds-GT-'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        Lbl'Unds-LT-'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(VarS2:SortString{},VarS1:SortString{})),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("617"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(617,8,617,52)"), UNIQUE'Unds'ID{}("24e2c6676f433dc8124ed0562f1c81405451eb8a338e395aa96f1325c51dea92")]

// rule `_andBool_`(#token("false","Bool") #as _1,_0)=>_1 requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e6ebe927ba416a1602679eb0166f22d394adf70452e0505c00f11c036a896253) contentStartColumn(8) contentStartLine(325) org.kframework.attributes.Location(Location(325,8,325,37)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andBool'Unds'{}(\and{SortBool{}}(\dv{SortBool{}}("false"),Var'Unds'1:SortBool{}),Var'Unds'0:SortBool{}),
        Var'Unds'1:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("325"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(325,8,325,37)"), UNIQUE'Unds'ID{}("e6ebe927ba416a1602679eb0166f22d394adf70452e0505c00f11c036a896253")]

// rule `_andBool_`(#token("true","Bool") #as _0,B)=>B requires _0 ensures _0 [UNIQUE_ID(cd0a9b340fae24c9a05126d8df860cb7145fc64875711e36efaa694085559dc0) contentStartColumn(8) contentStartLine(323) org.kframework.attributes.Location(Location(323,8,323,37)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'0:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andBool'Unds'{}(\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'0:SortBool{}),VarB:SortBool{}),
        VarB:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'0:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("323"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(323,8,323,37)"), UNIQUE'Unds'ID{}("cd0a9b340fae24c9a05126d8df860cb7145fc64875711e36efaa694085559dc0")]

// rule `_andBool_`(B,#token("true","Bool") #as _0)=>B requires _0 ensures _0 [UNIQUE_ID(b598bf51d1c959b7112e06b7f85a391ee5a18108acd52bb65ea27ef0381ed0e0) contentStartColumn(8) contentStartLine(324) org.kframework.attributes.Location(Location(324,8,324,37)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'0:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andBool'Unds'{}(VarB:SortBool{},\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'0:SortBool{})),
        VarB:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'0:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("324"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(324,8,324,37)"), UNIQUE'Unds'ID{}("b598bf51d1c959b7112e06b7f85a391ee5a18108acd52bb65ea27ef0381ed0e0")]

// rule `_andBool_`(_0,#token("false","Bool") #as _1)=>_1 requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1a7512841ede635d09556466797d23f3f3cec57fe0fb6a68ce0c3a1cccb0b68f) contentStartColumn(8) contentStartLine(326) org.kframework.attributes.Location(Location(326,8,326,37)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andBool'Unds'{}(Var'Unds'0:SortBool{},\and{SortBool{}}(\dv{SortBool{}}("false"),Var'Unds'1:SortBool{})),
        Var'Unds'1:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("326"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(326,8,326,37)"), UNIQUE'Unds'ID{}("1a7512841ede635d09556466797d23f3f3cec57fe0fb6a68ce0c3a1cccb0b68f")]

// rule `_andThenBool_`(#token("false","Bool") #as _1,_0)=>_1 requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5655ee866bbbb608f1f964220ab1530b0ef7135eeda23603dff05807b6d16b64) contentStartColumn(8) contentStartLine(330) org.kframework.attributes.Location(Location(330,8,330,36)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andThenBool'Unds'{}(\and{SortBool{}}(\dv{SortBool{}}("false"),Var'Unds'1:SortBool{}),Var'Unds'0:SortBool{}),
        Var'Unds'1:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("330"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(330,8,330,36)"), UNIQUE'Unds'ID{}("5655ee866bbbb608f1f964220ab1530b0ef7135eeda23603dff05807b6d16b64")]

// rule `_andThenBool_`(#token("true","Bool") #as _0,K)=>K requires _0 ensures _0 [UNIQUE_ID(7222515db4659f9d91276b956c8ae62254acb676f0a77a32927a2f9664a0277f) contentStartColumn(8) contentStartLine(328) org.kframework.attributes.Location(Location(328,8,328,37)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'0:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andThenBool'Unds'{}(\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'0:SortBool{}),VarK:SortBool{}),
        VarK:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'0:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("328"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(328,8,328,37)"), UNIQUE'Unds'ID{}("7222515db4659f9d91276b956c8ae62254acb676f0a77a32927a2f9664a0277f")]

// rule `_andThenBool_`(K,#token("true","Bool") #as _0)=>K requires _0 ensures _0 [UNIQUE_ID(3bbe6cf1318a61acb32fba25030cb15ff73ba968cd584d9b07573260cfd5542d) contentStartColumn(8) contentStartLine(329) org.kframework.attributes.Location(Location(329,8,329,37)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'0:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andThenBool'Unds'{}(VarK:SortBool{},\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'0:SortBool{})),
        VarK:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'0:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("329"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(329,8,329,37)"), UNIQUE'Unds'ID{}("3bbe6cf1318a61acb32fba25030cb15ff73ba968cd584d9b07573260cfd5542d")]

// rule `_andThenBool_`(_0,#token("false","Bool") #as _1)=>_1 requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f9686d847651f3e51fa10373f3a2f282ece21460a20353e2e97d8100b357eae8) contentStartColumn(8) contentStartLine(331) org.kframework.attributes.Location(Location(331,8,331,36)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andThenBool'Unds'{}(Var'Unds'0:SortBool{},\and{SortBool{}}(\dv{SortBool{}}("false"),Var'Unds'1:SortBool{})),
        Var'Unds'1:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("331"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(331,8,331,36)"), UNIQUE'Unds'ID{}("f9686d847651f3e51fa10373f3a2f282ece21460a20353e2e97d8100b357eae8")]

// rule `_divInt_`(I1,I2)=>`_/Int_`(`_-Int_`(I1,`_modInt_`(I1,I2)),I2) requires `_=/=Int_`(I2,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(98da5640fc5e6ee59b397ff504565399b7ff03664f67915c80712fa0cdb0a8f4) contentStartColumn(8) contentStartLine(460) org.kframework.attributes.Location(Location(460,8,461,23)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'Int'Unds'{}(VarI2:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Unds'divInt'Unds'{}(VarI1:SortInt{},VarI2:SortInt{}),
        Lbl'UndsSlsh'Int'Unds'{}(Lbl'Unds'-Int'Unds'{}(VarI1:SortInt{},Lbl'Unds'modInt'Unds'{}(VarI1:SortInt{},VarI2:SortInt{})),VarI2:SortInt{})),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" K [klabel(#ruleRequires) symbol()]"), contentStartLine{}("460"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(460,8,461,23)"), UNIQUE'Unds'ID{}("98da5640fc5e6ee59b397ff504565399b7ff03664f67915c80712fa0cdb0a8f4")]

// rule `_dividesInt__INT-COMMON_Bool_Int_Int`(I1,I2)=>`_==Int_`(`_%Int_`(I2,I1),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9695792871716095ab52385178d2734b9ea1a429bd7b0c82d3eeeba2c43573a1) contentStartColumn(8) contentStartLine(473) org.kframework.attributes.Location(Location(473,8,473,58)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'dividesInt'UndsUnds'INT-COMMON'Unds'Bool'Unds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        Lbl'UndsEqlsEqls'Int'Unds'{}(Lbl'UndsPerc'Int'Unds'{}(VarI2:SortInt{},VarI1:SortInt{}),\dv{SortInt{}}("0"))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("473"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(473,8,473,58)"), UNIQUE'Unds'ID{}("9695792871716095ab52385178d2734b9ea1a429bd7b0c82d3eeeba2c43573a1")]

// rule `_impliesBool_`(#token("true","Bool") #as _0,B)=>B requires _0 ensures _0 [UNIQUE_ID(a14afb572fbb3cafc70cb9d12559ea76b3cadc10fe7660cbfc3ac421d8c83472) contentStartColumn(8) contentStartLine(347) org.kframework.attributes.Location(Location(347,8,347,36)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'0:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'impliesBool'Unds'{}(\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'0:SortBool{}),VarB:SortBool{}),
        VarB:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'0:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("347"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(347,8,347,36)"), UNIQUE'Unds'ID{}("a14afb572fbb3cafc70cb9d12559ea76b3cadc10fe7660cbfc3ac421d8c83472")]

// rule `_impliesBool_`(B,#token("false","Bool"))=>`notBool_`(B) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1b7a876afdaa257c8b3f634d4e2a8b25d443ca975cd70924532f97c11b5436a3) contentStartColumn(8) contentStartLine(350) org.kframework.attributes.Location(Location(350,8,350,45)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'impliesBool'Unds'{}(VarB:SortBool{},\dv{SortBool{}}("false")),
        LblnotBool'Unds'{}(VarB:SortBool{})),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("350"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(350,8,350,45)"), UNIQUE'Unds'ID{}("1b7a876afdaa257c8b3f634d4e2a8b25d443ca975cd70924532f97c11b5436a3")]

// rule `_impliesBool_`(_0,#token("true","Bool") #as _1)=>_1 requires _1 ensures _1 [UNIQUE_ID(dd9b1a472eea37abb732383a93435249ef41975a934479c3ad416fe808fbe42f) contentStartColumn(8) contentStartLine(349) org.kframework.attributes.Location(Location(349,8,349,39)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'1:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'impliesBool'Unds'{}(Var'Unds'0:SortBool{},\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'1:SortBool{})),
        Var'Unds'1:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'1:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("349"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(349,8,349,39)"), UNIQUE'Unds'ID{}("dd9b1a472eea37abb732383a93435249ef41975a934479c3ad416fe808fbe42f")]

// rule `_impliesBool_`(#token("false","Bool"),_0)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1f2244d9b271fbf663741428beb3049daf5dd0a60f428c146b07d2595095f548) contentStartColumn(8) contentStartLine(348) org.kframework.attributes.Location(Location(348,8,348,40)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'impliesBool'Unds'{}(\dv{SortBool{}}("false"),Var'Unds'0:SortBool{}),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("348"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(348,8,348,40)"), UNIQUE'Unds'ID{}("1f2244d9b271fbf663741428beb3049daf5dd0a60f428c146b07d2595095f548")]

// rule `_modInt_`(I1,I2)=>`_%Int_`(`_+Int_`(`_%Int_`(I1,`absInt(_)_INT-COMMON_Int_Int`(I2)),`absInt(_)_INT-COMMON_Int_Int`(I2)),`absInt(_)_INT-COMMON_Int_Int`(I2)) requires `_=/=Int_`(I2,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(06049b365f7975e4498cb4e762dcb432b2fbb5b4e91f53d1554c5a2c6bfac7a4) concrete() contentStartColumn(5) contentStartLine(463) org.kframework.attributes.Location(Location(463,5,466,23)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'Int'Unds'{}(VarI2:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Unds'modInt'Unds'{}(VarI1:SortInt{},VarI2:SortInt{}),
        Lbl'UndsPerc'Int'Unds'{}(Lbl'UndsPlus'Int'Unds'{}(Lbl'UndsPerc'Int'Unds'{}(VarI1:SortInt{},LblabsInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(VarI2:SortInt{})),LblabsInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(VarI2:SortInt{})),LblabsInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(VarI2:SortInt{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" K [klabel(#ruleRequires) symbol()]"), concrete{}(), contentStartLine{}("463"), contentStartColumn{}("5"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(463,5,466,23)"), UNIQUE'Unds'ID{}("06049b365f7975e4498cb4e762dcb432b2fbb5b4e91f53d1554c5a2c6bfac7a4")]

// rule `_orBool__BOOL_Bool_Bool_Bool`(#token("true","Bool") #as _1,_0)=>_1 requires _1 ensures _1 [UNIQUE_ID(dc3966c0487ffc67c7b2138883703d82c0ca3707d493d7ecbeed16591eda4002) contentStartColumn(8) contentStartLine(337) org.kframework.attributes.Location(Location(337,8,337,34)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'1:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orBool'UndsUnds'BOOL'Unds'Bool'Unds'Bool'Unds'Bool{}(\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'1:SortBool{}),Var'Unds'0:SortBool{}),
        Var'Unds'1:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'1:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("337"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(337,8,337,34)"), UNIQUE'Unds'ID{}("dc3966c0487ffc67c7b2138883703d82c0ca3707d493d7ecbeed16591eda4002")]

// rule `_orBool__BOOL_Bool_Bool_Bool`(B,#token("false","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ec0c7ff02d00be2a1ad79d358b0298a044942a1b87d9d60c5c00ad5022700119) contentStartColumn(8) contentStartLine(340) org.kframework.attributes.Location(Location(340,8,340,32)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orBool'UndsUnds'BOOL'Unds'Bool'Unds'Bool'Unds'Bool{}(VarB:SortBool{},\dv{SortBool{}}("false")),
        VarB:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("340"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(340,8,340,32)"), UNIQUE'Unds'ID{}("ec0c7ff02d00be2a1ad79d358b0298a044942a1b87d9d60c5c00ad5022700119")]

// rule `_orBool__BOOL_Bool_Bool_Bool`(_0,#token("true","Bool") #as _1)=>_1 requires _1 ensures _1 [UNIQUE_ID(50b5fa147c0e5b9e6c6e24d3de018f312a796c662ac8cf4f82a65141b5c1c7ba) contentStartColumn(8) contentStartLine(338) org.kframework.attributes.Location(Location(338,8,338,34)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'1:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orBool'UndsUnds'BOOL'Unds'Bool'Unds'Bool'Unds'Bool{}(Var'Unds'0:SortBool{},\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'1:SortBool{})),
        Var'Unds'1:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'1:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("338"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(338,8,338,34)"), UNIQUE'Unds'ID{}("50b5fa147c0e5b9e6c6e24d3de018f312a796c662ac8cf4f82a65141b5c1c7ba")]

// rule `_orBool__BOOL_Bool_Bool_Bool`(#token("false","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(fd354715c1ec4875a94c348cc1369a78bd9c7d7ea16a377b110867d2d6b9d976) contentStartColumn(8) contentStartLine(339) org.kframework.attributes.Location(Location(339,8,339,32)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orBool'UndsUnds'BOOL'Unds'Bool'Unds'Bool'Unds'Bool{}(\dv{SortBool{}}("false"),VarB:SortBool{}),
        VarB:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("339"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(339,8,339,32)"), UNIQUE'Unds'ID{}("fd354715c1ec4875a94c348cc1369a78bd9c7d7ea16a377b110867d2d6b9d976")]

// rule `_orElseBool_`(#token("true","Bool") #as _1,_0)=>_1 requires _1 ensures _1 [UNIQUE_ID(73e5640668de4bd9a9bc557aa9f2ab264a44a4afc44099933ed18b2d9fb7ecda) contentStartColumn(8) contentStartLine(342) org.kframework.attributes.Location(Location(342,8,342,33)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'1:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orElseBool'Unds'{}(\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'1:SortBool{}),Var'Unds'0:SortBool{}),
        Var'Unds'1:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'1:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("342"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(342,8,342,33)"), UNIQUE'Unds'ID{}("73e5640668de4bd9a9bc557aa9f2ab264a44a4afc44099933ed18b2d9fb7ecda")]

// rule `_orElseBool_`(K,#token("false","Bool"))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0943d1ee643c9b20db8186b069d596390234d7ae17deef0eb5df56d604652df5) contentStartColumn(8) contentStartLine(345) org.kframework.attributes.Location(Location(345,8,345,37)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orElseBool'Unds'{}(VarK:SortBool{},\dv{SortBool{}}("false")),
        VarK:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("345"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(345,8,345,37)"), UNIQUE'Unds'ID{}("0943d1ee643c9b20db8186b069d596390234d7ae17deef0eb5df56d604652df5")]

// rule `_orElseBool_`(_0,#token("true","Bool") #as _1)=>_1 requires _1 ensures _1 [UNIQUE_ID(53eb8e839f826d23ba5ac5b4c664ba890f66acecb1700ae2afae906c5ad31fde) contentStartColumn(8) contentStartLine(343) org.kframework.attributes.Location(Location(343,8,343,33)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'1:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orElseBool'Unds'{}(Var'Unds'0:SortBool{},\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'1:SortBool{})),
        Var'Unds'1:SortBool{}),
      \equals{SortBool{},R}(
        Var'Unds'1:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("343"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(343,8,343,33)"), UNIQUE'Unds'ID{}("53eb8e839f826d23ba5ac5b4c664ba890f66acecb1700ae2afae906c5ad31fde")]

// rule `_orElseBool_`(#token("false","Bool"),K)=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(93c62e2a1ad3d088f4f73f7239196b7745782f7646fa90eb12c2c42741d645f0) contentStartColumn(8) contentStartLine(344) org.kframework.attributes.Location(Location(344,8,344,37)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orElseBool'Unds'{}(\dv{SortBool{}}("false"),VarK:SortBool{}),
        VarK:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("344"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(344,8,344,37)"), UNIQUE'Unds'ID{}("93c62e2a1ad3d088f4f73f7239196b7745782f7646fa90eb12c2c42741d645f0")]

// rule `_xorBool_`(B,B)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(acf02bbb1c02949b2bfee30178d6cdd980414738448a5f9c5576e7522a683b4f) contentStartColumn(8) contentStartLine(335) org.kframework.attributes.Location(Location(335,8,335,38)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'xorBool'Unds'{}(VarB:SortBool{},VarB:SortBool{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("335"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(335,8,335,38)"), UNIQUE'Unds'ID{}("acf02bbb1c02949b2bfee30178d6cdd980414738448a5f9c5576e7522a683b4f")]

// rule `_xorBool_`(B,#token("false","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bc1d9558787d9b5f86fbd50908b7841cd343eaf620351d6791f03fb9434badc8) contentStartColumn(8) contentStartLine(334) org.kframework.attributes.Location(Location(334,8,334,38)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'xorBool'Unds'{}(VarB:SortBool{},\dv{SortBool{}}("false")),
        VarB:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("334"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(334,8,334,38)"), UNIQUE'Unds'ID{}("bc1d9558787d9b5f86fbd50908b7841cd343eaf620351d6791f03fb9434badc8")]

// rule `_xorBool_`(#token("false","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(20ee6a1a4ec1a9203558107910a0bf65c612a140ecce3ca920bc69806b8ccf3a) contentStartColumn(8) contentStartLine(333) org.kframework.attributes.Location(Location(333,8,333,38)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'xorBool'Unds'{}(\dv{SortBool{}}("false"),VarB:SortBool{}),
        VarB:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("333"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(333,8,333,38)"), UNIQUE'Unds'ID{}("20ee6a1a4ec1a9203558107910a0bf65c612a140ecce3ca920bc69806b8ccf3a")]

// rule `bitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(I,IDX,LEN)=>`_modInt_`(`_>>Int_`(I,IDX),`_<<Int_`(#token("1","Int"),LEN)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6d2521bec62ae0624c366eac1bef561e6cfe867154f1dc263fede52ab2e3cd35) contentStartColumn(8) contentStartLine(456) org.kframework.attributes.Location(Location(456,8,456,85)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{},VarLEN:SortInt{}),
        Lbl'Unds'modInt'Unds'{}(Lbl'Unds-GT--GT-'Int'Unds'{}(VarI:SortInt{},VarIDX:SortInt{}),Lbl'Unds-LT--LT-'Int'Unds'{}(\dv{SortInt{}}("1"),VarLEN:SortInt{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("456"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(456,8,456,85)"), UNIQUE'Unds'ID{}("6d2521bec62ae0624c366eac1bef561e6cfe867154f1dc263fede52ab2e3cd35")]

// rule `countAllOccurrences(_,_)_STRING_Int_String_String`(Source,ToCount)=>`_+Int_`(#token("1","Int"),`countAllOccurrences(_,_)_STRING_Int_String_String`(`substrString(_,_,_)_STRING_String_String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING_Int_String_String_Int`(Source,ToCount,#token("0","Int")),`lengthString(_)_STRING_Int_String`(ToCount)),`lengthString(_)_STRING_Int_String`(Source)),ToCount)) requires `_>=Int_`(`findString(_,_,_)_STRING_Int_String_String_Int`(Source,ToCount,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(4bccfa06c644e08f8bc72d06c14c533f32eee6cde071a3b29aa26ff23c922baf) contentStartColumn(8) contentStartLine(627) org.kframework.attributes.Location(Location(627,8,628,60)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String{}(VarSource:SortString{},VarToCount:SortString{}),
        Lbl'UndsPlus'Int'Unds'{}(\dv{SortInt{}}("1"),LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING'Unds'Int'Unds'String{}(VarToCount:SortString{})),LbllengthString'LParUndsRParUnds'STRING'Unds'Int'Unds'String{}(VarSource:SortString{})),VarToCount:SortString{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" K [klabel(#ruleRequires) symbol()]"), contentStartLine{}("627"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(627,8,628,60)"), UNIQUE'Unds'ID{}("4bccfa06c644e08f8bc72d06c14c533f32eee6cde071a3b29aa26ff23c922baf")]

// rule `countAllOccurrences(_,_)_STRING_Int_String_String`(Source,ToCount)=>#token("0","Int") requires `_<Int_`(`findString(_,_,_)_STRING_Int_String_String_Int`(Source,ToCount,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(dfa3f190163a3253c79d99a66ad7826cdaebf15d32e558c2e1c1c28d223401ec) contentStartColumn(8) contentStartLine(625) org.kframework.attributes.Location(Location(625,8,626,59)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-LT-'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String{}(VarSource:SortString{},VarToCount:SortString{}),
        \dv{SortInt{}}("0")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" K [klabel(#ruleRequires) symbol()]"), contentStartLine{}("625"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(625,8,626,59)"), UNIQUE'Unds'ID{}("dfa3f190163a3253c79d99a66ad7826cdaebf15d32e558c2e1c1c28d223401ec")]

// rule `findChar(_,_,_)_STRING_Int_String_String_Int`(S1,S2,I)=>`#if_#then_#else_#fi_K-EQUAL_Sort_Bool_Sort_Sort`{Int}(`_==Int_`(`findString(_,_,_)_STRING_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),#token("-1","Int")),`findChar(_,_,_)_STRING_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING_Int_String`(S2)),I),`#if_#then_#else_#fi_K-EQUAL_Sort_Bool_Sort_Sort`{Int}(`_==Int_`(`findChar(_,_,_)_STRING_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING_Int_String`(S2)),I),#token("-1","Int")),`findString(_,_,_)_STRING_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`minInt(_,_)_INT-COMMON_Int_Int_Int`(`findString(_,_,_)_STRING_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`findChar(_,_,_)_STRING_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING_Int_String`(S2)),I)))) requires `_=/=String__STRING_Bool_String_String`(S2,#token("\"\"","String")) ensures #token("true","Bool") [UNIQUE_ID(0d56eed034d2fa4ad082122b8d6b80f1e82c06fb05ba24f8cec9dcc22391f3c5) contentStartColumn(8) contentStartLine(620) org.kframework.attributes.Location(Location(620,8,620,431)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(VarS2:SortString{},\dv{SortString{}}("")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},VarS2:SortString{},VarI:SortInt{}),
        Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortInt{}}(Lbl'UndsEqlsEqls'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),\dv{SortInt{}}("-1")),LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING'Unds'Int'Unds'String{}(VarS2:SortString{})),VarI:SortInt{}),Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortInt{}}(Lbl'UndsEqlsEqls'Int'Unds'{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING'Unds'Int'Unds'String{}(VarS2:SortString{})),VarI:SortInt{}),\dv{SortInt{}}("-1")),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblminInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING'Unds'Int'Unds'String{}(VarS2:SortString{})),VarI:SortInt{}))))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" K [klabel(#ruleRequires) symbol()]"), contentStartLine{}("620"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(620,8,620,431)"), UNIQUE'Unds'ID{}("0d56eed034d2fa4ad082122b8d6b80f1e82c06fb05ba24f8cec9dcc22391f3c5")]

// rule `findChar(_,_,_)_STRING_Int_String_String_Int`(_0,#token("\"\"","String"),_1)=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0591f2bf9f969151282b463b90a46889c2f24b2ccc17d5e7d0f4a39bac3b9431) contentStartColumn(8) contentStartLine(621) org.kframework.attributes.Location(Location(621,8,621,32)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(Var'Unds'0:SortString{},\dv{SortString{}}(""),Var'Unds'1:SortInt{}),
        \dv{SortInt{}}("-1")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("621"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(621,8,621,32)"), UNIQUE'Unds'ID{}("0591f2bf9f969151282b463b90a46889c2f24b2ccc17d5e7d0f4a39bac3b9431")]

// rule `freshId(_)_ID-SYNTAX_Id_Int`(I)=>`String2Id(_)_ID-SYNTAX_Id_String`(`_+String__STRING_String_String_String`(#token("\"_\"","String"),`Int2String(_)_STRING_String_Int`(I))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9a9b9b8184277146c09eab2a3b04c692bacf9ab5bb4505273f0b73df25d23d2a) contentStartColumn(8) contentStartLine(838) org.kframework.attributes.Location(Location(838,8,838,62)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortId{},R} (
        LblfreshId'LParUndsRParUnds'ID-SYNTAX'Unds'Id'Unds'Int{}(VarI:SortInt{}),
        LblString2Id'LParUndsRParUnds'ID-SYNTAX'Unds'Id'Unds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING'Unds'String'Unds'String'Unds'String{}(\dv{SortString{}}("_"),LblInt2String'LParUndsRParUnds'STRING'Unds'String'Unds'Int{}(VarI:SortInt{})))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("838"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(838,8,838,62)"), UNIQUE'Unds'ID{}("9a9b9b8184277146c09eab2a3b04c692bacf9ab5bb4505273f0b73df25d23d2a")]

// rule `freshInt(_)_INT_Int_Int`(I)=>I requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f1540ca30a8409b2d12d93dbe87ce1795c0b21bbb9e38cb622cd6b5997b7273d) contentStartColumn(8) contentStartLine(476) org.kframework.attributes.Location(Location(476,8,476,28)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(VarI:SortInt{}),
        VarI:SortInt{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("476"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(476,8,476,28)"), UNIQUE'Unds'ID{}("f1540ca30a8409b2d12d93dbe87ce1795c0b21bbb9e38cb622cd6b5997b7273d")]

// rule getGeneratedCounterCell(`<generatedTop>`(DotVar0,Cell))=>Cell requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortGeneratedCounterCell{},R} (
        LblgetGeneratedCounterCell{}(Lbl'-LT-'generatedTop'-GT-'{}(VarDotVar0:SortTCell{},VarCell:SortGeneratedCounterCell{})),
        VarCell:SortGeneratedCounterCell{}),
      \top{R}()))
  []

// rule initEnvCell(.KList)=>`<env>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortEnvCell{},R} (
        LblinitEnvCell{}(),
        Lbl'-LT-'env'-GT-'{}(Lbl'Stop'Map{}())),
      \top{R}()))
  [initializer{}()]

// rule initFunThreadCell(.KList)=>`FunThreadCellMapItem`(initIdCell(.KList),`<funThread>`(initIdCell(.KList),initScopeCell(.KList),initParamsCell(.KList),initTempCell(.KList),initLocalEnvCell(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortFunThreadCellMap{},R} (
        LblinitFunThreadCell{}(),
        LblFunThreadCellMapItem{}(LblinitIdCell{}(),Lbl'-LT-'funThread'-GT-'{}(LblinitIdCell{}(),LblinitScopeCell{}(),LblinitParamsCell{}(),LblinitTempCell{}(),LblinitLocalEnvCell{}()))),
      \top{R}()))
  [initializer{}()]

// rule initFunctionCell(.KList)=>`<function>`(`.FunThreadCellMap`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortFunctionCell{},R} (
        LblinitFunctionCell{}(),
        Lbl'-LT-'function'-GT-'{}(Lbl'Stop'FunThreadCellMap{}())),
      \top{R}()))
  [initializer{}()]

// rule initGeneratedCounterCell(.KList)=>`<generatedCounter>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortGeneratedCounterCell{},R} (
        LblinitGeneratedCounterCell{}(),
        Lbl'-LT-'generatedCounter'-GT-'{}(\dv{SortInt{}}("0"))),
      \top{R}()))
  [initializer{}()]

// rule initGeneratedTopCell(Init)=>`<generatedTop>`(initTCell(Init),initGeneratedCounterCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortGeneratedTopCell{},R} (
        LblinitGeneratedTopCell{}(VarInit:SortMap{}),
        Lbl'-LT-'generatedTop'-GT-'{}(LblinitTCell{}(VarInit:SortMap{}),LblinitGeneratedCounterCell{}())),
      \top{R}()))
  [initializer{}()]

// rule initIdCell(.KList)=>`<id>`(.K) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortIdCell{},R} (
        LblinitIdCell{}(),
        Lbl'-LT-'id'-GT-'{}(dotk{}())),
      \top{R}()))
  [initializer{}()]

// rule initKCell(Init)=>`<k>`(inj{MainKotlinProg,KItem}(`project:MainKotlinProg`(`Map:lookup`(Init,inj{KConfigVar,KItem}(#token("$PGM","KConfigVar")))))) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortKCell{},R} (
        LblinitKCell{}(VarInit:SortMap{}),
        Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortMainKotlinProg{}, SortKItem{}}(Lblproject'Coln'MainKotlinProg{}(kseq{}(LblMap'Coln'lookup{}(VarInit:SortMap{},inj{SortKConfigVar{}, SortKItem{}}(\dv{SortKConfigVar{}}("$PGM"))),dotk{}()))),dotk{}()))),
      \top{R}()))
  [initializer{}()]

// rule initLocCell(.KList)=>`<loc>`(#token("1","Int")) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortLocCell{},R} (
        LblinitLocCell{}(),
        Lbl'-LT-'loc'-GT-'{}(\dv{SortInt{}}("1"))),
      \top{R}()))
  [initializer{}()]

// rule initLocalEnvCell(.KList)=>`<localEnv>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortLocalEnvCell{},R} (
        LblinitLocalEnvCell{}(),
        Lbl'-LT-'localEnv'-GT-'{}(Lbl'Stop'Map{}())),
      \top{R}()))
  [initializer{}()]

// rule initMultsCell(.KList)=>`<mults>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortMultsCell{},R} (
        LblinitMultsCell{}(),
        Lbl'-LT-'mults'-GT-'{}(Lbl'Stop'Map{}())),
      \top{R}()))
  [initializer{}()]

// rule initOutCell(.KList)=>`<out>`(`.List`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortOutCell{},R} (
        LblinitOutCell{}(),
        Lbl'-LT-'out'-GT-'{}(Lbl'Stop'List{}())),
      \top{R}()))
  [initializer{}()]

// rule initParamsCell(.KList)=>`<params>`(.K) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortParamsCell{},R} (
        LblinitParamsCell{}(),
        Lbl'-LT-'params'-GT-'{}(dotk{}())),
      \top{R}()))
  [initializer{}()]

// rule initScopeCell(.KList)=>`<scope>`(.K) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortScopeCell{},R} (
        LblinitScopeCell{}(),
        Lbl'-LT-'scope'-GT-'{}(dotk{}())),
      \top{R}()))
  [initializer{}()]

// rule initStoreCell(.KList)=>`<store>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortStoreCell{},R} (
        LblinitStoreCell{}(),
        Lbl'-LT-'store'-GT-'{}(Lbl'Stop'Map{}())),
      \top{R}()))
  [initializer{}()]

// rule initTCell(Init)=>`<T>`(initKCell(Init),initFunctionCell(.KList),initEnvCell(.KList),initStoreCell(.KList),initMultsCell(.KList),initOutCell(.KList),initLocCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortTCell{},R} (
        LblinitTCell{}(VarInit:SortMap{}),
        Lbl'-LT-'T'-GT-'{}(LblinitKCell{}(VarInit:SortMap{}),LblinitFunctionCell{}(),LblinitEnvCell{}(),LblinitStoreCell{}(),LblinitMultsCell{}(),LblinitOutCell{}(),LblinitLocCell{}())),
      \top{R}()))
  [initializer{}()]

// rule initTempCell(.KList)=>`<temp>`(.K) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortTempCell{},R} (
        LblinitTempCell{}(),
        Lbl'-LT-'temp'-GT-'{}(dotk{}())),
      \top{R}()))
  [initializer{}()]

// rule isAExp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortAExp{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortAExp{}, SortKItem{}}(Var'Unds'0:SortAExp{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAExp{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isAExp(inj{AExp,KItem}(AExp))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAExp{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarAExp:SortAExp{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isAExpMod(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortAExpMod{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortAExpMod{}, SortKItem{}}(Var'Unds'1:SortAExpMod{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAExpMod{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isAExpMod(inj{AExpMod,KItem}(AExpMod))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAExpMod{}(kseq{}(inj{SortAExpMod{}, SortKItem{}}(VarAExpMod:SortAExpMod{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isAExps(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortAExps{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortAExps{}, SortKItem{}}(Var'Unds'1:SortAExps{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAExps{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isAExps(inj{AExps,KItem}(AExps))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAExps{}(kseq{}(inj{SortAExps{}, SortKItem{}}(VarAExps:SortAExps{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isAssigner(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortAssigner{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortAssigner{}, SortKItem{}}(Var'Unds'0:SortAssigner{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAssigner{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isAssigner(inj{Assigner,KItem}(Assigner))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAssigner{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(VarAssigner:SortAssigner{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isBExp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortBExp{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortBExp{}, SortKItem{}}(Var'Unds'1:SortBExp{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBExp{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isBExp(inj{BExp,KItem}(BExp))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBExp{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarBExp:SortBExp{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isBlock(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortBlock{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortBlock{}, SortKItem{}}(Var'Unds'1:SortBlock{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBlock{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isBlock(inj{Block,KItem}(Block))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBlock{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarBlock:SortBlock{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isBool(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortBool{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortBool{}, SortKItem{}}(Var'Unds'0:SortBool{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBool{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isBool(inj{Bool,KItem}(Bool))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBool{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortCell{}, SortKItem{}}(Var'Unds'1:SortCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isCell(inj{Cell,KItem}(Cell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisCell{}(kseq{}(inj{SortCell{}, SortKItem{}}(VarCell:SortCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isDeclaredVar(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortDeclaredVar{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortDeclaredVar{}, SortKItem{}}(Var'Unds'1:SortDeclaredVar{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisDeclaredVar{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isDeclaredVar(inj{DeclaredVar,KItem}(DeclaredVar))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisDeclaredVar{}(kseq{}(inj{SortDeclaredVar{}, SortKItem{}}(VarDeclaredVar:SortDeclaredVar{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isElseIfStatement(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortElseIfStatement{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortElseIfStatement{}, SortKItem{}}(Var'Unds'1:SortElseIfStatement{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisElseIfStatement{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isElseIfStatement(inj{ElseIfStatement,KItem}(ElseIfStatement))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisElseIfStatement{}(kseq{}(inj{SortElseIfStatement{}, SortKItem{}}(VarElseIfStatement:SortElseIfStatement{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isEnvCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortEnvCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortEnvCell{}, SortKItem{}}(Var'Unds'1:SortEnvCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisEnvCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isEnvCell(inj{EnvCell,KItem}(EnvCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisEnvCell{}(kseq{}(inj{SortEnvCell{}, SortKItem{}}(VarEnvCell:SortEnvCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isEnvCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortEnvCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortEnvCellOpt{}, SortKItem{}}(Var'Unds'1:SortEnvCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisEnvCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isEnvCellOpt(inj{EnvCellOpt,KItem}(EnvCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisEnvCellOpt{}(kseq{}(inj{SortEnvCellOpt{}, SortKItem{}}(VarEnvCellOpt:SortEnvCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isFloat(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortFloat{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortFloat{}, SortKItem{}}(Var'Unds'1:SortFloat{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFloat{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isFloat(inj{Float,KItem}(Float))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFloat{}(kseq{}(inj{SortFloat{}, SortKItem{}}(VarFloat:SortFloat{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isFunReturn(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortFunReturn{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortFunReturn{}, SortKItem{}}(Var'Unds'1:SortFunReturn{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunReturn{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isFunReturn(inj{FunReturn,KItem}(FunReturn))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunReturn{}(kseq{}(inj{SortFunReturn{}, SortKItem{}}(VarFunReturn:SortFunReturn{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isFunReturnType(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortFunReturnType{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortFunReturnType{}, SortKItem{}}(Var'Unds'0:SortFunReturnType{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunReturnType{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isFunReturnType(inj{FunReturnType,KItem}(FunReturnType))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunReturnType{}(kseq{}(inj{SortFunReturnType{}, SortKItem{}}(VarFunReturnType:SortFunReturnType{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isFunThreadCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortFunThreadCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortFunThreadCell{}, SortKItem{}}(Var'Unds'1:SortFunThreadCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunThreadCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isFunThreadCell(inj{FunThreadCell,KItem}(FunThreadCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunThreadCell{}(kseq{}(inj{SortFunThreadCell{}, SortKItem{}}(VarFunThreadCell:SortFunThreadCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isFunThreadCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortFunThreadCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortFunThreadCellFragment{}, SortKItem{}}(Var'Unds'1:SortFunThreadCellFragment{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunThreadCellFragment{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isFunThreadCellFragment(inj{FunThreadCellFragment,KItem}(FunThreadCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunThreadCellFragment{}(kseq{}(inj{SortFunThreadCellFragment{}, SortKItem{}}(VarFunThreadCellFragment:SortFunThreadCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isFunThreadCellMap(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortFunThreadCellMap{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortFunThreadCellMap{}, SortKItem{}}(Var'Unds'1:SortFunThreadCellMap{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunThreadCellMap{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isFunThreadCellMap(inj{FunThreadCellMap,KItem}(FunThreadCellMap))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunThreadCellMap{}(kseq{}(inj{SortFunThreadCellMap{}, SortKItem{}}(VarFunThreadCellMap:SortFunThreadCellMap{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isFunctionCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortFunctionCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortFunctionCell{}, SortKItem{}}(Var'Unds'0:SortFunctionCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunctionCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isFunctionCell(inj{FunctionCell,KItem}(FunctionCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunctionCell{}(kseq{}(inj{SortFunctionCell{}, SortKItem{}}(VarFunctionCell:SortFunctionCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isFunctionCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortFunctionCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortFunctionCellFragment{}, SortKItem{}}(Var'Unds'0:SortFunctionCellFragment{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunctionCellFragment{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isFunctionCellFragment(inj{FunctionCellFragment,KItem}(FunctionCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunctionCellFragment{}(kseq{}(inj{SortFunctionCellFragment{}, SortKItem{}}(VarFunctionCellFragment:SortFunctionCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isFunctionCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortFunctionCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortFunctionCellOpt{}, SortKItem{}}(Var'Unds'0:SortFunctionCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunctionCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isFunctionCellOpt(inj{FunctionCellOpt,KItem}(FunctionCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunctionCellOpt{}(kseq{}(inj{SortFunctionCellOpt{}, SortKItem{}}(VarFunctionCellOpt:SortFunctionCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isFunctionMain(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortFunctionMain{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortFunctionMain{}, SortKItem{}}(Var'Unds'1:SortFunctionMain{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunctionMain{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isFunctionMain(inj{FunctionMain,KItem}(FunctionMain))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFunctionMain{}(kseq{}(inj{SortFunctionMain{}, SortKItem{}}(VarFunctionMain:SortFunctionMain{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isGeneratedCounterCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortGeneratedCounterCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortGeneratedCounterCell{}, SortKItem{}}(Var'Unds'0:SortGeneratedCounterCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisGeneratedCounterCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isGeneratedCounterCell(inj{GeneratedCounterCell,KItem}(GeneratedCounterCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisGeneratedCounterCell{}(kseq{}(inj{SortGeneratedCounterCell{}, SortKItem{}}(VarGeneratedCounterCell:SortGeneratedCounterCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isGeneratedCounterCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortGeneratedCounterCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortGeneratedCounterCellOpt{}, SortKItem{}}(Var'Unds'0:SortGeneratedCounterCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisGeneratedCounterCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isGeneratedCounterCellOpt(inj{GeneratedCounterCellOpt,KItem}(GeneratedCounterCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisGeneratedCounterCellOpt{}(kseq{}(inj{SortGeneratedCounterCellOpt{}, SortKItem{}}(VarGeneratedCounterCellOpt:SortGeneratedCounterCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isGeneratedTopCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortGeneratedTopCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortGeneratedTopCell{}, SortKItem{}}(Var'Unds'1:SortGeneratedTopCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisGeneratedTopCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isGeneratedTopCell(inj{GeneratedTopCell,KItem}(GeneratedTopCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisGeneratedTopCell{}(kseq{}(inj{SortGeneratedTopCell{}, SortKItem{}}(VarGeneratedTopCell:SortGeneratedTopCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isGeneratedTopCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortGeneratedTopCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortGeneratedTopCellFragment{}, SortKItem{}}(Var'Unds'0:SortGeneratedTopCellFragment{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisGeneratedTopCellFragment{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isGeneratedTopCellFragment(inj{GeneratedTopCellFragment,KItem}(GeneratedTopCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisGeneratedTopCellFragment{}(kseq{}(inj{SortGeneratedTopCellFragment{}, SortKItem{}}(VarGeneratedTopCellFragment:SortGeneratedTopCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isIOError(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortIOError{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortIOError{}, SortKItem{}}(Var'Unds'1:SortIOError{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIOError{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isIOError(inj{IOError,KItem}(IOError))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIOError{}(kseq{}(inj{SortIOError{}, SortKItem{}}(VarIOError:SortIOError{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isIOFile(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortIOFile{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortIOFile{}, SortKItem{}}(Var'Unds'1:SortIOFile{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIOFile{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isIOFile(inj{IOFile,KItem}(IOFile))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIOFile{}(kseq{}(inj{SortIOFile{}, SortKItem{}}(VarIOFile:SortIOFile{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isIOInt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortIOInt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortIOInt{}, SortKItem{}}(Var'Unds'1:SortIOInt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIOInt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isIOInt(inj{IOInt,KItem}(IOInt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIOInt{}(kseq{}(inj{SortIOInt{}, SortKItem{}}(VarIOInt:SortIOInt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isIOString(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortIOString{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortIOString{}, SortKItem{}}(Var'Unds'1:SortIOString{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIOString{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isIOString(inj{IOString,KItem}(IOString))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIOString{}(kseq{}(inj{SortIOString{}, SortKItem{}}(VarIOString:SortIOString{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isId(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortId{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortId{}, SortKItem{}}(Var'Unds'1:SortId{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisId{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isId(inj{Id,KItem}(Id))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisId{}(kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isIdCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortIdCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortIdCell{}, SortKItem{}}(Var'Unds'0:SortIdCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIdCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isIdCell(inj{IdCell,KItem}(IdCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIdCell{}(kseq{}(inj{SortIdCell{}, SortKItem{}}(VarIdCell:SortIdCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isIdCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortIdCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortIdCellOpt{}, SortKItem{}}(Var'Unds'1:SortIdCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIdCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isIdCellOpt(inj{IdCellOpt,KItem}(IdCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIdCellOpt{}(kseq{}(inj{SortIdCellOpt{}, SortKItem{}}(VarIdCellOpt:SortIdCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isIds(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortIds{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortIds{}, SortKItem{}}(Var'Unds'1:SortIds{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIds{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isIds(inj{Ids,KItem}(Ids))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIds{}(kseq{}(inj{SortIds{}, SortKItem{}}(VarIds:SortIds{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isInt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortInt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortInt{}, SortKItem{}}(Var'Unds'0:SortInt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisInt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isInt(inj{Int,KItem}(Int))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisInt{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isK(K)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisK{}(VarK:SortK{}),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortKCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortKCell{}, SortKItem{}}(Var'Unds'1:SortKCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKCell(inj{KCell,KItem}(KCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCell{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortKCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortKCellOpt{}, SortKItem{}}(Var'Unds'1:SortKCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKCellOpt(inj{KCellOpt,KItem}(KCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCellOpt{}(kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarKCellOpt:SortKCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKConfigVar(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortKConfigVar{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortKConfigVar{}, SortKItem{}}(Var'Unds'1:SortKConfigVar{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKConfigVar{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKConfigVar(inj{KConfigVar,KItem}(KConfigVar))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKConfigVar{}(kseq{}(inj{SortKConfigVar{}, SortKItem{}}(VarKConfigVar:SortKConfigVar{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortKItem{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(Var'Unds'0:SortKItem{},dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKItem(KItem)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(VarKItem:SortKItem{},dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKResult(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortKResult{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortKResult{}, SortKItem{}}(Var'Unds'1:SortKResult{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKResult{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKResult(inj{KResult,KItem}(KResult))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKResult{}(kseq{}(inj{SortKResult{}, SortKItem{}}(VarKResult:SortKResult{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKotIntVarAssign(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortKotIntVarAssign{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortKotIntVarAssign{}, SortKItem{}}(Var'Unds'1:SortKotIntVarAssign{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKotIntVarAssign{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKotIntVarAssign(inj{KotIntVarAssign,KItem}(KotIntVarAssign))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKotIntVarAssign{}(kseq{}(inj{SortKotIntVarAssign{}, SortKItem{}}(VarKotIntVarAssign:SortKotIntVarAssign{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKotlinFun(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortKotlinFun{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortKotlinFun{}, SortKItem{}}(Var'Unds'1:SortKotlinFun{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKotlinFun{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKotlinFun(inj{KotlinFun,KItem}(KotlinFun))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKotlinFun{}(kseq{}(inj{SortKotlinFun{}, SortKItem{}}(VarKotlinFun:SortKotlinFun{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKotlinFunCall(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortKotlinFunCall{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortKotlinFunCall{}, SortKItem{}}(Var'Unds'1:SortKotlinFunCall{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKotlinFunCall{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKotlinFunCall(inj{KotlinFunCall,KItem}(KotlinFunCall))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKotlinFunCall{}(kseq{}(inj{SortKotlinFunCall{}, SortKItem{}}(VarKotlinFunCall:SortKotlinFunCall{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isList(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortList{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortList{}, SortKItem{}}(Var'Unds'0:SortList{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisList{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isList(inj{List,KItem}(List))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisList{}(kseq{}(inj{SortList{}, SortKItem{}}(VarList:SortList{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isLocCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortLocCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortLocCell{}, SortKItem{}}(Var'Unds'1:SortLocCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisLocCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isLocCell(inj{LocCell,KItem}(LocCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisLocCell{}(kseq{}(inj{SortLocCell{}, SortKItem{}}(VarLocCell:SortLocCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isLocCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortLocCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortLocCellOpt{}, SortKItem{}}(Var'Unds'0:SortLocCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisLocCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isLocCellOpt(inj{LocCellOpt,KItem}(LocCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisLocCellOpt{}(kseq{}(inj{SortLocCellOpt{}, SortKItem{}}(VarLocCellOpt:SortLocCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isLocalEnvCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortLocalEnvCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortLocalEnvCell{}, SortKItem{}}(Var'Unds'1:SortLocalEnvCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisLocalEnvCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isLocalEnvCell(inj{LocalEnvCell,KItem}(LocalEnvCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisLocalEnvCell{}(kseq{}(inj{SortLocalEnvCell{}, SortKItem{}}(VarLocalEnvCell:SortLocalEnvCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isLocalEnvCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortLocalEnvCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortLocalEnvCellOpt{}, SortKItem{}}(Var'Unds'0:SortLocalEnvCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisLocalEnvCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isLocalEnvCellOpt(inj{LocalEnvCellOpt,KItem}(LocalEnvCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisLocalEnvCellOpt{}(kseq{}(inj{SortLocalEnvCellOpt{}, SortKItem{}}(VarLocalEnvCellOpt:SortLocalEnvCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isLocalFun(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortLocalFun{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortLocalFun{}, SortKItem{}}(Var'Unds'0:SortLocalFun{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisLocalFun{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isLocalFun(inj{LocalFun,KItem}(LocalFun))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisLocalFun{}(kseq{}(inj{SortLocalFun{}, SortKItem{}}(VarLocalFun:SortLocalFun{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isLocalResId(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortLocalResId{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortLocalResId{}, SortKItem{}}(Var'Unds'1:SortLocalResId{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisLocalResId{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isLocalResId(inj{LocalResId,KItem}(LocalResId))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisLocalResId{}(kseq{}(inj{SortLocalResId{}, SortKItem{}}(VarLocalResId:SortLocalResId{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isLocalResInt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortLocalResInt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortLocalResInt{}, SortKItem{}}(Var'Unds'1:SortLocalResInt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisLocalResInt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isLocalResInt(inj{LocalResInt,KItem}(LocalResInt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisLocalResInt{}(kseq{}(inj{SortLocalResInt{}, SortKItem{}}(VarLocalResInt:SortLocalResInt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isLocalResString(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortLocalResString{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortLocalResString{}, SortKItem{}}(Var'Unds'1:SortLocalResString{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisLocalResString{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isLocalResString(inj{LocalResString,KItem}(LocalResString))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisLocalResString{}(kseq{}(inj{SortLocalResString{}, SortKItem{}}(VarLocalResString:SortLocalResString{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isMainKotlinProg(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortMainKotlinProg{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortMainKotlinProg{}, SortKItem{}}(Var'Unds'1:SortMainKotlinProg{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMainKotlinProg{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isMainKotlinProg(inj{MainKotlinProg,KItem}(MainKotlinProg))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMainKotlinProg{}(kseq{}(inj{SortMainKotlinProg{}, SortKItem{}}(VarMainKotlinProg:SortMainKotlinProg{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isMap(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortMap{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortMap{}, SortKItem{}}(Var'Unds'1:SortMap{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMap{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isMap(inj{Map,KItem}(Map))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMap{}(kseq{}(inj{SortMap{}, SortKItem{}}(VarMap:SortMap{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isMultsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortMultsCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortMultsCell{}, SortKItem{}}(Var'Unds'1:SortMultsCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMultsCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isMultsCell(inj{MultsCell,KItem}(MultsCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMultsCell{}(kseq{}(inj{SortMultsCell{}, SortKItem{}}(VarMultsCell:SortMultsCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isMultsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortMultsCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortMultsCellOpt{}, SortKItem{}}(Var'Unds'0:SortMultsCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMultsCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isMultsCellOpt(inj{MultsCellOpt,KItem}(MultsCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMultsCellOpt{}(kseq{}(inj{SortMultsCellOpt{}, SortKItem{}}(VarMultsCellOpt:SortMultsCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isOutCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortOutCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortOutCell{}, SortKItem{}}(Var'Unds'0:SortOutCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisOutCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isOutCell(inj{OutCell,KItem}(OutCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisOutCell{}(kseq{}(inj{SortOutCell{}, SortKItem{}}(VarOutCell:SortOutCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isOutCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortOutCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortOutCellOpt{}, SortKItem{}}(Var'Unds'0:SortOutCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisOutCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isOutCellOpt(inj{OutCellOpt,KItem}(OutCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisOutCellOpt{}(kseq{}(inj{SortOutCellOpt{}, SortKItem{}}(VarOutCellOpt:SortOutCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isParams(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortParams{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortParams{}, SortKItem{}}(Var'Unds'0:SortParams{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisParams{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isParams(inj{Params,KItem}(Params))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisParams{}(kseq{}(inj{SortParams{}, SortKItem{}}(VarParams:SortParams{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isParamsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortParamsCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortParamsCell{}, SortKItem{}}(Var'Unds'1:SortParamsCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisParamsCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isParamsCell(inj{ParamsCell,KItem}(ParamsCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisParamsCell{}(kseq{}(inj{SortParamsCell{}, SortKItem{}}(VarParamsCell:SortParamsCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isParamsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortParamsCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortParamsCellOpt{}, SortKItem{}}(Var'Unds'0:SortParamsCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisParamsCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isParamsCellOpt(inj{ParamsCellOpt,KItem}(ParamsCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisParamsCellOpt{}(kseq{}(inj{SortParamsCellOpt{}, SortKItem{}}(VarParamsCellOpt:SortParamsCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isPrintable(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortPrintable{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortPrintable{}, SortKItem{}}(Var'Unds'1:SortPrintable{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisPrintable{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isPrintable(inj{Printable,KItem}(Printable))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisPrintable{}(kseq{}(inj{SortPrintable{}, SortKItem{}}(VarPrintable:SortPrintable{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isScopeCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortScopeCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortScopeCell{}, SortKItem{}}(Var'Unds'1:SortScopeCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisScopeCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isScopeCell(inj{ScopeCell,KItem}(ScopeCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisScopeCell{}(kseq{}(inj{SortScopeCell{}, SortKItem{}}(VarScopeCell:SortScopeCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isScopeCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortScopeCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortScopeCellOpt{}, SortKItem{}}(Var'Unds'1:SortScopeCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisScopeCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isScopeCellOpt(inj{ScopeCellOpt,KItem}(ScopeCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisScopeCellOpt{}(kseq{}(inj{SortScopeCellOpt{}, SortKItem{}}(VarScopeCellOpt:SortScopeCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isSet(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortSet{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortSet{}, SortKItem{}}(Var'Unds'1:SortSet{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSet{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isSet(inj{Set,KItem}(Set))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSet{}(kseq{}(inj{SortSet{}, SortKItem{}}(VarSet:SortSet{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isSkip(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortSkip{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortSkip{}, SortKItem{}}(Var'Unds'1:SortSkip{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSkip{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isSkip(inj{Skip,KItem}(Skip))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSkip{}(kseq{}(inj{SortSkip{}, SortKItem{}}(VarSkip:SortSkip{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isStatement(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortStatement{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortStatement{}, SortKItem{}}(Var'Unds'1:SortStatement{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStatement{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isStatement(inj{Statement,KItem}(Statement))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStatement{}(kseq{}(inj{SortStatement{}, SortKItem{}}(VarStatement:SortStatement{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isStoreCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortStoreCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortStoreCell{}, SortKItem{}}(Var'Unds'0:SortStoreCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStoreCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isStoreCell(inj{StoreCell,KItem}(StoreCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStoreCell{}(kseq{}(inj{SortStoreCell{}, SortKItem{}}(VarStoreCell:SortStoreCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isStoreCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortStoreCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortStoreCellOpt{}, SortKItem{}}(Var'Unds'0:SortStoreCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStoreCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isStoreCellOpt(inj{StoreCellOpt,KItem}(StoreCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStoreCellOpt{}(kseq{}(inj{SortStoreCellOpt{}, SortKItem{}}(VarStoreCellOpt:SortStoreCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isStream(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortStream{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortStream{}, SortKItem{}}(Var'Unds'0:SortStream{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStream{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isStream(inj{Stream,KItem}(Stream))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStream{}(kseq{}(inj{SortStream{}, SortKItem{}}(VarStream:SortStream{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isString(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortString{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortString{}, SortKItem{}}(Var'Unds'1:SortString{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisString{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isString(inj{String,KItem}(String))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisString{}(kseq{}(inj{SortString{}, SortKItem{}}(VarString:SortString{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isTCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortTCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortTCell{}, SortKItem{}}(Var'Unds'1:SortTCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isTCell(inj{TCell,KItem}(TCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCell{}(kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isTCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortTCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortTCellFragment{}, SortKItem{}}(Var'Unds'1:SortTCellFragment{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCellFragment{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isTCellFragment(inj{TCellFragment,KItem}(TCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCellFragment{}(kseq{}(inj{SortTCellFragment{}, SortKItem{}}(VarTCellFragment:SortTCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isTCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortTCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortTCellOpt{}, SortKItem{}}(Var'Unds'0:SortTCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isTCellOpt(inj{TCellOpt,KItem}(TCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCellOpt{}(kseq{}(inj{SortTCellOpt{}, SortKItem{}}(VarTCellOpt:SortTCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isTempCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortTempCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortTempCell{}, SortKItem{}}(Var'Unds'1:SortTempCell{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTempCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isTempCell(inj{TempCell,KItem}(TempCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTempCell{}(kseq{}(inj{SortTempCell{}, SortKItem{}}(VarTempCell:SortTempCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isTempCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'1:SortTempCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortTempCellOpt{}, SortKItem{}}(Var'Unds'1:SortTempCellOpt{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTempCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isTempCellOpt(inj{TempCellOpt,KItem}(TempCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTempCellOpt{}(kseq{}(inj{SortTempCellOpt{}, SortKItem{}}(VarTempCellOpt:SortTempCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isUniqueIdAssigner(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortUniqueIdAssigner{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortUniqueIdAssigner{}, SortKItem{}}(Var'Unds'0:SortUniqueIdAssigner{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisUniqueIdAssigner{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isUniqueIdAssigner(inj{UniqueIdAssigner,KItem}(UniqueIdAssigner))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisUniqueIdAssigner{}(kseq{}(inj{SortUniqueIdAssigner{}, SortKItem{}}(VarUniqueIdAssigner:SortUniqueIdAssigner{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isValues(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortValues{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortValues{}, SortKItem{}}(Var'Unds'0:SortValues{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisValues{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isValues(inj{Values,KItem}(Values))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisValues{}(kseq{}(inj{SortValues{}, SortKItem{}}(VarValues:SortValues{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isVariableType(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'0:SortVariableType{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \ceil{SortK{}, R} (
                  \and{SortK{}} (
                    VarK:SortK{},
                    kseq{}(inj{SortVariableType{}, SortKItem{}}(Var'Unds'0:SortVariableType{}),dotk{}())
                )),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \top{R}()
    ),
    \and{R} (
      \equals{SortBool{},R} (
        LblisVariableType{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isVariableType(inj{VariableType,KItem}(VariableType))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisVariableType{}(kseq{}(inj{SortVariableType{}, SortKItem{}}(VarVariableType:SortVariableType{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `minInt(_,_)_INT-COMMON_Int_Int_Int`(I1,I2)=>I1 requires `_<=Int_`(I1,I2) ensures #token("true","Bool") [UNIQUE_ID(38650d96d25c007c33eb715dd4181e4a42c220f5e5176d70f1681d38a912778c) contentStartColumn(8) contentStartLine(468) org.kframework.attributes.Location(Location(468,8,468,57)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-LT-Eqls'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{}),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblminInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        VarI1:SortInt{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" K [klabel(#ruleRequires) symbol()]"), contentStartLine{}("468"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(468,8,468,57)"), UNIQUE'Unds'ID{}("38650d96d25c007c33eb715dd4181e4a42c220f5e5176d70f1681d38a912778c")]

// rule `minInt(_,_)_INT-COMMON_Int_Int_Int`(I1,I2)=>I2 requires `_>=Int_`(I1,I2) ensures #token("true","Bool") [UNIQUE_ID(ed79be21493dc628c839ab8c3af1a0a402499df0f71a6d5566fdf35fdd7b16c4) contentStartColumn(8) contentStartLine(469) org.kframework.attributes.Location(Location(469,8,469,57)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{}),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblminInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        VarI2:SortInt{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" K [klabel(#ruleRequires) symbol()]"), contentStartLine{}("469"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(469,8,469,57)"), UNIQUE'Unds'ID{}("ed79be21493dc628c839ab8c3af1a0a402499df0f71a6d5566fdf35fdd7b16c4")]

// rule `notBool_`(#token("true","Bool") #as _0)=>#token("false","Bool") requires _0 ensures _0 [UNIQUE_ID(de18dba5cb1b6e56941a63279edb1d16da29d7a997a3e82cbc2b81b066eadf47) contentStartColumn(8) contentStartLine(320) org.kframework.attributes.Location(Location(320,8,320,29)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Var'Unds'0:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortBool{},R} (
        LblnotBool'Unds'{}(\and{SortBool{}}(\dv{SortBool{}}("true"),Var'Unds'0:SortBool{})),
        \dv{SortBool{}}("false")),
      \equals{SortBool{},R}(
        Var'Unds'0:SortBool{},
        \dv{SortBool{}}("true"))))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("320"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(320,8,320,29)"), UNIQUE'Unds'ID{}("de18dba5cb1b6e56941a63279edb1d16da29d7a997a3e82cbc2b81b066eadf47")]

// rule `notBool_`(#token("false","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(dbe4d83961158619e994f90623f08be11020d80c56685ef1ec2dd2b15760c474) contentStartColumn(8) contentStartLine(321) org.kframework.attributes.Location(Location(321,8,321,29)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblnotBool'Unds'{}(\dv{SortBool{}}("false")),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("321"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(321,8,321,29)"), UNIQUE'Unds'ID{}("dbe4d83961158619e994f90623f08be11020d80c56685ef1ec2dd2b15760c474")]

// rule `project:#tempFile:fd`(#tempFile(K0,K1))=>K1 requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lblproject'ColnHash'tempFile'Coln'fd{}(Lbl'Hash'tempFile{}(VarK0:SortString{},VarK1:SortInt{})),
        VarK1:SortInt{}),
      \top{R}()))
  []

// rule `project:#tempFile:path`(#tempFile(K0,K1))=>K0 requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortString{},R} (
        Lblproject'ColnHash'tempFile'Coln'path{}(Lbl'Hash'tempFile{}(VarK0:SortString{},VarK1:SortInt{})),
        VarK0:SortString{}),
      \top{R}()))
  []

// rule `project:#unknownIOError:errno`(#unknownIOError(K0))=>K0 requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lblproject'ColnHash'unknownIOError'Coln'errno{}(Lbl'Hash'unknownIOError{}(VarK0:SortInt{})),
        VarK0:SortInt{}),
      \top{R}()))
  []

// rule `project:AExp`(inj{AExp,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortAExp{},R} (
        Lblproject'Coln'AExp{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK:SortAExp{}),dotk{}())),
        VarK:SortAExp{}),
      \top{R}()))
  [projection{}()]

// rule `project:AExpMod`(inj{AExpMod,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortAExpMod{},R} (
        Lblproject'Coln'AExpMod{}(kseq{}(inj{SortAExpMod{}, SortKItem{}}(VarK:SortAExpMod{}),dotk{}())),
        VarK:SortAExpMod{}),
      \top{R}()))
  [projection{}()]

// rule `project:AExps`(inj{AExps,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortAExps{},R} (
        Lblproject'Coln'AExps{}(kseq{}(inj{SortAExps{}, SortKItem{}}(VarK:SortAExps{}),dotk{}())),
        VarK:SortAExps{}),
      \top{R}()))
  [projection{}()]

// rule `project:Assigner`(inj{Assigner,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortAssigner{},R} (
        Lblproject'Coln'Assigner{}(kseq{}(inj{SortAssigner{}, SortKItem{}}(VarK:SortAssigner{}),dotk{}())),
        VarK:SortAssigner{}),
      \top{R}()))
  [projection{}()]

// rule `project:BExp`(inj{BExp,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBExp{},R} (
        Lblproject'Coln'BExp{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarK:SortBExp{}),dotk{}())),
        VarK:SortBExp{}),
      \top{R}()))
  [projection{}()]

// rule `project:Block`(inj{Block,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBlock{},R} (
        Lblproject'Coln'Block{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarK:SortBlock{}),dotk{}())),
        VarK:SortBlock{}),
      \top{R}()))
  [projection{}()]

// rule `project:Bool`(inj{Bool,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lblproject'Coln'Bool{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarK:SortBool{}),dotk{}())),
        VarK:SortBool{}),
      \top{R}()))
  [projection{}()]

// rule `project:Cell`(inj{Cell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortCell{},R} (
        Lblproject'Coln'Cell{}(kseq{}(inj{SortCell{}, SortKItem{}}(VarK:SortCell{}),dotk{}())),
        VarK:SortCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:DeclaredVar`(inj{DeclaredVar,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortDeclaredVar{},R} (
        Lblproject'Coln'DeclaredVar{}(kseq{}(inj{SortDeclaredVar{}, SortKItem{}}(VarK:SortDeclaredVar{}),dotk{}())),
        VarK:SortDeclaredVar{}),
      \top{R}()))
  [projection{}()]

// rule `project:ElseIfStatement`(inj{ElseIfStatement,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortElseIfStatement{},R} (
        Lblproject'Coln'ElseIfStatement{}(kseq{}(inj{SortElseIfStatement{}, SortKItem{}}(VarK:SortElseIfStatement{}),dotk{}())),
        VarK:SortElseIfStatement{}),
      \top{R}()))
  [projection{}()]

// rule `project:EnvCell`(inj{EnvCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortEnvCell{},R} (
        Lblproject'Coln'EnvCell{}(kseq{}(inj{SortEnvCell{}, SortKItem{}}(VarK:SortEnvCell{}),dotk{}())),
        VarK:SortEnvCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:EnvCellOpt`(inj{EnvCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortEnvCellOpt{},R} (
        Lblproject'Coln'EnvCellOpt{}(kseq{}(inj{SortEnvCellOpt{}, SortKItem{}}(VarK:SortEnvCellOpt{}),dotk{}())),
        VarK:SortEnvCellOpt{}),
      \top{R}()))
  [projection{}()]

// rule `project:Float`(inj{Float,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortFloat{},R} (
        Lblproject'Coln'Float{}(kseq{}(inj{SortFloat{}, SortKItem{}}(VarK:SortFloat{}),dotk{}())),
        VarK:SortFloat{}),
      \top{R}()))
  [projection{}()]

// rule `project:FunReturn`(inj{FunReturn,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortFunReturn{},R} (
        Lblproject'Coln'FunReturn{}(kseq{}(inj{SortFunReturn{}, SortKItem{}}(VarK:SortFunReturn{}),dotk{}())),
        VarK:SortFunReturn{}),
      \top{R}()))
  [projection{}()]

// rule `project:FunReturnType`(inj{FunReturnType,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortFunReturnType{},R} (
        Lblproject'Coln'FunReturnType{}(kseq{}(inj{SortFunReturnType{}, SortKItem{}}(VarK:SortFunReturnType{}),dotk{}())),
        VarK:SortFunReturnType{}),
      \top{R}()))
  [projection{}()]

// rule `project:FunThreadCell`(inj{FunThreadCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortFunThreadCell{},R} (
        Lblproject'Coln'FunThreadCell{}(kseq{}(inj{SortFunThreadCell{}, SortKItem{}}(VarK:SortFunThreadCell{}),dotk{}())),
        VarK:SortFunThreadCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:FunThreadCellFragment`(inj{FunThreadCellFragment,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortFunThreadCellFragment{},R} (
        Lblproject'Coln'FunThreadCellFragment{}(kseq{}(inj{SortFunThreadCellFragment{}, SortKItem{}}(VarK:SortFunThreadCellFragment{}),dotk{}())),
        VarK:SortFunThreadCellFragment{}),
      \top{R}()))
  [projection{}()]

// rule `project:FunThreadCellMap`(inj{FunThreadCellMap,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortFunThreadCellMap{},R} (
        Lblproject'Coln'FunThreadCellMap{}(kseq{}(inj{SortFunThreadCellMap{}, SortKItem{}}(VarK:SortFunThreadCellMap{}),dotk{}())),
        VarK:SortFunThreadCellMap{}),
      \top{R}()))
  [projection{}()]

// rule `project:FunctionCell`(inj{FunctionCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortFunctionCell{},R} (
        Lblproject'Coln'FunctionCell{}(kseq{}(inj{SortFunctionCell{}, SortKItem{}}(VarK:SortFunctionCell{}),dotk{}())),
        VarK:SortFunctionCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:FunctionCellFragment`(inj{FunctionCellFragment,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortFunctionCellFragment{},R} (
        Lblproject'Coln'FunctionCellFragment{}(kseq{}(inj{SortFunctionCellFragment{}, SortKItem{}}(VarK:SortFunctionCellFragment{}),dotk{}())),
        VarK:SortFunctionCellFragment{}),
      \top{R}()))
  [projection{}()]

// rule `project:FunctionCellOpt`(inj{FunctionCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortFunctionCellOpt{},R} (
        Lblproject'Coln'FunctionCellOpt{}(kseq{}(inj{SortFunctionCellOpt{}, SortKItem{}}(VarK:SortFunctionCellOpt{}),dotk{}())),
        VarK:SortFunctionCellOpt{}),
      \top{R}()))
  [projection{}()]

// rule `project:FunctionMain`(inj{FunctionMain,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortFunctionMain{},R} (
        Lblproject'Coln'FunctionMain{}(kseq{}(inj{SortFunctionMain{}, SortKItem{}}(VarK:SortFunctionMain{}),dotk{}())),
        VarK:SortFunctionMain{}),
      \top{R}()))
  [projection{}()]

// rule `project:GeneratedCounterCell`(inj{GeneratedCounterCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortGeneratedCounterCell{},R} (
        Lblproject'Coln'GeneratedCounterCell{}(kseq{}(inj{SortGeneratedCounterCell{}, SortKItem{}}(VarK:SortGeneratedCounterCell{}),dotk{}())),
        VarK:SortGeneratedCounterCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:GeneratedCounterCellOpt`(inj{GeneratedCounterCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortGeneratedCounterCellOpt{},R} (
        Lblproject'Coln'GeneratedCounterCellOpt{}(kseq{}(inj{SortGeneratedCounterCellOpt{}, SortKItem{}}(VarK:SortGeneratedCounterCellOpt{}),dotk{}())),
        VarK:SortGeneratedCounterCellOpt{}),
      \top{R}()))
  [projection{}()]

// rule `project:GeneratedTopCell`(inj{GeneratedTopCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortGeneratedTopCell{},R} (
        Lblproject'Coln'GeneratedTopCell{}(kseq{}(inj{SortGeneratedTopCell{}, SortKItem{}}(VarK:SortGeneratedTopCell{}),dotk{}())),
        VarK:SortGeneratedTopCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:GeneratedTopCellFragment`(inj{GeneratedTopCellFragment,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortGeneratedTopCellFragment{},R} (
        Lblproject'Coln'GeneratedTopCellFragment{}(kseq{}(inj{SortGeneratedTopCellFragment{}, SortKItem{}}(VarK:SortGeneratedTopCellFragment{}),dotk{}())),
        VarK:SortGeneratedTopCellFragment{}),
      \top{R}()))
  [projection{}()]

// rule `project:IOError`(inj{IOError,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortIOError{},R} (
        Lblproject'Coln'IOError{}(kseq{}(inj{SortIOError{}, SortKItem{}}(VarK:SortIOError{}),dotk{}())),
        VarK:SortIOError{}),
      \top{R}()))
  [projection{}()]

// rule `project:IOFile`(inj{IOFile,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortIOFile{},R} (
        Lblproject'Coln'IOFile{}(kseq{}(inj{SortIOFile{}, SortKItem{}}(VarK:SortIOFile{}),dotk{}())),
        VarK:SortIOFile{}),
      \top{R}()))
  [projection{}()]

// rule `project:IOInt`(inj{IOInt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortIOInt{},R} (
        Lblproject'Coln'IOInt{}(kseq{}(inj{SortIOInt{}, SortKItem{}}(VarK:SortIOInt{}),dotk{}())),
        VarK:SortIOInt{}),
      \top{R}()))
  [projection{}()]

// rule `project:IOString`(inj{IOString,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortIOString{},R} (
        Lblproject'Coln'IOString{}(kseq{}(inj{SortIOString{}, SortKItem{}}(VarK:SortIOString{}),dotk{}())),
        VarK:SortIOString{}),
      \top{R}()))
  [projection{}()]

// rule `project:Id`(inj{Id,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortId{},R} (
        Lblproject'Coln'Id{}(kseq{}(inj{SortId{}, SortKItem{}}(VarK:SortId{}),dotk{}())),
        VarK:SortId{}),
      \top{R}()))
  [projection{}()]

// rule `project:IdCell`(inj{IdCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortIdCell{},R} (
        Lblproject'Coln'IdCell{}(kseq{}(inj{SortIdCell{}, SortKItem{}}(VarK:SortIdCell{}),dotk{}())),
        VarK:SortIdCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:IdCellOpt`(inj{IdCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortIdCellOpt{},R} (
        Lblproject'Coln'IdCellOpt{}(kseq{}(inj{SortIdCellOpt{}, SortKItem{}}(VarK:SortIdCellOpt{}),dotk{}())),
        VarK:SortIdCellOpt{}),
      \top{R}()))
  [projection{}()]

// rule `project:Ids`(inj{Ids,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortIds{},R} (
        Lblproject'Coln'Ids{}(kseq{}(inj{SortIds{}, SortKItem{}}(VarK:SortIds{}),dotk{}())),
        VarK:SortIds{}),
      \top{R}()))
  [projection{}()]

// rule `project:Int`(inj{Int,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lblproject'Coln'Int{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarK:SortInt{}),dotk{}())),
        VarK:SortInt{}),
      \top{R}()))
  [projection{}()]

// rule `project:KCell`(inj{KCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortKCell{},R} (
        Lblproject'Coln'KCell{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarK:SortKCell{}),dotk{}())),
        VarK:SortKCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:KCellOpt`(inj{KCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortKCellOpt{},R} (
        Lblproject'Coln'KCellOpt{}(kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarK:SortKCellOpt{}),dotk{}())),
        VarK:SortKCellOpt{}),
      \top{R}()))
  [projection{}()]

// rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortKItem{},R} (
        Lblproject'Coln'KItem{}(kseq{}(VarK:SortKItem{},dotk{}())),
        VarK:SortKItem{}),
      \top{R}()))
  [projection{}()]

// rule `project:KResult`(inj{KResult,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortKResult{},R} (
        Lblproject'Coln'KResult{}(kseq{}(inj{SortKResult{}, SortKItem{}}(VarK:SortKResult{}),dotk{}())),
        VarK:SortKResult{}),
      \top{R}()))
  [projection{}()]

// rule `project:KotIntVarAssign`(inj{KotIntVarAssign,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortKotIntVarAssign{},R} (
        Lblproject'Coln'KotIntVarAssign{}(kseq{}(inj{SortKotIntVarAssign{}, SortKItem{}}(VarK:SortKotIntVarAssign{}),dotk{}())),
        VarK:SortKotIntVarAssign{}),
      \top{R}()))
  [projection{}()]

// rule `project:KotlinFun`(inj{KotlinFun,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortKotlinFun{},R} (
        Lblproject'Coln'KotlinFun{}(kseq{}(inj{SortKotlinFun{}, SortKItem{}}(VarK:SortKotlinFun{}),dotk{}())),
        VarK:SortKotlinFun{}),
      \top{R}()))
  [projection{}()]

// rule `project:KotlinFunCall`(inj{KotlinFunCall,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortKotlinFunCall{},R} (
        Lblproject'Coln'KotlinFunCall{}(kseq{}(inj{SortKotlinFunCall{}, SortKItem{}}(VarK:SortKotlinFunCall{}),dotk{}())),
        VarK:SortKotlinFunCall{}),
      \top{R}()))
  [projection{}()]

// rule `project:List`(inj{List,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortList{},R} (
        Lblproject'Coln'List{}(kseq{}(inj{SortList{}, SortKItem{}}(VarK:SortList{}),dotk{}())),
        VarK:SortList{}),
      \top{R}()))
  [projection{}()]

// rule `project:LocCell`(inj{LocCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortLocCell{},R} (
        Lblproject'Coln'LocCell{}(kseq{}(inj{SortLocCell{}, SortKItem{}}(VarK:SortLocCell{}),dotk{}())),
        VarK:SortLocCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:LocCellOpt`(inj{LocCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortLocCellOpt{},R} (
        Lblproject'Coln'LocCellOpt{}(kseq{}(inj{SortLocCellOpt{}, SortKItem{}}(VarK:SortLocCellOpt{}),dotk{}())),
        VarK:SortLocCellOpt{}),
      \top{R}()))
  [projection{}()]

// rule `project:LocalEnvCell`(inj{LocalEnvCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortLocalEnvCell{},R} (
        Lblproject'Coln'LocalEnvCell{}(kseq{}(inj{SortLocalEnvCell{}, SortKItem{}}(VarK:SortLocalEnvCell{}),dotk{}())),
        VarK:SortLocalEnvCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:LocalEnvCellOpt`(inj{LocalEnvCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortLocalEnvCellOpt{},R} (
        Lblproject'Coln'LocalEnvCellOpt{}(kseq{}(inj{SortLocalEnvCellOpt{}, SortKItem{}}(VarK:SortLocalEnvCellOpt{}),dotk{}())),
        VarK:SortLocalEnvCellOpt{}),
      \top{R}()))
  [projection{}()]

// rule `project:LocalFun`(inj{LocalFun,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortLocalFun{},R} (
        Lblproject'Coln'LocalFun{}(kseq{}(inj{SortLocalFun{}, SortKItem{}}(VarK:SortLocalFun{}),dotk{}())),
        VarK:SortLocalFun{}),
      \top{R}()))
  [projection{}()]

// rule `project:LocalResId`(inj{LocalResId,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortLocalResId{},R} (
        Lblproject'Coln'LocalResId{}(kseq{}(inj{SortLocalResId{}, SortKItem{}}(VarK:SortLocalResId{}),dotk{}())),
        VarK:SortLocalResId{}),
      \top{R}()))
  [projection{}()]

// rule `project:LocalResInt`(inj{LocalResInt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortLocalResInt{},R} (
        Lblproject'Coln'LocalResInt{}(kseq{}(inj{SortLocalResInt{}, SortKItem{}}(VarK:SortLocalResInt{}),dotk{}())),
        VarK:SortLocalResInt{}),
      \top{R}()))
  [projection{}()]

// rule `project:LocalResString`(inj{LocalResString,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortLocalResString{},R} (
        Lblproject'Coln'LocalResString{}(kseq{}(inj{SortLocalResString{}, SortKItem{}}(VarK:SortLocalResString{}),dotk{}())),
        VarK:SortLocalResString{}),
      \top{R}()))
  [projection{}()]

// rule `project:MainKotlinProg`(inj{MainKotlinProg,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortMainKotlinProg{},R} (
        Lblproject'Coln'MainKotlinProg{}(kseq{}(inj{SortMainKotlinProg{}, SortKItem{}}(VarK:SortMainKotlinProg{}),dotk{}())),
        VarK:SortMainKotlinProg{}),
      \top{R}()))
  [projection{}()]

// rule `project:Map`(inj{Map,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortMap{},R} (
        Lblproject'Coln'Map{}(kseq{}(inj{SortMap{}, SortKItem{}}(VarK:SortMap{}),dotk{}())),
        VarK:SortMap{}),
      \top{R}()))
  [projection{}()]

// rule `project:MultsCell`(inj{MultsCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortMultsCell{},R} (
        Lblproject'Coln'MultsCell{}(kseq{}(inj{SortMultsCell{}, SortKItem{}}(VarK:SortMultsCell{}),dotk{}())),
        VarK:SortMultsCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:MultsCellOpt`(inj{MultsCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortMultsCellOpt{},R} (
        Lblproject'Coln'MultsCellOpt{}(kseq{}(inj{SortMultsCellOpt{}, SortKItem{}}(VarK:SortMultsCellOpt{}),dotk{}())),
        VarK:SortMultsCellOpt{}),
      \top{R}()))
  [projection{}()]

// rule `project:OutCell`(inj{OutCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortOutCell{},R} (
        Lblproject'Coln'OutCell{}(kseq{}(inj{SortOutCell{}, SortKItem{}}(VarK:SortOutCell{}),dotk{}())),
        VarK:SortOutCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:OutCellOpt`(inj{OutCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortOutCellOpt{},R} (
        Lblproject'Coln'OutCellOpt{}(kseq{}(inj{SortOutCellOpt{}, SortKItem{}}(VarK:SortOutCellOpt{}),dotk{}())),
        VarK:SortOutCellOpt{}),
      \top{R}()))
  [projection{}()]

// rule `project:Params`(inj{Params,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortParams{},R} (
        Lblproject'Coln'Params{}(kseq{}(inj{SortParams{}, SortKItem{}}(VarK:SortParams{}),dotk{}())),
        VarK:SortParams{}),
      \top{R}()))
  [projection{}()]

// rule `project:ParamsCell`(inj{ParamsCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortParamsCell{},R} (
        Lblproject'Coln'ParamsCell{}(kseq{}(inj{SortParamsCell{}, SortKItem{}}(VarK:SortParamsCell{}),dotk{}())),
        VarK:SortParamsCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:ParamsCellOpt`(inj{ParamsCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortParamsCellOpt{},R} (
        Lblproject'Coln'ParamsCellOpt{}(kseq{}(inj{SortParamsCellOpt{}, SortKItem{}}(VarK:SortParamsCellOpt{}),dotk{}())),
        VarK:SortParamsCellOpt{}),
      \top{R}()))
  [projection{}()]

// rule `project:Printable`(inj{Printable,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortPrintable{},R} (
        Lblproject'Coln'Printable{}(kseq{}(inj{SortPrintable{}, SortKItem{}}(VarK:SortPrintable{}),dotk{}())),
        VarK:SortPrintable{}),
      \top{R}()))
  [projection{}()]

// rule `project:ScopeCell`(inj{ScopeCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortScopeCell{},R} (
        Lblproject'Coln'ScopeCell{}(kseq{}(inj{SortScopeCell{}, SortKItem{}}(VarK:SortScopeCell{}),dotk{}())),
        VarK:SortScopeCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:ScopeCellOpt`(inj{ScopeCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortScopeCellOpt{},R} (
        Lblproject'Coln'ScopeCellOpt{}(kseq{}(inj{SortScopeCellOpt{}, SortKItem{}}(VarK:SortScopeCellOpt{}),dotk{}())),
        VarK:SortScopeCellOpt{}),
      \top{R}()))
  [projection{}()]

// rule `project:Set`(inj{Set,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortSet{},R} (
        Lblproject'Coln'Set{}(kseq{}(inj{SortSet{}, SortKItem{}}(VarK:SortSet{}),dotk{}())),
        VarK:SortSet{}),
      \top{R}()))
  [projection{}()]

// rule `project:Skip`(inj{Skip,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortSkip{},R} (
        Lblproject'Coln'Skip{}(kseq{}(inj{SortSkip{}, SortKItem{}}(VarK:SortSkip{}),dotk{}())),
        VarK:SortSkip{}),
      \top{R}()))
  [projection{}()]

// rule `project:Statement`(inj{Statement,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortStatement{},R} (
        Lblproject'Coln'Statement{}(kseq{}(inj{SortStatement{}, SortKItem{}}(VarK:SortStatement{}),dotk{}())),
        VarK:SortStatement{}),
      \top{R}()))
  [projection{}()]

// rule `project:StoreCell`(inj{StoreCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortStoreCell{},R} (
        Lblproject'Coln'StoreCell{}(kseq{}(inj{SortStoreCell{}, SortKItem{}}(VarK:SortStoreCell{}),dotk{}())),
        VarK:SortStoreCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:StoreCellOpt`(inj{StoreCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortStoreCellOpt{},R} (
        Lblproject'Coln'StoreCellOpt{}(kseq{}(inj{SortStoreCellOpt{}, SortKItem{}}(VarK:SortStoreCellOpt{}),dotk{}())),
        VarK:SortStoreCellOpt{}),
      \top{R}()))
  [projection{}()]

// rule `project:Stream`(inj{Stream,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortStream{},R} (
        Lblproject'Coln'Stream{}(kseq{}(inj{SortStream{}, SortKItem{}}(VarK:SortStream{}),dotk{}())),
        VarK:SortStream{}),
      \top{R}()))
  [projection{}()]

// rule `project:String`(inj{String,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortString{},R} (
        Lblproject'Coln'String{}(kseq{}(inj{SortString{}, SortKItem{}}(VarK:SortString{}),dotk{}())),
        VarK:SortString{}),
      \top{R}()))
  [projection{}()]

// rule `project:TCell`(inj{TCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortTCell{},R} (
        Lblproject'Coln'TCell{}(kseq{}(inj{SortTCell{}, SortKItem{}}(VarK:SortTCell{}),dotk{}())),
        VarK:SortTCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:TCellFragment`(inj{TCellFragment,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortTCellFragment{},R} (
        Lblproject'Coln'TCellFragment{}(kseq{}(inj{SortTCellFragment{}, SortKItem{}}(VarK:SortTCellFragment{}),dotk{}())),
        VarK:SortTCellFragment{}),
      \top{R}()))
  [projection{}()]

// rule `project:TCellOpt`(inj{TCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortTCellOpt{},R} (
        Lblproject'Coln'TCellOpt{}(kseq{}(inj{SortTCellOpt{}, SortKItem{}}(VarK:SortTCellOpt{}),dotk{}())),
        VarK:SortTCellOpt{}),
      \top{R}()))
  [projection{}()]

// rule `project:TempCell`(inj{TempCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortTempCell{},R} (
        Lblproject'Coln'TempCell{}(kseq{}(inj{SortTempCell{}, SortKItem{}}(VarK:SortTempCell{}),dotk{}())),
        VarK:SortTempCell{}),
      \top{R}()))
  [projection{}()]

// rule `project:TempCellOpt`(inj{TempCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortTempCellOpt{},R} (
        Lblproject'Coln'TempCellOpt{}(kseq{}(inj{SortTempCellOpt{}, SortKItem{}}(VarK:SortTempCellOpt{}),dotk{}())),
        VarK:SortTempCellOpt{}),
      \top{R}()))
  [projection{}()]

// rule `project:UniqueIdAssigner`(inj{UniqueIdAssigner,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortUniqueIdAssigner{},R} (
        Lblproject'Coln'UniqueIdAssigner{}(kseq{}(inj{SortUniqueIdAssigner{}, SortKItem{}}(VarK:SortUniqueIdAssigner{}),dotk{}())),
        VarK:SortUniqueIdAssigner{}),
      \top{R}()))
  [projection{}()]

// rule `project:Values`(inj{Values,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortValues{},R} (
        Lblproject'Coln'Values{}(kseq{}(inj{SortValues{}, SortKItem{}}(VarK:SortValues{}),dotk{}())),
        VarK:SortValues{}),
      \top{R}()))
  [projection{}()]

// rule `project:VariableType`(inj{VariableType,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortVariableType{},R} (
        Lblproject'Coln'VariableType{}(kseq{}(inj{SortVariableType{}, SortKItem{}}(VarK:SortVariableType{}),dotk{}())),
        VarK:SortVariableType{}),
      \top{R}()))
  [projection{}()]

// rule `replace(_,_,_,_)_STRING_String_String_String_String_Int`(Source,ToReplace,Replacement,Count)=>`_+String__STRING_String_String_String`(`_+String__STRING_String_String_String`(`substrString(_,_,_)_STRING_String_String_Int_Int`(Source,#token("0","Int"),`findString(_,_,_)_STRING_Int_String_String_Int`(Source,ToReplace,#token("0","Int"))),Replacement),`replace(_,_,_,_)_STRING_String_String_String_String_Int`(`substrString(_,_,_)_STRING_String_String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),`lengthString(_)_STRING_Int_String`(ToReplace)),`lengthString(_)_STRING_Int_String`(Source)),ToReplace,Replacement,`_-Int_`(Count,#token("1","Int")))) requires `_>Int_`(Count,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(b3981a47a7a07dd2dfde8ebb3ce68e70d6c5156c17d5c09d66b69ea0e87e0fc7) contentStartColumn(8) contentStartLine(637) org.kframework.attributes.Location(Location(637,8,640,30)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-GT-'Int'Unds'{}(VarCount:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortString{},R} (
        Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{},VarCount:SortInt{}),
        Lbl'UndsPlus'String'UndsUnds'STRING'Unds'String'Unds'String'Unds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING'Unds'String'Unds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},\dv{SortInt{}}("0"),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0"))),VarReplacement:SortString{}),Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'String'Unds'String'Unds'Int{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING'Unds'Int'Unds'String{}(VarToReplace:SortString{})),LbllengthString'LParUndsRParUnds'STRING'Unds'Int'Unds'String{}(VarSource:SortString{})),VarToReplace:SortString{},VarReplacement:SortString{},Lbl'Unds'-Int'Unds'{}(VarCount:SortInt{},\dv{SortInt{}}("1"))))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" K [klabel(#ruleRequires) symbol()]"), contentStartLine{}("637"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(637,8,640,30)"), UNIQUE'Unds'ID{}("b3981a47a7a07dd2dfde8ebb3ce68e70d6c5156c17d5c09d66b69ea0e87e0fc7")]

// rule `replace(_,_,_,_)_STRING_String_String_String_String_Int`(Source,_0,_1,#token("0","Int"))=>Source requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2e9795f7b294b7323b7f94a3bf4f1e087cb354583562eeef3dc19404700a9842) contentStartColumn(8) contentStartLine(641) org.kframework.attributes.Location(Location(641,8,641,49)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortString{},R} (
        Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},Var'Unds'0:SortString{},Var'Unds'1:SortString{},\dv{SortInt{}}("0")),
        VarSource:SortString{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("641"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(641,8,641,49)"), UNIQUE'Unds'ID{}("2e9795f7b294b7323b7f94a3bf4f1e087cb354583562eeef3dc19404700a9842")]

// rule `replaceAll(_,_,_)_STRING_String_String_String_String`(Source,ToReplace,Replacement)=>`replace(_,_,_,_)_STRING_String_String_String_String_Int`(Source,ToReplace,Replacement,`countAllOccurrences(_,_)_STRING_Int_String_String`(Source,ToReplace)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2131063d78b401e8a24c24b15e0e699b923c56e90f2a19d1bb495d839d0b7839) contentStartColumn(8) contentStartLine(642) org.kframework.attributes.Location(Location(642,8,642,154)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortString{},R} (
        LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{}),
        Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{},LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("642"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(642,8,642,154)"), UNIQUE'Unds'ID{}("2131063d78b401e8a24c24b15e0e699b923c56e90f2a19d1bb495d839d0b7839")]

// rule `replaceFirst(_,_,_)_STRING_String_String_String_String`(Source,ToReplace,Replacement)=>`_+String__STRING_String_String_String`(`_+String__STRING_String_String_String`(`substrString(_,_,_)_STRING_String_String_Int_Int`(Source,#token("0","Int"),`findString(_,_,_)_STRING_Int_String_String_Int`(Source,ToReplace,#token("0","Int"))),Replacement),`substrString(_,_,_)_STRING_String_String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),`lengthString(_)_STRING_Int_String`(ToReplace)),`lengthString(_)_STRING_Int_String`(Source))) requires `_>=Int_`(`findString(_,_,_)_STRING_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(39191889a120cf96dbb556bc016de17e654b155631892bfbdd3bac9737b6ed8d) contentStartColumn(8) contentStartLine(630) org.kframework.attributes.Location(Location(630,8,632,66)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortString{},R} (
        LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{}),
        Lbl'UndsPlus'String'UndsUnds'STRING'Unds'String'Unds'String'Unds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING'Unds'String'Unds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},\dv{SortInt{}}("0"),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0"))),VarReplacement:SortString{}),LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING'Unds'Int'Unds'String{}(VarToReplace:SortString{})),LbllengthString'LParUndsRParUnds'STRING'Unds'Int'Unds'String{}(VarSource:SortString{})))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" K [klabel(#ruleRequires) symbol()]"), contentStartLine{}("630"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(630,8,632,66)"), UNIQUE'Unds'ID{}("39191889a120cf96dbb556bc016de17e654b155631892bfbdd3bac9737b6ed8d")]

// rule `replaceFirst(_,_,_)_STRING_String_String_String_String`(Source,ToReplace,_0)=>Source requires `_<Int_`(`findString(_,_,_)_STRING_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(16736238f7cc0d390af2ede3c6b2c558825a4e3886423d22ebadf36e7a6719cc) contentStartColumn(8) contentStartLine(633) org.kframework.attributes.Location(Location(633,8,634,57)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-LT-'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortString{},R} (
        LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{},Var'Unds'0:SortString{}),
        VarSource:SortString{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" K [klabel(#ruleRequires) symbol()]"), contentStartLine{}("633"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(633,8,634,57)"), UNIQUE'Unds'ID{}("16736238f7cc0d390af2ede3c6b2c558825a4e3886423d22ebadf36e7a6719cc")]

// rule `rfindChar(_,_,_)_STRING_Int_String_String_Int`(S1,S2,I)=>`maxInt(_,_)_INT-COMMON_Int_Int_Int`(`rfindString(_,_,_)_STRING_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`rfindChar(_,_,_)_STRING_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING_Int_String`(S2)),I)) requires `_=/=String__STRING_Bool_String_String`(S2,#token("\"\"","String")) ensures #token("true","Bool") [UNIQUE_ID(0cc10e4d97a5f59dbff5a408dd91a50a37b30f9d6c8cddf135d58308b14dc956) contentStartColumn(8) contentStartLine(622) org.kframework.attributes.Location(Location(622,8,622,182)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'Unds'Bool'Unds'String'Unds'String{}(VarS2:SortString{},\dv{SortString{}}("")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},VarS2:SortString{},VarI:SortInt{}),
        LblmaxInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(LblrfindString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING'Unds'Int'Unds'String{}(VarS2:SortString{})),VarI:SortInt{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" K [klabel(#ruleRequires) symbol()]"), contentStartLine{}("622"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(622,8,622,182)"), UNIQUE'Unds'ID{}("0cc10e4d97a5f59dbff5a408dd91a50a37b30f9d6c8cddf135d58308b14dc956")]

// rule `rfindChar(_,_,_)_STRING_Int_String_String_Int`(_0,#token("\"\"","String"),_1)=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(60f67db6063490c1850c8b9f1b0e73e5a3fcba11fc6a2f020e382010ab4c4a2d) contentStartColumn(8) contentStartLine(623) org.kframework.attributes.Location(Location(623,8,623,33)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'Unds'Int'Unds'String'Unds'String'Unds'Int{}(Var'Unds'0:SortString{},\dv{SortString{}}(""),Var'Unds'1:SortInt{}),
        \dv{SortInt{}}("-1")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("623"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(623,8,623,33)"), UNIQUE'Unds'ID{}("60f67db6063490c1850c8b9f1b0e73e5a3fcba11fc6a2f020e382010ab4c4a2d")]

// rule `signExtendBitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(I,IDX,LEN)=>`_-Int_`(`_modInt_`(`_+Int_`(`bitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(I,IDX,LEN),`_<<Int_`(#token("1","Int"),`_-Int_`(LEN,#token("1","Int")))),`_<<Int_`(#token("1","Int"),LEN)),`_<<Int_`(#token("1","Int"),`_-Int_`(LEN,#token("1","Int")))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(29482d9e60834a65e556af057119896573413bf32b20b7340707b02780d5895c) contentStartColumn(8) contentStartLine(458) org.kframework.attributes.Location(Location(458,8,458,164)) org.kframework.attributes.Source(Source(/usr/local/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblsignExtendBitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{},VarLEN:SortInt{}),
        Lbl'Unds'-Int'Unds'{}(Lbl'Unds'modInt'Unds'{}(Lbl'UndsPlus'Int'Unds'{}(LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{},VarLEN:SortInt{}),Lbl'Unds-LT--LT-'Int'Unds'{}(\dv{SortInt{}}("1"),Lbl'Unds'-Int'Unds'{}(VarLEN:SortInt{},\dv{SortInt{}}("1")))),Lbl'Unds-LT--LT-'Int'Unds'{}(\dv{SortInt{}}("1"),VarLEN:SortInt{})),Lbl'Unds-LT--LT-'Int'Unds'{}(\dv{SortInt{}}("1"),Lbl'Unds'-Int'Unds'{}(VarLEN:SortInt{},\dv{SortInt{}}("1"))))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/usr/local/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]"), contentStartLine{}("458"), contentStartColumn{}("8"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(458,8,458,164)"), UNIQUE'Unds'ID{}("29482d9e60834a65e556af057119896573413bf32b20b7340707b02780d5895c")]


// priority groups
  alias priorityLE50{}() : SortGeneratedTopCell{}
  where priorityLE50{}() := \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule6LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule7LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule8LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule9LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule10LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule11LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule12LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule13LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule14LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule15LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule16LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule17LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule18LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule19LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortDeclaredVar{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule20LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortDeclaredVar{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortId{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule21LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortId{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule22LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule23LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule24LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule25LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortBExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortBlock{},\exists{SortGeneratedTopCell{}}(VarK2:SortBlock{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule26LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortBExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortBlock{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule27LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortBExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortBlock{},\exists{SortGeneratedTopCell{}}(VarK2:SortElseIfStatement{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule28LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortElseIfStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarAEs:SortAExps{},\exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortKItem{},rule29LHS{}(VarAEs:SortAExps{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{},Var'Unds'9:SortKItem{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarB:SortBExp{},\exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarS:SortStatement{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'10:SortStatement{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule30LHS{}(VarB:SortBExp{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'10:SortStatement{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarDotVar3:SortMap{},\exists{SortGeneratedTopCell{}}(VarDotVar4:SortMap{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarL:SortKItem{},\exists{SortGeneratedTopCell{}}(VarV:SortKItem{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'10:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'8:SortEnvCell{},rule31LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarV:SortKItem{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortMultsCell{},Var'Unds'10:SortStoreCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{},Var'Unds'8:SortEnvCell{})))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule32LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarDotVar3:SortFunThreadCellMap{},\exists{SortGeneratedTopCell{}}(VarDotVar4:SortLocalEnvCell{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarP:SortK{},\exists{SortGeneratedTopCell{}}(VarS:SortStatement{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortLocCell{},rule33LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortFunThreadCellMap{},VarDotVar4:SortLocalEnvCell{},VarI:SortId{},VarP:SortK{},VarS:SortStatement{},Var'Unds'0:SortEnvCell{},Var'Unds'1:SortStoreCell{},Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarDotVar3:SortFunThreadCellMap{},\exists{SortGeneratedTopCell{}}(VarFunM:SortMap{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarL:SortInt{},\exists{SortGeneratedTopCell{}}(VarP:SortId{},\exists{SortGeneratedTopCell{}}(VarPs:SortParams{},\exists{SortGeneratedTopCell{}}(VarSMap:SortMap{},\exists{SortGeneratedTopCell{}}(VarV:SortInt{},\exists{SortGeneratedTopCell{}}(VarVs:SortValues{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortScopeCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortParamsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},rule34LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortFunThreadCellMap{},VarFunM:SortMap{},VarI:SortId{},VarL:SortInt{},VarP:SortId{},VarPs:SortParams{},VarSMap:SortMap{},VarV:SortInt{},VarVs:SortValues{},Var'Unds'0:SortScopeCell{},Var'Unds'1:SortParamsCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{}))))))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule35LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule36LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI1:SortInt{},\exists{SortGeneratedTopCell{}}(VarI2:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule37LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarDotVar3:SortMap{},\exists{SortGeneratedTopCell{}}(VarDotVar4:SortMap{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarL:SortKItem{},\exists{SortGeneratedTopCell{}}(VarV:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortEnvCell{},rule38LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{},Var'Unds'9:SortEnvCell{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule39LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule40LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI1:SortInt{},\exists{SortGeneratedTopCell{}}(VarI2:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule41LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarS1:SortString{},\exists{SortGeneratedTopCell{}}(VarS2:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule42LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS1:SortString{},VarS2:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarDotVar3:SortMap{},\exists{SortGeneratedTopCell{}}(VarDotVar4:SortMap{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarL:SortKItem{},\exists{SortGeneratedTopCell{}}(VarV:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortEnvCell{},rule43LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{},Var'Unds'9:SortEnvCell{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule44LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule45LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI1:SortInt{},\exists{SortGeneratedTopCell{}}(VarI2:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule46LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule47LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule48LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI1:SortInt{},\exists{SortGeneratedTopCell{}}(VarI2:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule49LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule50LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule51LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI1:SortInt{},\exists{SortGeneratedTopCell{}}(VarI2:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule52LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule53LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule54LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI1:SortInt{},\exists{SortGeneratedTopCell{}}(VarI2:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule55LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule56LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule57LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI1:SortInt{},\exists{SortGeneratedTopCell{}}(VarI2:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule58LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortDeclaredVar{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule59LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortDeclaredVar{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarIs:SortIds{},\exists{SortGeneratedTopCell{}}(VarL:SortInt{},\exists{SortGeneratedTopCell{}}(VarMEnv:SortMap{},\exists{SortGeneratedTopCell{}}(VarMStore:SortMap{},\exists{SortGeneratedTopCell{}}(VarMults:SortMap{},\exists{SortGeneratedTopCell{}}(VarStg:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'10:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'8:SortVariableType{},rule60LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarIs:SortIds{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarStg:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{},Var'Unds'10:SortAExp{},Var'Unds'8:SortVariableType{})))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarIs:SortIds{},\exists{SortGeneratedTopCell{}}(VarL:SortInt{},\exists{SortGeneratedTopCell{}}(VarMEnv:SortMap{},\exists{SortGeneratedTopCell{}}(VarMStore:SortMap{},\exists{SortGeneratedTopCell{}}(VarMults:SortMap{},\exists{SortGeneratedTopCell{}}(VarV:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'10:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'8:SortVariableType{},rule61LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarIs:SortIds{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{},Var'Unds'10:SortAExp{},Var'Unds'8:SortVariableType{})))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarIs:SortIds{},\exists{SortGeneratedTopCell{}}(VarL:SortInt{},\exists{SortGeneratedTopCell{}}(VarMEnv:SortMap{},\exists{SortGeneratedTopCell{}}(VarMStore:SortMap{},\exists{SortGeneratedTopCell{}}(VarMults:SortMap{},\exists{SortGeneratedTopCell{}}(VarS:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'10:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'8:SortVariableType{},rule62LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarIs:SortIds{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarS:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{},Var'Unds'10:SortAExp{},Var'Unds'8:SortVariableType{})))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarIs:SortIds{},\exists{SortGeneratedTopCell{}}(VarL:SortInt{},\exists{SortGeneratedTopCell{}}(VarMEnv:SortMap{},\exists{SortGeneratedTopCell{}}(VarMStore:SortMap{},\exists{SortGeneratedTopCell{}}(VarMults:SortMap{},\exists{SortGeneratedTopCell{}}(VarV:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'10:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'8:SortVariableType{},rule63LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarIs:SortIds{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{},Var'Unds'10:SortAExp{},Var'Unds'8:SortVariableType{})))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarT:SortVariableType{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortLocCell{},rule64LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarT:SortVariableType{},Var'Unds'0:SortInt{},Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarT:SortVariableType{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortLocCell{},rule65LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarT:SortVariableType{},Var'Unds'0:SortString{},Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarL:SortInt{},\exists{SortGeneratedTopCell{}}(VarMEnv:SortMap{},\exists{SortGeneratedTopCell{}}(VarMStore:SortMap{},\exists{SortGeneratedTopCell{}}(VarMults:SortMap{},\exists{SortGeneratedTopCell{}}(VarStg:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortOutCell{},rule66LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarStg:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarL:SortInt{},\exists{SortGeneratedTopCell{}}(VarMEnv:SortMap{},\exists{SortGeneratedTopCell{}}(VarMStore:SortMap{},\exists{SortGeneratedTopCell{}}(VarMults:SortMap{},\exists{SortGeneratedTopCell{}}(VarV:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortOutCell{},rule67LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarL:SortInt{},\exists{SortGeneratedTopCell{}}(VarMEnv:SortMap{},\exists{SortGeneratedTopCell{}}(VarMStore:SortMap{},\exists{SortGeneratedTopCell{}}(VarMults:SortMap{},\exists{SortGeneratedTopCell{}}(VarS:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortOutCell{},rule68LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarS:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarL:SortInt{},\exists{SortGeneratedTopCell{}}(VarMEnv:SortMap{},\exists{SortGeneratedTopCell{}}(VarMStore:SortMap{},\exists{SortGeneratedTopCell{}}(VarMults:SortMap{},\exists{SortGeneratedTopCell{}}(VarV:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortOutCell{},rule69LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarDotVar3:SortMap{},\exists{SortGeneratedTopCell{}}(VarDotVar4:SortMap{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarL:SortKItem{},\exists{SortGeneratedTopCell{}}(VarS:SortAExp{},\exists{SortGeneratedTopCell{}}(VarStg:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'10:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'12:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortLocCell{},rule70LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarS:SortAExp{},VarStg:SortString{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortStoreCell{},Var'Unds'10:SortEnvCell{},Var'Unds'12:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}))))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarDotVar3:SortMap{},\exists{SortGeneratedTopCell{}}(VarDotVar4:SortMap{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarL:SortKItem{},\exists{SortGeneratedTopCell{}}(VarS:SortAExp{},\exists{SortGeneratedTopCell{}}(VarV:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'10:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'12:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortLocCell{},rule71LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarS:SortAExp{},VarV:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortStoreCell{},Var'Unds'10:SortEnvCell{},Var'Unds'12:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}))))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarDotVar3:SortMap{},\exists{SortGeneratedTopCell{}}(VarDotVar4:SortMap{},\exists{SortGeneratedTopCell{}}(VarI1:SortId{},\exists{SortGeneratedTopCell{}}(VarI2:SortId{},\exists{SortGeneratedTopCell{}}(VarL:SortKItem{},\exists{SortGeneratedTopCell{}}(VarS:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'10:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'12:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortLocCell{},rule72LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI1:SortId{},VarI2:SortId{},VarL:SortKItem{},VarS:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortStoreCell{},Var'Unds'10:SortEnvCell{},Var'Unds'12:SortMultsCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{}))))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortId{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule73LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortId{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule74LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule75LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule76LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule77LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI1:SortInt{},\exists{SortGeneratedTopCell{}}(VarI2:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule78LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI1:SortInt{},VarI2:SortInt{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortBExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortBlock{},\exists{SortGeneratedTopCell{}}(VarK2:SortBlock{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule79LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarB:SortBlock{},\exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortBlock{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'13:SortBool{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortLocCell{},rule80LHS{}(VarB:SortBlock{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortBlock{},Var'Unds'1:SortFunctionCell{},Var'Unds'13:SortBool{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarB:SortBlock{},\exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortBlock{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortLocCell{},rule81LHS{}(VarB:SortBlock{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortBlock{},Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarL:SortInt{},\exists{SortGeneratedTopCell{}}(VarMEnv:SortMap{},\exists{SortGeneratedTopCell{}}(VarMStore:SortMap{},\exists{SortGeneratedTopCell{}}(VarMults:SortMap{},\exists{SortGeneratedTopCell{}}(VarT:SortVariableType{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortOutCell{},rule82LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarL:SortInt{},VarMEnv:SortMap{},VarMStore:SortMap{},VarMults:SortMap{},VarT:SortVariableType{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortOutCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarId:SortId{},\exists{SortGeneratedTopCell{}}(VarT:SortVariableType{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule83LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarId:SortId{},VarT:SortVariableType{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarS1:SortStatement{},\exists{SortGeneratedTopCell{}}(VarS2:SortStatement{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule84LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS1:SortStatement{},VarS2:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarS:SortStatement{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule85LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarB:SortBExp{},\exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarS:SortStatement{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'11:SortBlock{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule86LHS{}(VarB:SortBExp{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'11:SortBlock{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarB:SortBExp{},\exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarS1:SortStatement{},\exists{SortGeneratedTopCell{}}(VarS2:SortElseIfStatement{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'11:SortBlock{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule87LHS{}(VarB:SortBExp{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS1:SortStatement{},VarS2:SortElseIfStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'11:SortBlock{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarA:SortAssigner{},\exists{SortGeneratedTopCell{}}(VarAEM:SortAExpMod{},\exists{SortGeneratedTopCell{}}(VarB:SortBExp{},\exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarS:SortStatement{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule88LHS{}(VarA:SortAssigner{},VarAEM:SortAExpMod{},VarB:SortBExp{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarDotVar3:SortFunThreadCellMap{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarP:SortParams{},\exists{SortGeneratedTopCell{}}(VarS:SortStatement{},\exists{SortGeneratedTopCell{}}(VarVariableType:SortFunReturnType{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortLocCell{},rule89LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortFunThreadCellMap{},VarI:SortId{},VarP:SortParams{},VarS:SortStatement{},VarVariableType:SortFunReturnType{},Var'Unds'0:SortEnvCell{},Var'Unds'1:SortStoreCell{},Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarB:SortBlock{},\exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule90LHS{}(VarB:SortBlock{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortBExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortBlock{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule91LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarS:SortStatement{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'12:SortBool{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule92LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'12:SortBool{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortStatement{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortLocCell{},rule93LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortStatement{},Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortBExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortBlock{},\exists{SortGeneratedTopCell{}}(VarK2:SortElseIfStatement{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule94LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortElseIfStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarB:SortStatement{},\exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarS:SortElseIfStatement{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'12:SortBool{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule95LHS{}(VarB:SortStatement{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortElseIfStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'12:SortBool{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarS:SortElseIfStatement{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortStatement{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'6:SortLocCell{},rule96LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarS:SortElseIfStatement{},Var'Unds'0:SortStatement{},Var'Unds'1:SortFunctionCell{},Var'Unds'2:SortEnvCell{},Var'Unds'3:SortStoreCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{},Var'Unds'6:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarDotVar3:SortFunThreadCellMap{},\exists{SortGeneratedTopCell{}}(VarFunId:SortId{},\exists{SortGeneratedTopCell{}}(VarFunM:SortMap{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarL:SortInt{},\exists{SortGeneratedTopCell{}}(VarSMap:SortMap{},\exists{SortGeneratedTopCell{}}(VarV:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortScopeCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortParamsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortTempCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortOutCell{},rule97LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortFunThreadCellMap{},VarFunId:SortId{},VarFunM:SortMap{},VarI:SortId{},VarL:SortInt{},VarSMap:SortMap{},VarV:SortInt{},Var'Unds'0:SortScopeCell{},Var'Unds'1:SortParamsCell{},Var'Unds'2:SortTempCell{},Var'Unds'3:SortEnvCell{},Var'Unds'4:SortMultsCell{},Var'Unds'5:SortOutCell{})))))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarS1:SortStatement{},\exists{SortGeneratedTopCell{}}(VarS2:SortStatement{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule98LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarI:SortId{},VarS1:SortStatement{},VarS2:SortStatement{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarDotVar3:SortMap{},\exists{SortGeneratedTopCell{}}(VarDotVar4:SortMap{},\exists{SortGeneratedTopCell{}}(VarI1:SortId{},\exists{SortGeneratedTopCell{}}(VarI2:SortId{},\exists{SortGeneratedTopCell{}}(VarL:SortKItem{},\exists{SortGeneratedTopCell{}}(VarV:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'11:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortLocCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'9:SortEnvCell{},rule99LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI1:SortId{},VarI2:SortId{},VarL:SortKItem{},VarV:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortMultsCell{},Var'Unds'11:SortStoreCell{},Var'Unds'2:SortOutCell{},Var'Unds'3:SortLocCell{},Var'Unds'9:SortEnvCell{}))))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarDotVar3:SortMap{},\exists{SortGeneratedTopCell{}}(VarDotVar4:SortMap{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarL:SortKItem{},\exists{SortGeneratedTopCell{}}(VarV:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortKItem{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'10:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortLocCell{},rule100LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarV:SortInt{},Var'Unds'0:SortKItem{},Var'Unds'1:SortFunctionCell{},Var'Unds'10:SortEnvCell{},Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{})))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarDotVar3:SortMap{},\exists{SortGeneratedTopCell{}}(VarDotVar4:SortMap{},\exists{SortGeneratedTopCell{}}(VarI:SortId{},\exists{SortGeneratedTopCell{}}(VarL:SortKItem{},\exists{SortGeneratedTopCell{}}(VarStg:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortKItem{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'10:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortLocCell{},rule101LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortMap{},VarDotVar4:SortMap{},VarI:SortId{},VarL:SortKItem{},VarStg:SortString{},Var'Unds'0:SortKItem{},Var'Unds'1:SortFunctionCell{},Var'Unds'10:SortEnvCell{},Var'Unds'2:SortMultsCell{},Var'Unds'3:SortOutCell{},Var'Unds'4:SortLocCell{})))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule102LHS{}(VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarAEs:SortAExps{},\exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortOutCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'5:SortLocCell{},rule103LHS{}(VarAEs:SortAExps{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarHOLE:SortAExp{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortOutCell{},Var'Unds'5:SortLocCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarAEs:SortAExps{},\exists{SortGeneratedTopCell{}}(VarDotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(VarDotVar2:SortK{},\exists{SortGeneratedTopCell{}}(VarDotVar3:SortList{},\exists{SortGeneratedTopCell{}}(VarP:SortPrintable{},\exists{SortGeneratedTopCell{}}(Var'Unds'0:SortFunctionCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'3:SortMultsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'4:SortLocCell{},rule104LHS{}(VarAEs:SortAExps{},VarDotVar0:SortGeneratedCounterCell{},VarDotVar2:SortK{},VarDotVar3:SortList{},VarP:SortPrintable{},Var'Unds'0:SortFunctionCell{},Var'Unds'1:SortEnvCell{},Var'Unds'2:SortStoreCell{},Var'Unds'3:SortMultsCell{},Var'Unds'4:SortLocCell{}))))))))))), \bottom{SortGeneratedTopCell{}}()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) []

endmodule [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(374,1,378,9)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/\\workspace/./kt.k)")]
